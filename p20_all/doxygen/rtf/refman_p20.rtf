{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment p20_all }p20_all}
{\comment Generated by doxygen 1.9.5.}
{\creatim \yr2023\mo5\dy11\hr19\min29\sec5}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt p20_all}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version \par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Thu May 11 2023 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
line_t\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
mxGlWindow
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
GlWindow\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
mxWindow
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
RCWindow\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
SDWindow\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
packfile_t\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
packheader_t\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ring_buffer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACOZ" }{}}{\fldrslt {\cs37\ul\cf2 line_t}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACGI" }{}}{\fldrslt {\cs37\ul\cf2 packfile_t}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACGG" }{}}{\fldrslt {\cs37\ul\cf2 packheader_t}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRV" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRP" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all documented files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAA" }{}}{\fldrslt {\cs37\ul\cf2 action.c}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADZ" }{}}{\fldrslt {\cs37\ul\cf2 action.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 buffer.c}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIF" }{}}{\fldrslt {\cs37\ul\cf2 buffer.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKK" }{}}{\fldrslt {\cs37\ul\cf2 client.c}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARB" }{}}{\fldrslt {\cs37\ul\cf2 client.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATB" }{}}{\fldrslt {\cs37\ul\cf2 cmdlib.c}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACHW" }{}}{\fldrslt {\cs37\ul\cf2 cmdlib.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNW" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACPP" }{}}{\fldrslt {\cs37\ul\cf2 GlPainter.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACSI" }{}}{\fldrslt {\cs37\ul\cf2 GlPainter.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACTP" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHZ" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADKI" }{}}{\fldrslt {\cs37\ul\cf2 painter.c}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADSQ" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADZQ" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECN" }{}}{\fldrslt {\cs37\ul\cf2 receiver.c}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAECN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKS" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEKS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERQ" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAERQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUN" }{}}{\fldrslt {\cs37\ul\cf2 sender.c}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEUN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFCY" }{}}{\fldrslt {\cs37\ul\cf2 server.c}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFCY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFLS" }{}}{\fldrslt {\cs37\ul\cf2 server.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFLS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFNR" }{}}{\fldrslt {\cs37\ul\cf2 shared.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFNR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFRD" }{}}{\fldrslt {\cs37\ul\cf2 softgpio.c}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFRD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFWG" }{}}{\fldrslt {\cs37\ul\cf2 softgpio.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFWG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFYR" }{}}{\fldrslt {\cs37\ul\cf2 threads.c}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFYR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLX" }{}}{\fldrslt {\cs37\ul\cf2 threads.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAGLX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GlWindow Class Reference\par \pard\plain 
{\tc\tcl2 \v GlWindow}
{\xe \v GlWindow}
{\bkmkstart AAAAAAACVR}
{\bkmkend AAAAAAACVR}
Inheritance diagram for GlWindow:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_gl_window.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNV" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 (mxWindow *parent, int x, int y, int w, int h, const char *label, int style)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNW" }{}}{\fldrslt {\cs37\ul\cf2 handleEvent}}}
 (mxEvent *event)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNX" }{}}{\fldrslt {\cs37\ul\cf2 draw}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNY" }{}}{\fldrslt {\cs37\ul\cf2 InsertLine}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACOZ" }{}}{\fldrslt {\cs37\ul\cf2 line_t}}}
 &newline)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNZ" }{}}{\fldrslt {\cs37\ul\cf2 LineClear}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOA" }{}}{\fldrslt {\cs37\ul\cf2 LineUndo}}}
 ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADJA" }{}}{\fldrslt {\cs37\ul\cf2 27}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHZ" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v GlWindow\:GlWindow}
{\xe \v GlWindow\:GlWindow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GlWindow::GlWindow (mxWindow *  {\i parent}, int  {\i x}, int  {\i y}, int  {\i w}, int  {\i h}, const char *  {\i label}, int  {\i style})}}
\par
{\bkmkstart AAAAAAAGNV}
{\bkmkend AAAAAAAGNV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVT" }{}}{\fldrslt {\cs37\ul\cf2 55}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACTP" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00055                                                                                                  : mxGlWindow( parent, x, y, w, h, label, style )\par
00056 \{\par
00057 {\cf20 //      glDepthFunc( GL_LEQUAL );}\par
00058 \par
00059         {\cf19 if}( !parent ) setVisible( {\cf17 true} );\par
00060         {\cf19 else} mx :: setIdleWindow ( {\cf17 this} );\par
00061 \par
00062 {\cf20 //      line_t line1 = \{0,0,255,255\};}\par
00063 {\cf20 //      CmdLines.assign(1, line1);}\par
00064             x0 = 0;\par
00065             y0 = 0;\par
00066             x1 = 0;\par
00067             y1 = 0;\par
00068 {\cf20 //    PrevLine.x0 = 0;}\par
00069 {\cf20 //    PrevLine.y0 = 0;}\par
00070 {\cf20 //    PrevLine.x1 = 0;}\par
00071 {\cf20 //    PrevLine.y1 = 0;}\par
00072 \par
00073     setTimer( BAUD_RATE * 10 );\par
00074 \}\par
}
}
{\xe \v ~GlWindow\:GlWindow}
{\xe \v GlWindow\:~GlWindow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GlWindow::~GlWindow (void )}}
\par
{\bkmkstart AAAAAAAGOB}
{\bkmkend AAAAAAAGOB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACWO" }{}}{\fldrslt {\cs37\ul\cf2 76}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACTP" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00077 \{\par
00078         mx::setIdleWindow( 0 );\par
00079 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v draw\:GlWindow}
{\xe \v GlWindow\:draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void GlWindow::draw (void ){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAGNX}
{\bkmkend AAAAAAAGNX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADGK" }{}}{\fldrslt {\cs37\ul\cf2 332}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACTP" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00333 \{\par
00334     glClearColor(1.0f, 1.0f, 1.0f, 1.0f);\par
00335     glClear(GL_COLOR_BUFFER_BIT);\par
00336 \par
00337     glViewport( 0, 0, w2(), h2() ); {\cf20 //resize glviewport}\par
00338     {\cf20 //glViewport( 0, 0, w(), h() ); //resize glviewport}\par
00339 \par
00340 {\cf20 //    glPushMatrix();}\par
00341 \par
00342     glLineWidth(3);\par
00343 \par
00344     glColor3f(0.0f, 0.0f, 0.0f);\par
00345     glBegin(GL_LINES);\par
00346 \par
00347     {\cf19 for}(drawlines_t::iterator iter_lines = CmdLines.begin(); iter_lines != CmdLines.end(); ++iter_lines)\par
00348     \{\par
00349         glVertex2f(iter_lines->x0 * 2.0f / 255.0f -1.0f, iter_lines->y0 * -2.0f / 255.0f +1.0f);\par
00350         glVertex2f(iter_lines->x1 * 2.0f / 255.0f -1.0f, iter_lines->y1 * -2.0f / 255.0f +1.0f);\par
00351     \}\par
00352 \par
00353     glVertex2f(x0 * 2.0f / 255.0f -1.0f, y0 * -2.0f / 255.0f +1.0f);\par
00354     glVertex2f(x1 * 2.0f / 255.0f -1.0f, y1 * -2.0f / 255.0f +1.0f);\par
00355 \par
00356     glEnd();\par
00357 \par
00358 \par
00359 {\cf20 //    glFlush();}\par
00360 \par
00361 {\cf20 //    glPopMatrix();}\par
00362 \}\par
}
}
{\xe \v handleEvent\:GlWindow}
{\xe \v GlWindow\:handleEvent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int GlWindow::handleEvent (mxEvent *  {\i event}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAGNW}
{\bkmkend AAAAAAAGNW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACWT" }{}}{\fldrslt {\cs37\ul\cf2 81}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACTP" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00082 \{\par
00083 {\cf20 //      static float oldrx, oldry, oldtz, oldtx, oldty;}\par
00084 {\cf20 //      static float oldlx, oldly;}\par
00085 {\cf20 //      static int oldx, oldy;}\par
00086 {\cf20 //      static double lastupdate;}\par
00087 \par
00088         {\cf19 switch}( event->event )\par
00089         \{\par
00090 {\cf20 /*}\par
00091 {\cf20     case mxEvent::ParentNotify:}\par
00092 {\cf20     \{}\par
00093 {\cf20         char msg[MAX_MSG_LENGTH + 1];}\par
00094 {\cf20         msg[MAX_MSG_LENGTH] = '\\0';}\par
00095 {\cf20         int i = 0;}\par
00096 {\cf20 }\par
00097 {\cf20         for(drawlines_t::iterator iter_buffer = Buffer.begin(); iter_buffer != Buffer.end() && i < MAX_MSG_LENGTH; ++iter_buffer, i+=4)}\par
00098 {\cf20         \{}\par
00099 {\cf20         msg[i] = iter_buffer->x0;}\par
00100 {\cf20         msg[i+1] = iter_buffer->y0;}\par
00101 {\cf20         msg[i+2] = iter_buffer->x1;}\par
00102 {\cf20         msg[i+3] = iter_buffer->y1;}\par
00103 {\cf20         \}}\par
00104 {\cf20 }\par
00105 {\cf20         msg[i] = '\\0';}\par
00106 {\cf20 }\par
00107 {\cf20         if(Buffer.size() == MAX_MSG_LENGTH/4)}\par
00108 {\cf20         \{}\par
00109 {\cf20             SV_insert_msg(msg);}\par
00110 {\cf20             Buffer.clear();}\par
00111 {\cf20         \}}\par
00112 {\cf20         else}\par
00113 {\cf20             if(!SV_insert_msg_nb(msg))}\par
00114 {\cf20                 Buffer.clear();}\par
00115 {\cf20     \}}\par
00116 {\cf20     break;}\par
00117 {\cf20 */}\par
00118     {\cf19 case} mxEvent::Timer:\par
00119     \{\par
00120                         redraw();\par
00121 \par
00122             {\cf19 if}(this->isEnabled())\par
00123             \{\par
00124                 {\cf19 if}(Buffer.size() < MAX_MSG_LENGTH/4)\par
00125                     \{\par
00126                     {\cf18 unsigned} {\cf18 char} msg[MAX_MSG_LENGTH + 1];\par
00127                     msg[MAX_MSG_LENGTH] = {\cf23 '\\0'};\par
00128                     {\cf18 int} i = 0;\par
00129 \par
00130                     msg[MAX_MSG_LENGTH] = {\cf23 '\\0'};\par
00131 \par
00132                     {\cf19 for}(drawlines_t::iterator iter_buffer = Buffer.begin(); iter_buffer != Buffer.end() && i < MAX_MSG_LENGTH; ++iter_buffer, i+=4)\par
00133                     \{\par
00134                     msg[i] = iter_buffer->x0;\par
00135                     msg[i+1] = iter_buffer->y0;\par
00136                     msg[i+2] = iter_buffer->x1;\par
00137                     msg[i+3] = iter_buffer->y1;\par
00138                     \}\par
00139 \par
00140                     msg[i] = {\cf23 '\\0'};\par
00141 \par
00142                     {\cf19 if}(Buffer.size() == MAX_MSG_LENGTH/4)\par
00143                     \{\par
00144                         SV_insert_msg(msg);\par
00145                         Buffer.clear();\par
00146                     \}\par
00147                     {\cf19 else}\par
00148                         {\cf19 if}(!SV_insert_msg_nb(msg))\par
00149                             Buffer.clear();\par
00150                 \}\par
00151                 {\cf19 else} {\cf19 if}(Buffer.size() > MAX_MSG_LENGTH/4)\par
00152                         Buffer.clear();\par
00153             \}\par
00154             {\cf19 else} {\cf19 if}(!this->isEnabled())\par
00155             \{\par
00156                 {\cf18 char} msg[MAX_MSG_LENGTH + 1];\par
00157                 msg[MAX_MSG_LENGTH] = {\cf23 '\\0'};\par
00158                 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACOZ" }{}}{\fldrslt {\cs37\ul\cf2 line_t}}}
 NewLine = \{0,0,0,0\};\par
00159 \par
00160                 {\cf19 if}(!CL_get_msg(msg))\par
00161                 \{\par
00162                     {\cf19 for}({\cf18 int} i=0; i < MAX_MSG_LENGTH; i+=4)\par
00163                     \{\par
00164                         {\cf19 if}(msg[i])\par
00165                             NewLine.x0 = msg[i];\par
00166                         {\cf19 else}\par
00167                             {\cf19 break};\par
00168                         {\cf19 if}(msg[i+1])\par
00169                             NewLine.y0 = msg[i+1];\par
00170                         {\cf19 else}\par
00171                             {\cf19 break};\par
00172                         {\cf19 if}(msg[i+2])\par
00173                             NewLine.x1 = msg[i+2];\par
00174                         {\cf19 else}\par
00175                             {\cf19 break};\par
00176                         {\cf19 if}(msg[i+3])\par
00177                             NewLine.y1 = msg[i+3];\par
00178                         {\cf19 else}\par
00179                             {\cf19 break};\par
00180 \par
00181                         {\cf19 if}(NewLine.x0 == 255 && NewLine.y0 == 255 && NewLine.x1 == 255 && NewLine.y1 == 255)\par
00182                             CmdLines.clear();\par
00183                         {\cf19 else}\par
00184                             CmdLines.push_back(NewLine);\par
00185 \par
00186 {\cf21 #ifdef _DEBUG}\par
00187                         std::printf({\cf22 "RCWindow::newline: %d %d %d %d\\n"} ,NewLine.x0, NewLine.y0, NewLine.x1, NewLine.y1);\par
00188 {\cf21 #endif }{\cf20 // _DEBUG}\par
00189 \par
00190                     \}\par
00191                 \}\par
00192             \}\par
00193 \par
00194                 {\cf19 return} 1;\par
00195     \}\par
00196     {\cf19 break};\par
00197 \par
00198     {\cf20 /*}\par
00199 {\cf20         case mxEvent::Idle:}\par
00200 {\cf20         \{}\par
00201 {\cf20 }\par
00202 {\cf20                         redraw();}\par
00203 {\cf20                         delay(100);}\par
00204 {\cf20 }\par
00205 {\cf20 //              prev = curr;}\par
00206 {\cf20 }\par
00207 {\cf20             if(!this->isEnabled())}\par
00208 {\cf20             \{}\par
00209 {\cf20                 char msg[MAX_MSG_LENGTH + 1];}\par
00210 {\cf20                 msg[MAX_MSG_LENGTH] = '\\0';}\par
00211 {\cf20                 line_t NewLine = \{0,0,0,0\};}\par
00212 {\cf20 }\par
00213 {\cf20                 if(!CL_get_msg(msg))}\par
00214 {\cf20                 \{}\par
00215 {\cf20                     for(int i=0; i < MAX_MSG_LENGTH; i+=4)}\par
00216 {\cf20                     \{}\par
00217 {\cf20                         if(msg[i])}\par
00218 {\cf20                             NewLine.x0 = msg[i];}\par
00219 {\cf20                         else}\par
00220 {\cf20                             break;}\par
00221 {\cf20                         if(msg[i+1])}\par
00222 {\cf20                             NewLine.y0 = msg[i+1];}\par
00223 {\cf20                         else}\par
00224 {\cf20                             break;}\par
00225 {\cf20                         if(msg[i+2])}\par
00226 {\cf20                             NewLine.x1 = msg[i+2];}\par
00227 {\cf20                         else}\par
00228 {\cf20                             break;}\par
00229 {\cf20                         if(msg[i+3])}\par
00230 {\cf20                             NewLine.y1 = msg[i+3];}\par
00231 {\cf20                         else}\par
00232 {\cf20                             break;}\par
00233 {\cf20 }\par
00234 {\cf20                         if(NewLine.x0 == 255 && NewLine.y0 == 255 && NewLine.x1 == 255 && NewLine.y1 == 255)}\par
00235 {\cf20                             CmdLines.clear();}\par
00236 {\cf20                         else}\par
00237 {\cf20                             CmdLines.push_back(NewLine);}\par
00238 {\cf20 }\par
00239 {\cf20 #ifdef _DEBUG}\par
00240 {\cf20                         std::printf("RCWindow::newline: %d %d %d %d\\n" ,NewLine.x0, NewLine.y0, NewLine.x1, NewLine.y1);}\par
00241 {\cf20 #endif // _DEBUG}\par
00242 {\cf20 }\par
00243 {\cf20                     \}}\par
00244 {\cf20                 \}}\par
00245 {\cf20             \}}\par
00246 {\cf20 }\par
00247 {\cf20                 return 1;}\par
00248 {\cf20         \}}\par
00249 {\cf20         break;}\par
00250 {\cf20     */}\par
00251         {\cf19 case} mxEvent::MouseUp:\par
00252         \{\par
00253 {\cf20 //        char msg[MAX_MSG_LENGTH + 1];}\par
00254 {\cf20 //        int i = 0;}\par
00255             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACOZ" }{}}{\fldrslt {\cs37\ul\cf2 line_t}}}
 NewLine = \{x0,y0,x1,y1\};\par
00256 \par
00257 {\cf20 //          PrevLine = NewLine;}\par
00258             {\cf19 if}(Buffer.size() < MAX_MSG_LENGTH/4)\par
00259         \{\par
00260             {\cf18 unsigned} {\cf18 char} msg[MAX_MSG_LENGTH + 1];\par
00261             msg[MAX_MSG_LENGTH] = {\cf23 '\\0'};\par
00262             {\cf18 int} i = 0;\par
00263 \par
00264             msg[MAX_MSG_LENGTH] = {\cf23 '\\0'};\par
00265 \par
00266             CmdLines.push_back(NewLine);\par
00267             Buffer.push_back(NewLine);\par
00268 \par
00269 {\cf21 #ifdef _DEBUG}\par
00270             std::printf({\cf22 "SDWindow::newline\\n"});\par
00271 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
00272 \par
00273             {\cf19 for}(drawlines_t::iterator iter_buffer = Buffer.begin(); iter_buffer != Buffer.end() && i < MAX_MSG_LENGTH; ++iter_buffer, i+=4)\par
00274             \{\par
00275             msg[i] = iter_buffer->x0;\par
00276             msg[i+1] = iter_buffer->y0;\par
00277             msg[i+2] = iter_buffer->x1;\par
00278             msg[i+3] = iter_buffer->y1;\par
00279             \}\par
00280 \par
00281             msg[i] = {\cf23 '\\0'};\par
00282 \par
00283             {\cf19 if}(Buffer.size() == MAX_MSG_LENGTH/4)\par
00284             \{\par
00285                 SV_insert_msg(msg);\par
00286                 Buffer.clear();\par
00287             \}\par
00288             {\cf19 else}\par
00289                 {\cf19 if}(!SV_insert_msg_nb(msg))\par
00290                     Buffer.clear();\par
00291         \}\par
00292         {\cf19 else} {\cf19 if}(Buffer.size() > MAX_MSG_LENGTH/4)\par
00293                 Buffer.clear();\par
00294 \par
00295             x0 = 0;\par
00296             y0 = 0;\par
00297             x1 = 0;\par
00298             y1 = 0;\par
00299 {\cf20 //              g_viewerSettings.pause = false;}\par
00300         \}\par
00301         {\cf19 break};\par
00302 \par
00303         {\cf19 case} mxEvent::MouseDown:\par
00304         \{\par
00305 {\cf20 //          std::printf("%d,%d\\n", event->x, event->y);}\par
00306 {\cf20 //      std::printf("%d,%d,%d,%d\\n", x0, y0,x1,y1);}\par
00307             x0 = unsigned ({\cf18 char}( event->x * 255.0f / w2() ));\par
00308             y0 = unsigned ({\cf18 char}( event->y * 255.0f / h2() ));\par
00309             x1 = x0;\par
00310             y1 = y0;\par
00311 \par
00312                 {\cf19 return} 1;\par
00313         \}\par
00314         {\cf19 break};\par
00315 \par
00316         {\cf19 case} mxEvent::MouseDrag:\par
00317         \{\par
00318 {\cf20 //          std::printf("%d,%d,%d,%d\\n", x0, y0,x1,y1);}\par
00319             x1 = unsigned ({\cf18 char}( event->x * 255.0f / w2() ));\par
00320             y1 = unsigned ({\cf18 char}( event->y * 255.0f / h2() ));\par
00321 \par
00322                 redraw ();\par
00323 \par
00324                 {\cf19 return} 1;\par
00325         \}\par
00326         {\cf19 break};\par
00327         \} {\cf20 // switch (event->event)}\par
00328 \par
00329         {\cf19 return} 1;\par
00330 \}\par
}
}
{\xe \v InsertLine\:GlWindow}
{\xe \v GlWindow\:InsertLine}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void GlWindow::InsertLine (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACOZ" }{}}{\fldrslt {\cs37\ul\cf2 line_t}}}
 &  {\i newline}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGNY}
{\bkmkend AAAAAAAGNY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADJM" }{}}{\fldrslt {\cs37\ul\cf2 39}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHZ" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow.h}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00039 \{ CmdLines.push_back(newline); redraw(); \}\par
}
}
{\xe \v LineClear\:GlWindow}
{\xe \v GlWindow\:LineClear}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void GlWindow::LineClear ()}}
\par
{\bkmkstart AAAAAAAGNZ}
{\bkmkend AAAAAAAGNZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHQ" }{}}{\fldrslt {\cs37\ul\cf2 364}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACTP" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00364                           \{\par
00365 \par
00366     {\cf18 unsigned} {\cf18 char} msg[5] = \{255, 255, 255, 255, 0\};\par
00367     Buffer.clear();\par
00368     SV_insert_msg(msg);\par
00369     CmdLines.clear();\par
00370     redraw();\par
00371 \par
00372 \}\par
}
}
{\xe \v LineUndo\:GlWindow}
{\xe \v GlWindow\:LineUndo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void GlWindow::LineUndo (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGOA}
{\bkmkend AAAAAAAGOA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADJP" }{}}{\fldrslt {\cs37\ul\cf2 42}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHZ" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow.h}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00042 \{ {\cf19 if}(!CmdLines.empty()) CmdLines.pop_back(); redraw(); \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
GlWindow.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
GlWindow.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
line_t Struct Reference\par \pard\plain 
{\tc\tcl2 \v line_t}
{\xe \v line_t}
{\bkmkstart AAAAAAACOZ}
{\bkmkend AAAAAAACOZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOC" }{}}{\fldrslt {\cs37\ul\cf2 x0}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOD" }{}}{\fldrslt {\cs37\ul\cf2 y0}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOE" }{}}{\fldrslt {\cs37\ul\cf2 x1}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOF" }{}}{\fldrslt {\cs37\ul\cf2 y1}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACOY" }{}}{\fldrslt {\cs37\ul\cf2 28}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNW" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v x0\:line_t}
{\xe \v line_t\:x0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char line_t::x0}}
\par
{\bkmkstart AAAAAAAGOC}
{\bkmkend AAAAAAAGOC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACPB" }{}}{\fldrslt {\cs37\ul\cf2 30}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNW" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine.h}}}
.}\par
}
{\xe \v x1\:line_t}
{\xe \v line_t\:x1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char line_t::x1}}
\par
{\bkmkstart AAAAAAAGOE}
{\bkmkend AAAAAAAGOE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACPD" }{}}{\fldrslt {\cs37\ul\cf2 32}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNW" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine.h}}}
.}\par
}
{\xe \v y0\:line_t}
{\xe \v line_t\:y0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char line_t::y0}}
\par
{\bkmkstart AAAAAAAGOD}
{\bkmkend AAAAAAAGOD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACPC" }{}}{\fldrslt {\cs37\ul\cf2 31}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNW" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine.h}}}
.}\par
}
{\xe \v y1\:line_t}
{\xe \v line_t\:y1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char line_t::y1}}
\par
{\bkmkstart AAAAAAAGOF}
{\bkmkend AAAAAAAGOF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACPE" }{}}{\fldrslt {\cs37\ul\cf2 33}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNW" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
CmdLine.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
packfile_t Struct Reference\par \pard\plain 
{\tc\tcl2 \v packfile_t}
{\xe \v packfile_t}
{\bkmkstart AAAAAAACGI}
{\bkmkend AAAAAAACGI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOG" }{}}{\fldrslt {\cs37\ul\cf2 name}}}
 [56]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOH" }{}}{\fldrslt {\cs37\ul\cf2 filepos}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOI" }{}}{\fldrslt {\cs37\ul\cf2 filelen}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACMZ" }{}}{\fldrslt {\cs37\ul\cf2 133}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACHW" }{}}{\fldrslt {\cs37\ul\cf2 cmdlib.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v filelen\:packfile_t}
{\xe \v packfile_t\:filelen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int packfile_t::filelen}}
\par
{\bkmkstart AAAAAAAGOI}
{\bkmkend AAAAAAAGOI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNC" }{}}{\fldrslt {\cs37\ul\cf2 136}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACHW" }{}}{\fldrslt {\cs37\ul\cf2 cmdlib.h}}}
.}\par
}
{\xe \v filepos\:packfile_t}
{\xe \v packfile_t\:filepos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int packfile_t::filepos}}
\par
{\bkmkstart AAAAAAAGOH}
{\bkmkend AAAAAAAGOH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNC" }{}}{\fldrslt {\cs37\ul\cf2 136}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACHW" }{}}{\fldrslt {\cs37\ul\cf2 cmdlib.h}}}
.}\par
}
{\xe \v name\:packfile_t}
{\xe \v packfile_t\:name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char packfile_t::name[56]}}
\par
{\bkmkstart AAAAAAAGOG}
{\bkmkend AAAAAAAGOG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNB" }{}}{\fldrslt {\cs37\ul\cf2 135}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACHW" }{}}{\fldrslt {\cs37\ul\cf2 cmdlib.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
cmdlib.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
packheader_t Struct Reference\par \pard\plain 
{\tc\tcl2 \v packheader_t}
{\xe \v packheader_t}
{\bkmkstart AAAAAAACGG}
{\bkmkend AAAAAAACGG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOJ" }{}}{\fldrslt {\cs37\ul\cf2 id}}}
 [4]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOK" }{}}{\fldrslt {\cs37\ul\cf2 dirofs}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOL" }{}}{\fldrslt {\cs37\ul\cf2 dirlen}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNF" }{}}{\fldrslt {\cs37\ul\cf2 139}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACHW" }{}}{\fldrslt {\cs37\ul\cf2 cmdlib.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v dirlen\:packheader_t}
{\xe \v packheader_t\:dirlen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int packheader_t::dirlen}}
\par
{\bkmkstart AAAAAAAGOL}
{\bkmkend AAAAAAAGOL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNJ" }{}}{\fldrslt {\cs37\ul\cf2 143}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACHW" }{}}{\fldrslt {\cs37\ul\cf2 cmdlib.h}}}
.}\par
}
{\xe \v dirofs\:packheader_t}
{\xe \v packheader_t\:dirofs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int packheader_t::dirofs}}
\par
{\bkmkstart AAAAAAAGOK}
{\bkmkend AAAAAAAGOK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNI" }{}}{\fldrslt {\cs37\ul\cf2 142}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACHW" }{}}{\fldrslt {\cs37\ul\cf2 cmdlib.h}}}
.}\par
}
{\xe \v id\:packheader_t}
{\xe \v packheader_t\:id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char packheader_t::id[4]}}
\par
{\bkmkstart AAAAAAAGOJ}
{\bkmkend AAAAAAAGOJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACNH" }{}}{\fldrslt {\cs37\ul\cf2 141}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACHW" }{}}{\fldrslt {\cs37\ul\cf2 cmdlib.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
cmdlib.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RCWindow Class Reference\par \pard\plain 
{\tc\tcl2 \v RCWindow}
{\xe \v RCWindow}
{\bkmkstart AAAAAAACRV}
{\bkmkend AAAAAAACRV}
Inheritance diagram for RCWindow:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_r_c_window.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOM" }{}}{\fldrslt {\cs37\ul\cf2 handleEvent}}}
 (mxEvent *event)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGON" }{}}{\fldrslt {\cs37\ul\cf2 redraw}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
mxMenuBar * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOO" }{}}{\fldrslt {\cs37\ul\cf2 getMenuBar}}}
 () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOP" }{}}{\fldrslt {\cs37\ul\cf2 getGlWindow}}}
 () const\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBM" }{}}{\fldrslt {\cs37\ul\cf2 48}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADZQ" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v RCWindow\:RCWindow}
{\xe \v RCWindow\:RCWindow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
RCWindow::RCWindow ()}}
\par
{\bkmkstart AAAAAAAGOQ}
{\bkmkend AAAAAAAGOQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADUL" }{}}{\fldrslt {\cs37\ul\cf2 47}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADSQ" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00047                      : mxWindow( 0, 0, 0, 0, 0, {\cf22 "Receiver Window"}, mxWindow::Normal )\par
00048 \{\par
00049         {\cf20 // create menu stuff}\par
00050         mb = {\cf17 new} mxMenuBar ({\cf17 this});\par
00051         {\cf20 /*}\par
00052 {\cf20         mxMenu *menuFile = new mxMenu ();}\par
00053 {\cf20         mxMenu *menuAction = new mxMenu ();}\par
00054 {\cf20 //      mxMenu *menuTool = new mxMenu ();}\par
00055 {\cf20         mxMenu *menuHelp = new mxMenu ();}\par
00056 {\cf20 }\par
00057 {\cf20         mb->addMenu ("File", menuFile);}\par
00058 {\cf20         mb->addMenu ("Action", menuAction);}\par
00059 {\cf20 //      mb->addMenu ("Tools", menuTool);}\par
00060 {\cf20         mb->addMenu ("Help", menuHelp);}\par
00061 {\cf20 }\par
00062 {\cf20 //      menuFile->addSeparator ();}\par
00063 {\cf20         menuFile->add ("Exit", IDC_FILE_EXIT);}\par
00064 {\cf20 }\par
00065 {\cf20 //      menuAction->add ("Connect...", IDC_ACTION_CONNECT);}\par
00066 {\cf20 //      menuAction->add ("Disconnect...", IDC_ACTION_DISCONNECT);}\par
00067 {\cf20         menuAction->add ("Display Information", IDC_ACTION_INFO);}\par
00068 {\cf20         menuAction->addSeparator ();}\par
00069 {\cf20         menuAction->add ("Undo", IDC_ACTION_UNDO);}\par
00070 {\cf20 //      menuAction->add ("Redo", IDC_ACTION_REDO);}\par
00071 {\cf20         menuAction->addSeparator ();}\par
00072 {\cf20         menuAction->add ("Clear Sceen", IDC_ACTION_CLS);}\par
00073 {\cf20 //      menuAction->add ("Refresh", IDC_ACTION_REFRESH);}\par
00074 {\cf20 }\par
00075 {\cf20         menuHelp->add ("About...", IDC_HELP_ABOUT);}\par
00076 {\cf20     */}\par
00077         {\cf20 // create the OpenGL window}\par
00078         d_GlWindow = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 ({\cf17 this}, 0, 0, 0, 0, {\cf22 ""}, mxWindow::Normal);\par
00079 {\cf21 #ifdef WIN32}\par
00080         SetWindowLong ((HWND) d_GlWindow->getHandle (), GWL_EXSTYLE, WS_EX_CLIENTEDGE);\par
00081 {\cf21 #endif}\par
00082 \par
00083         g_GlWindow = d_GlWindow;\par
00084 \par
00085 {\cf20 //      line_t emptyline = \{0,0,0,0\};}\par
00086 {\cf20 //      cmd_lines.assign(32, emptyline);}\par
00087 \par
00088         setBounds (20, 20, 640, 540);\par
00089         setVisible ({\cf17 true});\par
00090         g_GlWindow->setEnabled({\cf17 false});\par
00091 \}\par
}
}
{\xe \v ~RCWindow\:RCWindow}
{\xe \v RCWindow\:~RCWindow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
RCWindow::~RCWindow ()}}
\par
{\bkmkstart AAAAAAAGOR}
{\bkmkend AAAAAAAGOR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADWH" }{}}{\fldrslt {\cs37\ul\cf2 95}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADSQ" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00096 \{\par
00097         {\cf20 // grab some params in case that hasn't updates}\par
00098 \par
00099 {\cf21 #ifdef WIN32}\par
00100         DeleteFile ({\cf22 "midump.txt"});\par
00101 {\cf21 #endif}\par
00102 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getGlWindow\:RCWindow}
{\xe \v RCWindow\:getGlWindow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 * RCWindow::getGlWindow () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGOP}
{\bkmkend AAAAAAAGOP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECA" }{}}{\fldrslt {\cs37\ul\cf2 62}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADZQ" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow.h}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00062 \{ {\cf19 return} d_GlWindow; \}\par
}
}
{\xe \v getMenuBar\:RCWindow}
{\xe \v RCWindow\:getMenuBar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
mxMenuBar * RCWindow::getMenuBar () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGOO}
{\bkmkend AAAAAAAGOO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBZ" }{}}{\fldrslt {\cs37\ul\cf2 61}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADZQ" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow.h}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00061 \{ {\cf19 return} mb; \}\par
}
}
{\xe \v handleEvent\:RCWindow}
{\xe \v RCWindow\:handleEvent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RCWindow::handleEvent (mxEvent *  {\i event}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAGOM}
{\bkmkend AAAAAAAGOM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADWW" }{}}{\fldrslt {\cs37\ul\cf2 110}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADSQ" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00111 \{\par
00112         {\cf19 switch} (event->event)\par
00113         \{\par
00114 \par
00115         {\cf19 case} mxEvent::Action:\par
00116         \{\par
00117                 {\cf19 switch} (event->action)\par
00118                 \{\par
00119                 {\cf19 case} IDC_FILE_EXIT:\par
00120                 \{\par
00121                         redraw ();\par
00122                         mx::quit ();\par
00123                 \}\par
00124                 {\cf19 break};\par
00125 \par
00126                 {\cf19 case} IDC_ACTION_CLS:\par
00127             getGlWindow()->LineClear();\par
00128             {\cf19 break};\par
00129 \par
00130         {\cf19 case} IDC_ACTION_UNDO:\par
00131             getGlWindow()->LineUndo();\par
00132             {\cf19 break};\par
00133 \par
00134                 {\cf19 case} IDC_HELP_ABOUT:\par
00135                         mxMessageBox ({\cf17 this},\par
00136                                 {\cf22 "Painter P20\\n"}\par
00137                                 {\cf22 "Build:\\t"} __DATE__ {\cf22 ".\\n"}\par
00138                                 {\cf22 "Email:\\tjw26u22@soton.ac.uk\\n"}, {\cf22 "Painter"},\par
00139                                 MX_MB_OK | MX_MB_INFORMATION );\par
00140                         {\cf19 break};\par
00141 \par
00142                 \} {\cf20 //switch (event->action)}\par
00143 \par
00144         \} {\cf20 // mxEvent::Action}\par
00145         {\cf19 break};\par
00146 \par
00147         {\cf19 case} mxEvent::Size:\par
00148         \{\par
00149                 {\cf18 int} w = {\cf17 event}->width;\par
00150                 {\cf18 int} h = {\cf17 event}->height;\par
00151                 {\cf18 int} y = mb->getHeight ();\par
00152 {\cf21 #ifdef WIN32}\par
00153 {\cf21 #define HEIGHT 120}\par
00154 {\cf21 #else}\par
00155 {\cf21 #define HEIGHT 140}\par
00156                 h -= 40;\par
00157 {\cf21 #endif}\par
00158 \par
00159 {\cf20 //              d_GlWindow->setBounds (0, y, w, h - HEIGHT);}\par
00160                 d_GlWindow->setBounds (0, y, w, h);\par
00161 {\cf20 //              d_cpl->setBounds (0, y + h - HEIGHT, w, HEIGHT);}\par
00162         \}\par
00163         {\cf19 break};\par
00164 \par
00165         {\cf19 break};\par
00166         \} {\cf20 // event->event}\par
00167 \par
00168         {\cf19 return} 1;\par
00169 \}\par
}
}
{\xe \v redraw\:RCWindow}
{\xe \v RCWindow\:redraw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void RCWindow::redraw ()}}
\par
{\bkmkstart AAAAAAAGON}
{\bkmkend AAAAAAAGON}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADZI" }{}}{\fldrslt {\cs37\ul\cf2 174}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADSQ" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00175 \{\par
00176         mxEvent event;\par
00177         {\cf17 event}.event = mxEvent::Size;\par
00178         {\cf17 event}.width = w2 ();\par
00179         {\cf17 event}.height = h2 ();\par
00180         handleEvent (&event);\par
00181 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
RCWindow.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
RCWindow.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ring_buffer Struct Reference\par \pard\plain 
{\tc\tcl2 \v ring_buffer}
{\xe \v ring_buffer}
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOS" }{}}{\fldrslt {\cs37\ul\cf2 size}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOT" }{}}{\fldrslt {\cs37\ul\cf2 get_index}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOU" }{}}{\fldrslt {\cs37\ul\cf2 put_index}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ElemType * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOV" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 28}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIF" }{}}{\fldrslt {\cs37\ul\cf2 buffer.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v address\:ring_buffer}
{\xe \v ring_buffer\:address}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ElemType* ring_buffer::address}}
\par
{\bkmkstart AAAAAAAGOV}
{\bkmkend AAAAAAAGOV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 33}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIF" }{}}{\fldrslt {\cs37\ul\cf2 buffer.h}}}
.}\par
}
{\xe \v get_index\:ring_buffer}
{\xe \v ring_buffer\:get_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int ring_buffer::get_index}}
\par
{\bkmkstart AAAAAAAGOT}
{\bkmkend AAAAAAAGOT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJK" }{}}{\fldrslt {\cs37\ul\cf2 31}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIF" }{}}{\fldrslt {\cs37\ul\cf2 buffer.h}}}
.}\par
}
{\xe \v put_index\:ring_buffer}
{\xe \v ring_buffer\:put_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int ring_buffer::put_index}}
\par
{\bkmkstart AAAAAAAGOU}
{\bkmkend AAAAAAAGOU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJL" }{}}{\fldrslt {\cs37\ul\cf2 32}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIF" }{}}{\fldrslt {\cs37\ul\cf2 buffer.h}}}
.}\par
}
{\xe \v size\:ring_buffer}
{\xe \v ring_buffer\:size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int ring_buffer::size}}
\par
{\bkmkstart AAAAAAAGOS}
{\bkmkend AAAAAAAGOS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 30}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIF" }{}}{\fldrslt {\cs37\ul\cf2 buffer.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
buffer.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SDWindow Class Reference\par \pard\plain 
{\tc\tcl2 \v SDWindow}
{\xe \v SDWindow}
{\bkmkstart AAAAAAACRP}
{\bkmkend AAAAAAACRP}
Inheritance diagram for SDWindow:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_s_d_window.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOW" }{}}{\fldrslt {\cs37\ul\cf2 handleEvent}}}
 (mxEvent *event)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOX" }{}}{\fldrslt {\cs37\ul\cf2 redraw}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
mxMenuBar * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOY" }{}}{\fldrslt {\cs37\ul\cf2 getMenuBar}}}
 () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOZ" }{}}{\fldrslt {\cs37\ul\cf2 getGlWindow}}}
 () const\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETM" }{}}{\fldrslt {\cs37\ul\cf2 48}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERQ" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v SDWindow\:SDWindow}
{\xe \v SDWindow\:SDWindow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SDWindow::SDWindow ()}}
\par
{\bkmkstart AAAAAAAGPA}
{\bkmkend AAAAAAAGPA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMN" }{}}{\fldrslt {\cs37\ul\cf2 47}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKS" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00047                      : mxWindow( 0, 0, 0, 0, 0, {\cf22 "Sender Window"}, mxWindow::Normal )\par
00048 \{\par
00049         {\cf20 // create menu stuff}\par
00050         mb = {\cf17 new} mxMenuBar ({\cf17 this});\par
00051         mxMenu *menuFile = {\cf17 new} mxMenu ();\par
00052         mxMenu *menuAction = {\cf17 new} mxMenu ();\par
00053 {\cf20 //      mxMenu *menuTool = new mxMenu ();}\par
00054         mxMenu *menuHelp = {\cf17 new} mxMenu ();\par
00055 \par
00056         mb->addMenu ({\cf22 "File"}, menuFile);\par
00057         mb->addMenu ({\cf22 "Action"}, menuAction);\par
00058 {\cf20 //      mb->addMenu ("Tools", menuTool);}\par
00059         mb->addMenu ({\cf22 "Help"}, menuHelp);\par
00060 \par
00061 {\cf20 //      menuFile->addSeparator ();}\par
00062         menuFile->add ({\cf22 "Exit"}, IDC_FILE_EXIT);\par
00063 \par
00064 {\cf20 //      menuAction->add ("Connect...", IDC_ACTION_CONNECT);}\par
00065 {\cf20 //      menuAction->add ("Disconnect...", IDC_ACTION_DISCONNECT);}\par
00066         menuAction->add ({\cf22 "Display Information"}, IDC_ACTION_INFO);\par
00067         menuAction->addSeparator ();\par
00068         menuAction->add ({\cf22 "Undo"}, IDC_ACTION_UNDO);\par
00069 {\cf20 //      menuAction->add ("Redo", IDC_ACTION_REDO);}\par
00070         menuAction->addSeparator ();\par
00071         menuAction->add ({\cf22 "Clear Sceen"}, IDC_ACTION_CLS);\par
00072 {\cf20 //      menuAction->add ("Refresh", IDC_ACTION_REFRESH);}\par
00073 \par
00074         menuHelp->add ({\cf22 "About..."}, IDC_HELP_ABOUT);\par
00075 \par
00076         {\cf20 // create the OpenGL window}\par
00077         d_GlWindow = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 ({\cf17 this}, 0, 0, 0, 0, {\cf22 ""}, mxWindow::Normal);\par
00078 {\cf21 #ifdef WIN32}\par
00079         SetWindowLong ((HWND) d_GlWindow->getHandle (), GWL_EXSTYLE, WS_EX_CLIENTEDGE);\par
00080 {\cf21 #endif}\par
00081 \par
00082         g_GlWindow = d_GlWindow;\par
00083 \par
00084 {\cf20 //      line_t emptyline = \{0,0,0,0\};}\par
00085 {\cf20 //      cmd_lines.assign(32, emptyline);}\par
00086 \par
00087         setBounds (20, 20, 640, 540);\par
00088         setVisible ({\cf17 true});\par
00089 \}\par
}
}
{\xe \v ~SDWindow\:SDWindow}
{\xe \v SDWindow\:~SDWindow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SDWindow::~SDWindow ()}}
\par
{\bkmkstart AAAAAAAGPB}
{\bkmkend AAAAAAAGPB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOH" }{}}{\fldrslt {\cs37\ul\cf2 93}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKS" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00094 \{\par
00095         {\cf20 // grab some params in case that hasn't updates}\par
00096 \par
00097 {\cf21 #ifdef WIN32}\par
00098         DeleteFile ({\cf22 "midump.txt"});\par
00099 {\cf21 #endif}\par
00100 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getGlWindow\:SDWindow}
{\xe \v SDWindow\:getGlWindow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 * SDWindow::getGlWindow () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGOZ}
{\bkmkend AAAAAAAGOZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUA" }{}}{\fldrslt {\cs37\ul\cf2 62}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERQ" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow.h}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00062 \{ {\cf19 return} d_GlWindow; \}\par
}
}
{\xe \v getMenuBar\:SDWindow}
{\xe \v SDWindow\:getMenuBar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
mxMenuBar * SDWindow::getMenuBar () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGOY}
{\bkmkend AAAAAAAGOY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETZ" }{}}{\fldrslt {\cs37\ul\cf2 61}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERQ" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow.h}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00061 \{ {\cf19 return} mb; \}\par
}
}
{\xe \v handleEvent\:SDWindow}
{\xe \v SDWindow\:handleEvent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int SDWindow::handleEvent (mxEvent *  {\i event}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAGOW}
{\bkmkend AAAAAAAGOW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOW" }{}}{\fldrslt {\cs37\ul\cf2 108}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKS" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00109 \{\par
00110         {\cf19 switch} (event->event)\par
00111         \{\par
00112 \par
00113         {\cf19 case} mxEvent::Action:\par
00114         \{\par
00115                 {\cf19 switch} (event->action)\par
00116                 \{\par
00117                 {\cf19 case} IDC_FILE_EXIT:\par
00118                 \{\par
00119                         redraw ();\par
00120                         mx::quit ();\par
00121                 \}\par
00122                 {\cf19 break};\par
00123 \par
00124                 {\cf19 case} IDC_ACTION_CLS:\par
00125             getGlWindow()->LineClear();\par
00126             {\cf19 break};\par
00127 \par
00128         {\cf19 case} IDC_ACTION_UNDO:\par
00129             getGlWindow()->LineUndo();\par
00130             {\cf19 break};\par
00131 \par
00132                 {\cf19 case} IDC_HELP_ABOUT:\par
00133                         mxMessageBox ({\cf17 this},\par
00134                                 {\cf22 "Painter P20\\n"}\par
00135                                 {\cf22 "Build:\\t"} __DATE__ {\cf22 ".\\n"}\par
00136                                 {\cf22 "Email:\\tjw26u22@soton.ac.uk\\n"}, {\cf22 "Painter"},\par
00137                                 MX_MB_OK | MX_MB_INFORMATION );\par
00138                         {\cf19 break};\par
00139 \par
00140                 \} {\cf20 //switch (event->action)}\par
00141 \par
00142         \} {\cf20 // mxEvent::Action}\par
00143         {\cf19 break};\par
00144 \par
00145         {\cf19 case} mxEvent::Size:\par
00146         \{\par
00147                 {\cf18 int} w = {\cf17 event}->width;\par
00148                 {\cf18 int} h = {\cf17 event}->height;\par
00149                 {\cf18 int} y = mb->getHeight ();\par
00150 {\cf21 #ifdef WIN32}\par
00151 {\cf21 #define HEIGHT 120}\par
00152 {\cf21 #else}\par
00153 {\cf21 #define HEIGHT 140}\par
00154                 h -= 40;\par
00155 {\cf21 #endif}\par
00156 \par
00157 {\cf20 //              d_GlWindow->setBounds (0, y, w, h - HEIGHT);}\par
00158                 d_GlWindow->setBounds (0, y, w, h);\par
00159 {\cf20 //              d_cpl->setBounds (0, y + h - HEIGHT, w, HEIGHT);}\par
00160         \}\par
00161         {\cf19 break};\par
00162 \par
00163         {\cf19 break};\par
00164         \} {\cf20 // event->event}\par
00165 \par
00166         {\cf19 return} 1;\par
00167 \}\par
}
}
{\xe \v redraw\:SDWindow}
{\xe \v SDWindow\:redraw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SDWindow::redraw ()}}
\par
{\bkmkstart AAAAAAAGOX}
{\bkmkend AAAAAAAGOX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERI" }{}}{\fldrslt {\cs37\ul\cf2 172}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKS" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow.cpp}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00173 \{\par
00174         mxEvent event;\par
00175         {\cf17 event}.event = mxEvent::Size;\par
00176         {\cf17 event}.width = w2 ();\par
00177         {\cf17 event}.height = h2 ();\par
00178         handleEvent (&event);\par
00179 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SDWindow.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SDWindow.cpp\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
action.c\par \pard\plain 
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAAB}{\bkmkend AAAAAAAAAB}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAAAC}{\bkmkend AAAAAAAAAC}
00002 {\cf20 }\par
{\bkmkstart AAAAAAAAAD}{\bkmkend AAAAAAAAAD}
00003 {\cf20 ===== sotfgpio.c ========================================================}\par
{\bkmkstart AAAAAAAAAE}{\bkmkend AAAAAAAAAE}
00004 {\cf20 }\par
{\bkmkstart AAAAAAAAAF}{\bkmkend AAAAAAAAAF}
00005 {\cf20 */}\par
{\bkmkstart AAAAAAAAAG}{\bkmkend AAAAAAAAAG}
00006 \par
{\bkmkstart AAAAAAAAAH}{\bkmkend AAAAAAAAAH}
00007 {\cf21 #include <stdio.h>}\par
{\bkmkstart AAAAAAAAAI}{\bkmkend AAAAAAAAAI}
00008 {\cf21 #include <stdlib.h>}\par
{\bkmkstart AAAAAAAAAJ}{\bkmkend AAAAAAAAAJ}
00009 {\cf21 #include <string.h>}\par
{\bkmkstart AAAAAAAAAK}{\bkmkend AAAAAAAAAK}
00010 \par
{\bkmkstart AAAAAAAAAL}{\bkmkend AAAAAAAAAL}
00011 {\cf21 #ifdef _SOFTGPIO}\par
{\bkmkstart AAAAAAAAAM}{\bkmkend AAAAAAAAAM}
00012 {\cf21 #include "softgpio.h"}\par
{\bkmkstart AAAAAAAAAN}{\bkmkend AAAAAAAAAN}
00013 {\cf21 #else}\par
{\bkmkstart AAAAAAAAAO}{\bkmkend AAAAAAAAAO}
00014 {\cf21 #include <wiringPi.h>}\par
{\bkmkstart AAAAAAAAAP}{\bkmkend AAAAAAAAAP}
00015 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAAQ}{\bkmkend AAAAAAAAAQ}
00016 \par
{\bkmkstart AAAAAAAAAR}{\bkmkend AAAAAAAAAR}
00017 {\cf21 #include "shared.h"}\par
{\bkmkstart AAAAAAAAAS}{\bkmkend AAAAAAAAAS}
00018 {\cf21 #include "server.h"}\par
{\bkmkstart AAAAAAAAAT}{\bkmkend AAAAAAAAAT}
00019 \par
{\bkmkstart AAAAAAAAAU}{\bkmkend AAAAAAAAAU}
00020 {\cf21 #include "action.h"}\par
{\bkmkstart AAAAAAAAAV}{\bkmkend AAAAAAAAAV}
00021 \par
{\bkmkstart AAAAAAAAAW}{\bkmkend AAAAAAAAAW}
00022 \par
{\bkmkstart AAAAAAAAAX}{\bkmkend AAAAAAAAAX}
00023 {\cf18 void} CMD_help()\par
{\bkmkstart AAAAAAAAAY}{\bkmkend AAAAAAAAAY}
00024 \{\par
{\bkmkstart AAAAAAAAAZ}{\bkmkend AAAAAAAAAZ}
00025     printf({\cf22 "------------------\\n"}\par
{\bkmkstart AAAAAAAABA}{\bkmkend AAAAAAAABA}
00026            {\cf22 "svsendmsg"} {\cf22 " <string>"}\par
{\bkmkstart AAAAAAAABB}{\bkmkend AAAAAAAABB}
00027            {\cf22 "\\n"}\par
{\bkmkstart AAAAAAAABC}{\bkmkend AAAAAAAABC}
00028            {\cf22 "\\n"}\par
{\bkmkstart AAAAAAAABD}{\bkmkend AAAAAAAABD}
00029            {\cf22 "sdecho"}\par
{\bkmkstart AAAAAAAABE}{\bkmkend AAAAAAAABE}
00030            {\cf22 "\\n"}\par
{\bkmkstart AAAAAAAABF}{\bkmkend AAAAAAAABF}
00031            {\cf22 "sdputc"} {\cf22 " <char>"}\par
{\bkmkstart AAAAAAAABG}{\bkmkend AAAAAAAABG}
00032            {\cf22 "\\n"}\par
{\bkmkstart AAAAAAAABH}{\bkmkend AAAAAAAABH}
00033            {\cf22 "sdflush"}\par
{\bkmkstart AAAAAAAABI}{\bkmkend AAAAAAAABI}
00034            {\cf22 "\\n"}\par
{\bkmkstart AAAAAAAABJ}{\bkmkend AAAAAAAABJ}
00035            {\cf22 "rcecho"}\par
{\bkmkstart AAAAAAAABK}{\bkmkend AAAAAAAABK}
00036            {\cf22 "\\n"}\par
{\bkmkstart AAAAAAAABL}{\bkmkend AAAAAAAABL}
00037            {\cf22 "rcgetc"}\par
{\bkmkstart AAAAAAAABM}{\bkmkend AAAAAAAABM}
00038            {\cf22 "\\n"}\par
{\bkmkstart AAAAAAAABN}{\bkmkend AAAAAAAABN}
00039            {\cf22 "rcflush"}\par
{\bkmkstart AAAAAAAABO}{\bkmkend AAAAAAAABO}
00040            {\cf22 "\\n"}\par
{\bkmkstart AAAAAAAABP}{\bkmkend AAAAAAAABP}
00041            {\cf22 "\\n"}\par
{\bkmkstart AAAAAAAABQ}{\bkmkend AAAAAAAABQ}
00042            {\cf22 "help"}\par
{\bkmkstart AAAAAAAABR}{\bkmkend AAAAAAAABR}
00043            {\cf22 "\\n"}\par
{\bkmkstart AAAAAAAABS}{\bkmkend AAAAAAAABS}
00044            {\cf22 "quit"}\par
{\bkmkstart AAAAAAAABT}{\bkmkend AAAAAAAABT}
00045            {\cf22 "\\n"}\par
{\bkmkstart AAAAAAAABU}{\bkmkend AAAAAAAABU}
00046            {\cf22 "------------------\\n"}\par
{\bkmkstart AAAAAAAABV}{\bkmkend AAAAAAAABV}
00047           );\par
{\bkmkstart AAAAAAAABW}{\bkmkend AAAAAAAABW}
00048 \}\par
{\bkmkstart AAAAAAAABX}{\bkmkend AAAAAAAABX}
00049 \par
{\bkmkstart AAAAAAAABY}{\bkmkend AAAAAAAABY}
00050 {\cf18 void} action_main()\par
{\bkmkstart AAAAAAAABZ}{\bkmkend AAAAAAAABZ}
00051 \{\par
{\bkmkstart AAAAAAAACA}{\bkmkend AAAAAAAACA}
00052     {\cf18 char} cmd[128];\par
{\bkmkstart AAAAAAAACB}{\bkmkend AAAAAAAACB}
00053     {\cf18 char} narg[128];\par
{\bkmkstart AAAAAAAACC}{\bkmkend AAAAAAAACC}
00054 \par
{\bkmkstart AAAAAAAACD}{\bkmkend AAAAAAAACD}
00055     {\cf19 for}(; !flag_sender_ready || !flag_receiver_ready;)\par
{\bkmkstart AAAAAAAACE}{\bkmkend AAAAAAAACE}
00056         delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAACF}{\bkmkend AAAAAAAACF}
00057 \par
{\bkmkstart AAAAAAAACG}{\bkmkend AAAAAAAACG}
00058     printf({\cf22 "Enter 'help' for a list of commands\\n"});\par
{\bkmkstart AAAAAAAACH}{\bkmkend AAAAAAAACH}
00059     {\cf19 for}(;;)\par
{\bkmkstart AAAAAAAACI}{\bkmkend AAAAAAAACI}
00060 \par
{\bkmkstart AAAAAAAACJ}{\bkmkend AAAAAAAACJ}
00061     \{\par
{\bkmkstart AAAAAAAACK}{\bkmkend AAAAAAAACK}
00062         gets(cmd);\par
{\bkmkstart AAAAAAAACL}{\bkmkend AAAAAAAACL}
00063 \par
{\bkmkstart AAAAAAAACM}{\bkmkend AAAAAAAACM}
00064         strcpy(narg,cmd);\par
{\bkmkstart AAAAAAAACN}{\bkmkend AAAAAAAACN}
00065         narg[9]={\cf23 '\\0'};\par
{\bkmkstart AAAAAAAACO}{\bkmkend AAAAAAAACO}
00066 \par
{\bkmkstart AAAAAAAACP}{\bkmkend AAAAAAAACP}
00067         {\cf19 if}(!strcmp(narg,{\cf22 "svsendmsg"}))\par
{\bkmkstart AAAAAAAACQ}{\bkmkend AAAAAAAACQ}
00068             SV_insert_msg(&cmd[10]);\par
{\bkmkstart AAAAAAAACR}{\bkmkend AAAAAAAACR}
00069 \par
{\bkmkstart AAAAAAAACS}{\bkmkend AAAAAAAACS}
00070         {\cf19 if}(!strcmp(cmd,{\cf22 "sdecho"}))\par
{\bkmkstart AAAAAAAACT}{\bkmkend AAAAAAAACT}
00071             SD_print_buffer();\par
{\bkmkstart AAAAAAAACU}{\bkmkend AAAAAAAACU}
00072 \par
{\bkmkstart AAAAAAAACV}{\bkmkend AAAAAAAACV}
00073         strcpy(narg,cmd);\par
{\bkmkstart AAAAAAAACW}{\bkmkend AAAAAAAACW}
00074         narg[6]={\cf23 '\\0'};\par
{\bkmkstart AAAAAAAACX}{\bkmkend AAAAAAAACX}
00075 \par
{\bkmkstart AAAAAAAACY}{\bkmkend AAAAAAAACY}
00076         {\cf19 if}(!strcmp(narg,{\cf22 "sdputc"}))\par
{\bkmkstart AAAAAAAACZ}{\bkmkend AAAAAAAACZ}
00077             SD_buffer_put(cmd[7]);\par
{\bkmkstart AAAAAAAADA}{\bkmkend AAAAAAAADA}
00078 \par
{\bkmkstart AAAAAAAADB}{\bkmkend AAAAAAAADB}
00079         {\cf19 if}(!strcmp(cmd,{\cf22 "sdflush"}))\par
{\bkmkstart AAAAAAAADC}{\bkmkend AAAAAAAADC}
00080             SD_flush_buffer();\par
{\bkmkstart AAAAAAAADD}{\bkmkend AAAAAAAADD}
00081 \par
{\bkmkstart AAAAAAAADE}{\bkmkend AAAAAAAADE}
00082         {\cf20 /*if(!strcmp(cmd,"rcsync"))}\par
{\bkmkstart AAAAAAAADF}{\bkmkend AAAAAAAADF}
00083 {\cf20             RC_sync();*/}\par
{\bkmkstart AAAAAAAADG}{\bkmkend AAAAAAAADG}
00084 \par
{\bkmkstart AAAAAAAADH}{\bkmkend AAAAAAAADH}
00085         {\cf19 if}(!strcmp(cmd,{\cf22 "rcecho"}))\par
{\bkmkstart AAAAAAAADI}{\bkmkend AAAAAAAADI}
00086             RC_print_buffer();\par
{\bkmkstart AAAAAAAADJ}{\bkmkend AAAAAAAADJ}
00087 \par
{\bkmkstart AAAAAAAADK}{\bkmkend AAAAAAAADK}
00088         {\cf19 if}(!strcmp(cmd,{\cf22 "rcgetc"}))\par
{\bkmkstart AAAAAAAADL}{\bkmkend AAAAAAAADL}
00089             printf({\cf22 "%d\\n"}, RC_buffer_get());\par
{\bkmkstart AAAAAAAADM}{\bkmkend AAAAAAAADM}
00090 \par
{\bkmkstart AAAAAAAADN}{\bkmkend AAAAAAAADN}
00091         {\cf19 if}(!strcmp(cmd,{\cf22 "rcflush"}))\par
{\bkmkstart AAAAAAAADO}{\bkmkend AAAAAAAADO}
00092             RC_flush_buffer();\par
{\bkmkstart AAAAAAAADP}{\bkmkend AAAAAAAADP}
00093 \par
{\bkmkstart AAAAAAAADQ}{\bkmkend AAAAAAAADQ}
00094         {\cf19 if}(!strcmp(cmd,{\cf22 "help"}))\par
{\bkmkstart AAAAAAAADR}{\bkmkend AAAAAAAADR}
00095             CMD_help();\par
{\bkmkstart AAAAAAAADS}{\bkmkend AAAAAAAADS}
00096 \par
{\bkmkstart AAAAAAAADT}{\bkmkend AAAAAAAADT}
00097         {\cf19 if}(!strcmp(cmd,{\cf22 "quit"}))\par
{\bkmkstart AAAAAAAADU}{\bkmkend AAAAAAAADU}
00098             exit(0);\par
{\bkmkstart AAAAAAAADV}{\bkmkend AAAAAAAADV}
00099 \par
{\bkmkstart AAAAAAAADW}{\bkmkend AAAAAAAADW}
00100     \}\par
{\bkmkstart AAAAAAAADX}{\bkmkend AAAAAAAADX}
00101 \par
{\bkmkstart AAAAAAAADY}{\bkmkend AAAAAAAADY}
00102 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
action.h\par \pard\plain 
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAEA}{\bkmkend AAAAAAAAEA}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAAEB}{\bkmkend AAAAAAAAEB}
00002 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAAAEC}{\bkmkend AAAAAAAAEC}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAAAED}{\bkmkend AAAAAAAAED}
00004 {\cf20 // Purpose:}\par
{\bkmkstart AAAAAAAAEE}{\bkmkend AAAAAAAAEE}
00005 {\cf20 //}\par
{\bkmkstart AAAAAAAAEF}{\bkmkend AAAAAAAAEF}
00006 {\cf20 // $NoKeywords: $}\par
{\bkmkstart AAAAAAAAEG}{\bkmkend AAAAAAAAEG}
00007 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAAAEH}{\bkmkend AAAAAAAAEH}
00008 {\cf20 */}\par
{\bkmkstart AAAAAAAAEI}{\bkmkend AAAAAAAAEI}
00009 \par
{\bkmkstart AAAAAAAAEJ}{\bkmkend AAAAAAAAEJ}
00010 \par
{\bkmkstart AAAAAAAAEK}{\bkmkend AAAAAAAAEK}
00011 {\cf21 #ifndef __ACTION__}\par
{\bkmkstart AAAAAAAAEL}{\bkmkend AAAAAAAAEL}
00012 {\cf21 #define __ACTION__}\par
{\bkmkstart AAAAAAAAEM}{\bkmkend AAAAAAAAEM}
00013 \par
{\bkmkstart AAAAAAAAEN}{\bkmkend AAAAAAAAEN}
00014 \par
{\bkmkstart AAAAAAAAEO}{\bkmkend AAAAAAAAEO}
00015 {\cf20 /*}\par
{\bkmkstart AAAAAAAAEP}{\bkmkend AAAAAAAAEP}
00016 {\cf20 // action.h}\par
{\bkmkstart AAAAAAAAEQ}{\bkmkend AAAAAAAAEQ}
00017 {\cf20 */}\par
{\bkmkstart AAAAAAAAER}{\bkmkend AAAAAAAAER}
00018 \par
{\bkmkstart AAAAAAAAES}{\bkmkend AAAAAAAAES}
00019 \par
{\bkmkstart AAAAAAAAET}{\bkmkend AAAAAAAAET}
00020 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAAEU}{\bkmkend AAAAAAAAEU}
00021 {\cf17 extern} {\cf22 "C"}\par
{\bkmkstart AAAAAAAAEV}{\bkmkend AAAAAAAAEV}
00022 \{\par
{\bkmkstart AAAAAAAAEW}{\bkmkend AAAAAAAAEW}
00023 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAEX}{\bkmkend AAAAAAAAEX}
00024 \par
{\bkmkstart AAAAAAAAEY}{\bkmkend AAAAAAAAEY}
00025 {\cf18 void} action_main();\par
{\bkmkstart AAAAAAAAEZ}{\bkmkend AAAAAAAAEZ}
00026 \par
{\bkmkstart AAAAAAAAFA}{\bkmkend AAAAAAAAFA}
00027 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAAFB}{\bkmkend AAAAAAAAFB}
00028 \}\par
{\bkmkstart AAAAAAAAFC}{\bkmkend AAAAAAAAFC}
00029 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAFD}{\bkmkend AAAAAAAAFD}
00030 \par
{\bkmkstart AAAAAAAAFE}{\bkmkend AAAAAAAAFE}
00031 \par
{\bkmkstart AAAAAAAAFF}{\bkmkend AAAAAAAAFF}
00032 {\cf21 #endif  }{\cf20 /*__ACTION__*/}{\cf21 }\par
{\bkmkstart AAAAAAAAFG}{\bkmkend AAAAAAAAFG}
00033 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
buffer.c\par \pard\plain 
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAFI}{\bkmkend AAAAAAAAFI}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAAFJ}{\bkmkend AAAAAAAAFJ}
00002 {\cf20 }\par
{\bkmkstart AAAAAAAAFK}{\bkmkend AAAAAAAAFK}
00003 {\cf20 ===== buffer.c ========================================================}\par
{\bkmkstart AAAAAAAAFL}{\bkmkend AAAAAAAAFL}
00004 {\cf20 }\par
{\bkmkstart AAAAAAAAFM}{\bkmkend AAAAAAAAFM}
00005 {\cf20 */}\par
{\bkmkstart AAAAAAAAFN}{\bkmkend AAAAAAAAFN}
00006 \par
{\bkmkstart AAAAAAAAFO}{\bkmkend AAAAAAAAFO}
00007 {\cf20 /* ring buffer */}\par
{\bkmkstart AAAAAAAAFP}{\bkmkend AAAAAAAAFP}
00008 \par
{\bkmkstart AAAAAAAAFQ}{\bkmkend AAAAAAAAFQ}
00009 {\cf21 #include <stdio.h>}\par
{\bkmkstart AAAAAAAAFR}{\bkmkend AAAAAAAAFR}
00010 {\cf21 #include <stdlib.h>}\par
{\bkmkstart AAAAAAAAFS}{\bkmkend AAAAAAAAFS}
00011 \par
{\bkmkstart AAAAAAAAFT}{\bkmkend AAAAAAAAFT}
00012 {\cf21 #include "buffer.h"}\par
{\bkmkstart AAAAAAAAFU}{\bkmkend AAAAAAAAFU}
00013 \par
{\bkmkstart AAAAAAAAFV}{\bkmkend AAAAAAAAFV}
00014 \par
{\bkmkstart AAAAAAAAFW}{\bkmkend AAAAAAAAFW}
00015 \par
{\bkmkstart AAAAAAAAFX}{\bkmkend AAAAAAAAFX}
00016 {\cf18 void} buffer_init({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr, {\cf18 int} size)\par
{\bkmkstart AAAAAAAAFZ}{\bkmkend AAAAAAAAFZ}
00017 \{\par
{\bkmkstart AAAAAAAAGA}{\bkmkend AAAAAAAAGA}
00018     buffer_ptr->size = size;\par
{\bkmkstart AAAAAAAAGB}{\bkmkend AAAAAAAAGB}
00019     buffer_ptr->get_index = 0;\par
{\bkmkstart AAAAAAAAGC}{\bkmkend AAAAAAAAGC}
00020     buffer_ptr->put_index = 0;\par
{\bkmkstart AAAAAAAAGD}{\bkmkend AAAAAAAAGD}
00021     buffer_ptr->address = (ElemType *)calloc(buffer_ptr->size, {\cf17 sizeof}(ElemType));\par
{\bkmkstart AAAAAAAAGE}{\bkmkend AAAAAAAAGE}
00022 \}\par
{\bkmkstart AAAAAAAAGF}{\bkmkend AAAAAAAAGF}
00023 \par
{\bkmkstart AAAAAAAAGG}{\bkmkend AAAAAAAAGG}
00024 {\cf18 void} buffer_print({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr)\par
{\bkmkstart AAAAAAAAGH}{\bkmkend AAAAAAAAGH}
00025 \{\par
{\bkmkstart AAAAAAAAGI}{\bkmkend AAAAAAAAGI}
00026     printf({\cf22 "size = 0x%x, get_index = %d, put_index = %d\\n"}, buffer_ptr->size, buffer_ptr->get_index, buffer_ptr->put_index);\par
{\bkmkstart AAAAAAAAGJ}{\bkmkend AAAAAAAAGJ}
00027 \}\par
{\bkmkstart AAAAAAAAGK}{\bkmkend AAAAAAAAGK}
00028 \par
{\bkmkstart AAAAAAAAGL}{\bkmkend AAAAAAAAGL}
00029 {\cf18 int} buffer_full({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr)\par
{\bkmkstart AAAAAAAAGM}{\bkmkend AAAAAAAAGM}
00030 \{\par
{\bkmkstart AAAAAAAAGN}{\bkmkend AAAAAAAAGN}
00031     {\cf19 return} buffer_ptr->put_index == (buffer_ptr->get_index ^ buffer_ptr->size);\par
{\bkmkstart AAAAAAAAGO}{\bkmkend AAAAAAAAGO}
00032 \}\par
{\bkmkstart AAAAAAAAGP}{\bkmkend AAAAAAAAGP}
00033 \par
{\bkmkstart AAAAAAAAGQ}{\bkmkend AAAAAAAAGQ}
00034 {\cf18 int} buffer_empty({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr)\par
{\bkmkstart AAAAAAAAGR}{\bkmkend AAAAAAAAGR}
00035 \{\par
{\bkmkstart AAAAAAAAGS}{\bkmkend AAAAAAAAGS}
00036     {\cf19 return} buffer_ptr->put_index == buffer_ptr->get_index;\par
{\bkmkstart AAAAAAAAGT}{\bkmkend AAAAAAAAGT}
00037 \}\par
{\bkmkstart AAAAAAAAGU}{\bkmkend AAAAAAAAGU}
00038 \par
{\bkmkstart AAAAAAAAGV}{\bkmkend AAAAAAAAGV}
00039 {\cf18 int} _buffer_incr({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr, {\cf18 int} pos)\par
{\bkmkstart AAAAAAAAGW}{\bkmkend AAAAAAAAGW}
00040 \{\par
{\bkmkstart AAAAAAAAGX}{\bkmkend AAAAAAAAGX}
00041     {\cf19 return} (pos + 1) & (2 * buffer_ptr->size - 1);\par
{\bkmkstart AAAAAAAAGY}{\bkmkend AAAAAAAAGY}
00042 \}\par
{\bkmkstart AAAAAAAAGZ}{\bkmkend AAAAAAAAGZ}
00043 \par
{\bkmkstart AAAAAAAAHA}{\bkmkend AAAAAAAAHA}
00044 {\cf18 void} buffer_put({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr, ElemType *elem)\par
{\bkmkstart AAAAAAAAHB}{\bkmkend AAAAAAAAHB}
00045 \{\par
{\bkmkstart AAAAAAAAHC}{\bkmkend AAAAAAAAHC}
00046     buffer_ptr->address[buffer_ptr->put_index & (buffer_ptr->size - 1)] = *elem;\par
{\bkmkstart AAAAAAAAHD}{\bkmkend AAAAAAAAHD}
00047     {\cf19 if} (buffer_full(buffer_ptr))\par
{\bkmkstart AAAAAAAAHE}{\bkmkend AAAAAAAAHE}
00048         buffer_ptr->get_index = _buffer_incr(buffer_ptr, buffer_ptr->get_index);\par
{\bkmkstart AAAAAAAAHF}{\bkmkend AAAAAAAAHF}
00049     buffer_ptr->put_index = _buffer_incr(buffer_ptr, buffer_ptr->put_index);\par
{\bkmkstart AAAAAAAAHG}{\bkmkend AAAAAAAAHG}
00050 \}\par
{\bkmkstart AAAAAAAAHH}{\bkmkend AAAAAAAAHH}
00051 \par
{\bkmkstart AAAAAAAAHI}{\bkmkend AAAAAAAAHI}
00052 {\cf18 void} buffer_get({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr, ElemType *elem)\par
{\bkmkstart AAAAAAAAHJ}{\bkmkend AAAAAAAAHJ}
00053 \{\par
{\bkmkstart AAAAAAAAHK}{\bkmkend AAAAAAAAHK}
00054     *elem = buffer_ptr->address[buffer_ptr->get_index & (buffer_ptr->size - 1)];\par
{\bkmkstart AAAAAAAAHL}{\bkmkend AAAAAAAAHL}
00055     buffer_ptr->get_index = _buffer_incr(buffer_ptr, buffer_ptr->get_index);\par
{\bkmkstart AAAAAAAAHM}{\bkmkend AAAAAAAAHM}
00056 \}\par
{\bkmkstart AAAAAAAAHN}{\bkmkend AAAAAAAAHN}
00057 \par
{\bkmkstart AAAAAAAAHO}{\bkmkend AAAAAAAAHO}
00058 {\cf18 void} buffer_flush({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr)\par
{\bkmkstart AAAAAAAAHP}{\bkmkend AAAAAAAAHP}
00059 \{\par
{\bkmkstart AAAAAAAAHQ}{\bkmkend AAAAAAAAHQ}
00060     {\cf18 int} i=0;\par
{\bkmkstart AAAAAAAAHR}{\bkmkend AAAAAAAAHR}
00061     buffer_ptr->get_index = 0;\par
{\bkmkstart AAAAAAAAHS}{\bkmkend AAAAAAAAHS}
00062     buffer_ptr->put_index = 0;\par
{\bkmkstart AAAAAAAAHT}{\bkmkend AAAAAAAAHT}
00063     {\cf19 for}(i=0; i<buffer_ptr->size; i++)\par
{\bkmkstart AAAAAAAAHU}{\bkmkend AAAAAAAAHU}
00064         buffer_ptr->address[i] = 0;\par
{\bkmkstart AAAAAAAAHV}{\bkmkend AAAAAAAAHV}
00065 \}\par
{\bkmkstart AAAAAAAAHW}{\bkmkend AAAAAAAAHW}
00066 \par
{\bkmkstart AAAAAAAAHX}{\bkmkend AAAAAAAAHX}
00067 {\cf18 void} buffer_display({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr)\par
{\bkmkstart AAAAAAAAHY}{\bkmkend AAAAAAAAHY}
00068 \{\par
{\bkmkstart AAAAAAAAHZ}{\bkmkend AAAAAAAAHZ}
00069     {\cf18 int} i=0;\par
{\bkmkstart AAAAAAAAIA}{\bkmkend AAAAAAAAIA}
00070     printf({\cf22 "\\n"});\par
{\bkmkstart AAAAAAAAIB}{\bkmkend AAAAAAAAIB}
00071     {\cf19 for}(i=0; i<buffer_ptr->size; i++)\par
{\bkmkstart AAAAAAAAIC}{\bkmkend AAAAAAAAIC}
00072         printf({\cf22 "%d "},buffer_ptr->address[i]);\par
{\bkmkstart AAAAAAAAID}{\bkmkend AAAAAAAAID}
00073     printf({\cf22 "\\n"});\par
{\bkmkstart AAAAAAAAIE}{\bkmkend AAAAAAAAIE}
00074 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
buffer.h\par \pard\plain 
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAIG}{\bkmkend AAAAAAAAIG}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAAIH}{\bkmkend AAAAAAAAIH}
00002 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAAAII}{\bkmkend AAAAAAAAII}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAAAIJ}{\bkmkend AAAAAAAAIJ}
00004 {\cf20 // Purpose:}\par
{\bkmkstart AAAAAAAAIK}{\bkmkend AAAAAAAAIK}
00005 {\cf20 //}\par
{\bkmkstart AAAAAAAAIL}{\bkmkend AAAAAAAAIL}
00006 {\cf20 // $NoKeywords: $}\par
{\bkmkstart AAAAAAAAIM}{\bkmkend AAAAAAAAIM}
00007 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAAAIN}{\bkmkend AAAAAAAAIN}
00008 {\cf20 */}\par
{\bkmkstart AAAAAAAAIO}{\bkmkend AAAAAAAAIO}
00009 \par
{\bkmkstart AAAAAAAAIP}{\bkmkend AAAAAAAAIP}
00010 \par
{\bkmkstart AAAAAAAAIQ}{\bkmkend AAAAAAAAIQ}
00011 {\cf21 #ifndef __BUFFER__}\par
{\bkmkstart AAAAAAAAIR}{\bkmkend AAAAAAAAIR}
00012 {\cf21 #define __BUFFER__}\par
{\bkmkstart AAAAAAAAIS}{\bkmkend AAAAAAAAIS}
00013 \par
{\bkmkstart AAAAAAAAIT}{\bkmkend AAAAAAAAIT}
00014 \par
{\bkmkstart AAAAAAAAIU}{\bkmkend AAAAAAAAIU}
00015 {\cf20 /*}\par
{\bkmkstart AAAAAAAAIV}{\bkmkend AAAAAAAAIV}
00016 {\cf20 // buffer.h}\par
{\bkmkstart AAAAAAAAIW}{\bkmkend AAAAAAAAIW}
00017 {\cf20 */}\par
{\bkmkstart AAAAAAAAIX}{\bkmkend AAAAAAAAIX}
00018 \par
{\bkmkstart AAAAAAAAIY}{\bkmkend AAAAAAAAIY}
00019 \par
{\bkmkstart AAAAAAAAIZ}{\bkmkend AAAAAAAAIZ}
00020 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAAJA}{\bkmkend AAAAAAAAJA}
00021 {\cf17 extern} {\cf22 "C"}\par
{\bkmkstart AAAAAAAAJB}{\bkmkend AAAAAAAAJB}
00022 \{\par
{\bkmkstart AAAAAAAAJC}{\bkmkend AAAAAAAAJC}
00023 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAJD}{\bkmkend AAAAAAAAJD}
00024 \par
{\bkmkstart AAAAAAAAJE}{\bkmkend AAAAAAAAJE}
00025 \par
{\bkmkstart AAAAAAAAJF}{\bkmkend AAAAAAAAJF}
00026 {\cf17 typedef} {\cf18 unsigned} {\cf18 char} ElemType;\par
{\bkmkstart AAAAAAAAJG}{\bkmkend AAAAAAAAJG}
00027 \par
{\bkmkstart AAAAAAAAJH}{\bkmkend AAAAAAAAJH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 00028}}}
 {\cf17 typedef} {\cf17 struct}\par
{\bkmkstart AAAAAAAAJI}{\bkmkend AAAAAAAAJI}
00029 \{\par
{\bkmkstart AAAAAAAAJJ}{\bkmkend AAAAAAAAJJ}
00030     {\cf18 int} size;\par
{\bkmkstart AAAAAAAAJK}{\bkmkend AAAAAAAAJK}
00031     {\cf18 int} get_index;\par
{\bkmkstart AAAAAAAAJL}{\bkmkend AAAAAAAAJL}
00032     {\cf18 int} put_index;\par
{\bkmkstart AAAAAAAAJM}{\bkmkend AAAAAAAAJM}
00033     ElemType *address;\par
{\bkmkstart AAAAAAAAJN}{\bkmkend AAAAAAAAJN}
00034 \} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
;\par
{\bkmkstart AAAAAAAAJO}{\bkmkend AAAAAAAAJO}
00035 \par
{\bkmkstart AAAAAAAAJP}{\bkmkend AAAAAAAAJP}
00036 \par
{\bkmkstart AAAAAAAAJQ}{\bkmkend AAAAAAAAJQ}
00037 {\cf18 void} buffer_init({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr, {\cf18 int} size);\par
{\bkmkstart AAAAAAAAJR}{\bkmkend AAAAAAAAJR}
00038 \par
{\bkmkstart AAAAAAAAJS}{\bkmkend AAAAAAAAJS}
00039 {\cf18 void} buffer_print({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr);\par
{\bkmkstart AAAAAAAAJT}{\bkmkend AAAAAAAAJT}
00040 {\cf18 int} buffer_full({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr);\par
{\bkmkstart AAAAAAAAJU}{\bkmkend AAAAAAAAJU}
00041 {\cf18 int} buffer_empty({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr);\par
{\bkmkstart AAAAAAAAJV}{\bkmkend AAAAAAAAJV}
00042 \par
{\bkmkstart AAAAAAAAJW}{\bkmkend AAAAAAAAJW}
00043 {\cf18 void} buffer_put({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr, ElemType *elem);\par
{\bkmkstart AAAAAAAAJX}{\bkmkend AAAAAAAAJX}
00044 {\cf18 void} buffer_get({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr, ElemType *elem);\par
{\bkmkstart AAAAAAAAJY}{\bkmkend AAAAAAAAJY}
00045 \par
{\bkmkstart AAAAAAAAJZ}{\bkmkend AAAAAAAAJZ}
00046 {\cf18 void} buffer_flush({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr);\par
{\bkmkstart AAAAAAAAKA}{\bkmkend AAAAAAAAKA}
00047 {\cf18 void} buffer_display({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 *buffer_ptr);\par
{\bkmkstart AAAAAAAAKB}{\bkmkend AAAAAAAAKB}
00048 \par
{\bkmkstart AAAAAAAAKC}{\bkmkend AAAAAAAAKC}
00049 \par
{\bkmkstart AAAAAAAAKD}{\bkmkend AAAAAAAAKD}
00050 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAAKE}{\bkmkend AAAAAAAAKE}
00051 \}\par
{\bkmkstart AAAAAAAAKF}{\bkmkend AAAAAAAAKF}
00052 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAKG}{\bkmkend AAAAAAAAKG}
00053 \par
{\bkmkstart AAAAAAAAKH}{\bkmkend AAAAAAAAKH}
00054 \par
{\bkmkstart AAAAAAAAKI}{\bkmkend AAAAAAAAKI}
00055 {\cf21 #endif  }{\cf20 /*__BUFFER__*/}{\cf21 }\par
{\bkmkstart AAAAAAAAKJ}{\bkmkend AAAAAAAAKJ}
00056 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
client.c\par \pard\plain 
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAKL}{\bkmkend AAAAAAAAKL}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAAKM}{\bkmkend AAAAAAAAKM}
00002 {\cf20 }\par
{\bkmkstart AAAAAAAAKN}{\bkmkend AAAAAAAAKN}
00003 {\cf20 ===== client.c ========================================================}\par
{\bkmkstart AAAAAAAAKO}{\bkmkend AAAAAAAAKO}
00004 {\cf20 }\par
{\bkmkstart AAAAAAAAKP}{\bkmkend AAAAAAAAKP}
00005 {\cf20 */}\par
{\bkmkstart AAAAAAAAKQ}{\bkmkend AAAAAAAAKQ}
00006 \par
{\bkmkstart AAAAAAAAKR}{\bkmkend AAAAAAAAKR}
00007 \par
{\bkmkstart AAAAAAAAKS}{\bkmkend AAAAAAAAKS}
00008 {\cf21 #include <stdio.h>}\par
{\bkmkstart AAAAAAAAKT}{\bkmkend AAAAAAAAKT}
00009 {\cf21 #include <stdlib.h>}\par
{\bkmkstart AAAAAAAAKU}{\bkmkend AAAAAAAAKU}
00010 {\cf21 #include <string.h>}\par
{\bkmkstart AAAAAAAAKV}{\bkmkend AAAAAAAAKV}
00011 \par
{\bkmkstart AAAAAAAAKW}{\bkmkend AAAAAAAAKW}
00012 {\cf21 #ifdef _SOFTGPIO}\par
{\bkmkstart AAAAAAAAKX}{\bkmkend AAAAAAAAKX}
00013 {\cf21 #include "softgpio.h"}\par
{\bkmkstart AAAAAAAAKY}{\bkmkend AAAAAAAAKY}
00014 {\cf21 #else}\par
{\bkmkstart AAAAAAAAKZ}{\bkmkend AAAAAAAAKZ}
00015 {\cf21 #include <wiringPi.h>}\par
{\bkmkstart AAAAAAAALA}{\bkmkend AAAAAAAALA}
00016 {\cf21 #endif}\par
{\bkmkstart AAAAAAAALB}{\bkmkend AAAAAAAALB}
00017 \par
{\bkmkstart AAAAAAAALC}{\bkmkend AAAAAAAALC}
00018 {\cf21 #include "shared.h"}\par
{\bkmkstart AAAAAAAALD}{\bkmkend AAAAAAAALD}
00019 {\cf21 #include "server.h"}\par
{\bkmkstart AAAAAAAALE}{\bkmkend AAAAAAAALE}
00020 \par
{\bkmkstart AAAAAAAALF}{\bkmkend AAAAAAAALF}
00021 {\cf21 #include "client.h"}\par
{\bkmkstart AAAAAAAALG}{\bkmkend AAAAAAAALG}
00022 \par
{\bkmkstart AAAAAAAALH}{\bkmkend AAAAAAAALH}
00023 \par
{\bkmkstart AAAAAAAALI}{\bkmkend AAAAAAAALI}
00024 {\cf18 int} flag_client_ready;\par
{\bkmkstart AAAAAAAALJ}{\bkmkend AAAAAAAALJ}
00025 {\cf18 int} flag_client_isdumping;\par
{\bkmkstart AAAAAAAALK}{\bkmkend AAAAAAAALK}
00026 {\cf18 int} flag_client_get_ack;\par
{\bkmkstart AAAAAAAALL}{\bkmkend AAAAAAAALL}
00027 {\cf18 byte} client_crc16[3];\par
{\bkmkstart AAAAAAAALM}{\bkmkend AAAAAAAALM}
00028 \par
{\bkmkstart AAAAAAAALN}{\bkmkend AAAAAAAALN}
00029 {\cf17 static} {\cf18 char} client_msg_buffer[MAX_MSG_LENGTH + 1];\par
{\bkmkstart AAAAAAAALO}{\bkmkend AAAAAAAALO}
00030 \par
{\bkmkstart AAAAAAAALP}{\bkmkend AAAAAAAALP}
00031 \par
{\bkmkstart AAAAAAAALQ}{\bkmkend AAAAAAAALQ}
00032 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAALR}{\bkmkend AAAAAAAALR}
00033 {\cf18 int} CL_get_msg ( {\cf18 char} *msg )\par
{\bkmkstart AAAAAAAALS}{\bkmkend AAAAAAAALS}
00034 \{\par
{\bkmkstart AAAAAAAALT}{\bkmkend AAAAAAAALT}
00035     {\cf20 /*}\par
{\bkmkstart AAAAAAAALU}{\bkmkend AAAAAAAALU}
00036 {\cf20     if(strlen(msg) < MAX_MSG_LENGTH)}\par
{\bkmkstart AAAAAAAALV}{\bkmkend AAAAAAAALV}
00037 {\cf20     \{}\par
{\bkmkstart AAAAAAAALW}{\bkmkend AAAAAAAALW}
00038 {\cf20         printf("Client::not enough space, aborted!\\n");}\par
{\bkmkstart AAAAAAAALX}{\bkmkend AAAAAAAALX}
00039 {\cf20         return -2;}\par
{\bkmkstart AAAAAAAALY}{\bkmkend AAAAAAAALY}
00040 {\cf20     \}}\par
{\bkmkstart AAAAAAAALZ}{\bkmkend AAAAAAAALZ}
00041 {\cf20     */}\par
{\bkmkstart AAAAAAAAMA}{\bkmkend AAAAAAAAMA}
00042     {\cf19 if}(flag_client_ready)\par
{\bkmkstart AAAAAAAAMB}{\bkmkend AAAAAAAAMB}
00043     \{\par
{\bkmkstart AAAAAAAAMC}{\bkmkend AAAAAAAAMC}
00044         strcpy(msg, client_msg_buffer);\par
{\bkmkstart AAAAAAAAMD}{\bkmkend AAAAAAAAMD}
00045         client_msg_buffer[0] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAAME}{\bkmkend AAAAAAAAME}
00046         {\cf19 return} 0;\par
{\bkmkstart AAAAAAAAMF}{\bkmkend AAAAAAAAMF}
00047     \}\par
{\bkmkstart AAAAAAAAMG}{\bkmkend AAAAAAAAMG}
00048     {\cf19 else}\par
{\bkmkstart AAAAAAAAMH}{\bkmkend AAAAAAAAMH}
00049         {\cf19 return} -1;\par
{\bkmkstart AAAAAAAAMI}{\bkmkend AAAAAAAAMI}
00050 \}\par
{\bkmkstart AAAAAAAAMJ}{\bkmkend AAAAAAAAMJ}
00051 {\cf21 #else}\par
{\bkmkstart AAAAAAAAMK}{\bkmkend AAAAAAAAMK}
00052 {\cf18 int} CL_get_msg ( {\cf18 char} *msg )\par
{\bkmkstart AAAAAAAAML}{\bkmkend AAAAAAAAML}
00053 \{\par
{\bkmkstart AAAAAAAAMM}{\bkmkend AAAAAAAAMM}
00054     {\cf19 if}(flag_client_ready)\par
{\bkmkstart AAAAAAAAMN}{\bkmkend AAAAAAAAMN}
00055     \{\par
{\bkmkstart AAAAAAAAMO}{\bkmkend AAAAAAAAMO}
00056         strcpy(msg, client_msg_buffer);\par
{\bkmkstart AAAAAAAAMP}{\bkmkend AAAAAAAAMP}
00057         client_msg_buffer[0] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAAMQ}{\bkmkend AAAAAAAAMQ}
00058         {\cf19 return} 0;\par
{\bkmkstart AAAAAAAAMR}{\bkmkend AAAAAAAAMR}
00059     \}\par
{\bkmkstart AAAAAAAAMS}{\bkmkend AAAAAAAAMS}
00060     {\cf19 else}\par
{\bkmkstart AAAAAAAAMT}{\bkmkend AAAAAAAAMT}
00061         {\cf19 return} -1;\par
{\bkmkstart AAAAAAAAMU}{\bkmkend AAAAAAAAMU}
00062 \}\par
{\bkmkstart AAAAAAAAMV}{\bkmkend AAAAAAAAMV}
00063 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAAMW}{\bkmkend AAAAAAAAMW}
00064 \par
{\bkmkstart AAAAAAAAMX}{\bkmkend AAAAAAAAMX}
00065 {\cf18 void} client_main()\par
{\bkmkstart AAAAAAAAMY}{\bkmkend AAAAAAAAMY}
00066 \{\par
{\bkmkstart AAAAAAAAMZ}{\bkmkend AAAAAAAAMZ}
00067 \par
{\bkmkstart AAAAAAAANA}{\bkmkend AAAAAAAANA}
00068     {\cf18 byte} client_pak[BUFFER_SIZE + 1];\par
{\bkmkstart AAAAAAAANB}{\bkmkend AAAAAAAANB}
00069 \par
{\bkmkstart AAAAAAAANC}{\bkmkend AAAAAAAANC}
00070     {\cf18 byte} *pak_data_length = &client_pak[1];\par
{\bkmkstart AAAAAAAAND}{\bkmkend AAAAAAAAND}
00071     {\cf18 byte} *pak_data = &client_pak[2];\par
{\bkmkstart AAAAAAAANE}{\bkmkend AAAAAAAANE}
00072     {\cf18 byte} *pak_crc;\par
{\bkmkstart AAAAAAAANF}{\bkmkend AAAAAAAANF}
00073     {\cf18 byte} *pak_crc_byte;\par
{\bkmkstart AAAAAAAANG}{\bkmkend AAAAAAAANG}
00074     {\cf18 byte} *pak_end;\par
{\bkmkstart AAAAAAAANH}{\bkmkend AAAAAAAANH}
00075 \par
{\bkmkstart AAAAAAAANI}{\bkmkend AAAAAAAANI}
00076     {\cf18 int} i;\par
{\bkmkstart AAAAAAAANJ}{\bkmkend AAAAAAAANJ}
00077     {\cf18 unsigned} {\cf18 short} crcvalue;\par
{\bkmkstart AAAAAAAANK}{\bkmkend AAAAAAAANK}
00078 \par
{\bkmkstart AAAAAAAANL}{\bkmkend AAAAAAAANL}
00079     {\cf19 for}(; !flag_sender_ready || !flag_receiver_ready;)\par
{\bkmkstart AAAAAAAANM}{\bkmkend AAAAAAAANM}
00080         delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAANN}{\bkmkend AAAAAAAANN}
00081     RC_flush_buffer();\par
{\bkmkstart AAAAAAAANO}{\bkmkend AAAAAAAANO}
00082     flag_client_ready = 1;\par
{\bkmkstart AAAAAAAANP}{\bkmkend AAAAAAAANP}
00083 \par
{\bkmkstart AAAAAAAANQ}{\bkmkend AAAAAAAANQ}
00084 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAANR}{\bkmkend AAAAAAAANR}
00085             printf({\cf22 "Client::client is ready\\n"});\par
{\bkmkstart AAAAAAAANS}{\bkmkend AAAAAAAANS}
00086 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAANT}{\bkmkend AAAAAAAANT}
00087 \par
{\bkmkstart AAAAAAAANU}{\bkmkend AAAAAAAANU}
00088     {\cf19 for}(;;)\par
{\bkmkstart AAAAAAAANV}{\bkmkend AAAAAAAANV}
00089     \{\par
{\bkmkstart AAAAAAAANW}{\bkmkend AAAAAAAANW}
00090         client_pak[0] = RC_buffer_get();\par
{\bkmkstart AAAAAAAANX}{\bkmkend AAAAAAAANX}
00091 \par
{\bkmkstart AAAAAAAANY}{\bkmkend AAAAAAAANY}
00092         {\cf19 if}(client_pak[0] == 0)    {\cf20 /* data packet */}\par
{\bkmkstart AAAAAAAANZ}{\bkmkend AAAAAAAANZ}
00093         \{\par
{\bkmkstart AAAAAAAAOA}{\bkmkend AAAAAAAAOA}
00094             flag_client_ready = 0;\par
{\bkmkstart AAAAAAAAOB}{\bkmkend AAAAAAAAOB}
00095 \par
{\bkmkstart AAAAAAAAOC}{\bkmkend AAAAAAAAOC}
00096 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAAOD}{\bkmkend AAAAAAAAOD}
00097             printf({\cf22 "Client::receiving packet...\\n"});\par
{\bkmkstart AAAAAAAAOE}{\bkmkend AAAAAAAAOE}
00098 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAAOF}{\bkmkend AAAAAAAAOF}
00099 \par
{\bkmkstart AAAAAAAAOG}{\bkmkend AAAAAAAAOG}
00100             *pak_data_length = RC_buffer_get();\par
{\bkmkstart AAAAAAAAOH}{\bkmkend AAAAAAAAOH}
00101             {\cf19 if}(*pak_data_length>MAX_MSG_LENGTH)\par
{\bkmkstart AAAAAAAAOI}{\bkmkend AAAAAAAAOI}
00102                 printf({\cf22 "Client::invalid packet length, aborted!\\n"});\par
{\bkmkstart AAAAAAAAOJ}{\bkmkend AAAAAAAAOJ}
00103 \par
{\bkmkstart AAAAAAAAOK}{\bkmkend AAAAAAAAOK}
00104             {\cf19 for}(i=0; i<*pak_data_length; i++)\par
{\bkmkstart AAAAAAAAOL}{\bkmkend AAAAAAAAOL}
00105                 pak_data[i] = RC_buffer_get();\par
{\bkmkstart AAAAAAAAOM}{\bkmkend AAAAAAAAOM}
00106 \par
{\bkmkstart AAAAAAAAON}{\bkmkend AAAAAAAAON}
00107             pak_crc_byte = &pak_data[i];\par
{\bkmkstart AAAAAAAAOO}{\bkmkend AAAAAAAAOO}
00108             pak_crc_byte[0] = RC_buffer_get();\par
{\bkmkstart AAAAAAAAOP}{\bkmkend AAAAAAAAOP}
00109             pak_crc_byte[1] = RC_buffer_get();\par
{\bkmkstart AAAAAAAAOQ}{\bkmkend AAAAAAAAOQ}
00110             pak_end = &pak_data[i+2];\par
{\bkmkstart AAAAAAAAOR}{\bkmkend AAAAAAAAOR}
00111             pak_end[0] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAAOS}{\bkmkend AAAAAAAAOS}
00112 \par
{\bkmkstart AAAAAAAAOT}{\bkmkend AAAAAAAAOT}
00113             CRC_Init(&crcvalue);\par
{\bkmkstart AAAAAAAAOU}{\bkmkend AAAAAAAAOU}
00114             {\cf19 for}(i=0; i<*pak_data_length; i++) {\cf20 /* crc16 CCITT_FALSE */}\par
{\bkmkstart AAAAAAAAOV}{\bkmkend AAAAAAAAOV}
00115                 CRC_ProcessByte(&crcvalue, pak_data[i]);\par
{\bkmkstart AAAAAAAAOW}{\bkmkend AAAAAAAAOW}
00116             crcvalue = CRC_Value(crcvalue);\par
{\bkmkstart AAAAAAAAOX}{\bkmkend AAAAAAAAOX}
00117             pak_crc = ({\cf18 byte} *) &crcvalue;\par
{\bkmkstart AAAAAAAAOY}{\bkmkend AAAAAAAAOY}
00118 \par
{\bkmkstart AAAAAAAAOZ}{\bkmkend AAAAAAAAOZ}
00119             {\cf19 if}((pak_crc[0] == pak_crc_byte[0] && pak_crc[1] == pak_crc_byte[1]) || (pak_crc[0] == pak_crc_byte[1] && pak_crc[1] == pak_crc_byte[0]))\par
{\bkmkstart AAAAAAAAPA}{\bkmkend AAAAAAAAPA}
00120             \{\par
{\bkmkstart AAAAAAAAPB}{\bkmkend AAAAAAAAPB}
00121 \par
{\bkmkstart AAAAAAAAPC}{\bkmkend AAAAAAAAPC}
00122 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAAPD}{\bkmkend AAAAAAAAPD}
00123                 printf({\cf22 "Client::packet received\\n"});\par
{\bkmkstart AAAAAAAAPE}{\bkmkend AAAAAAAAPE}
00124                 {\cf19 for}(i=0; i<*pak_data_length + 4; i++)\par
{\bkmkstart AAAAAAAAPF}{\bkmkend AAAAAAAAPF}
00125                 \{\par
{\bkmkstart AAAAAAAAPG}{\bkmkend AAAAAAAAPG}
00126                     printf({\cf22 "%d "}, client_pak[i]);\par
{\bkmkstart AAAAAAAAPH}{\bkmkend AAAAAAAAPH}
00127                 \}\par
{\bkmkstart AAAAAAAAPI}{\bkmkend AAAAAAAAPI}
00128                 printf({\cf22 "\\n"});\par
{\bkmkstart AAAAAAAAPJ}{\bkmkend AAAAAAAAPJ}
00129 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAAPK}{\bkmkend AAAAAAAAPK}
00130 \par
{\bkmkstart AAAAAAAAPL}{\bkmkend AAAAAAAAPL}
00131                 printf({\cf22 "Client::new message received:"});\par
{\bkmkstart AAAAAAAAPM}{\bkmkend AAAAAAAAPM}
00132                 {\cf19 for}(i=0; i<*pak_data_length; i++)\par
{\bkmkstart AAAAAAAAPN}{\bkmkend AAAAAAAAPN}
00133                 \{\par
{\bkmkstart AAAAAAAAPO}{\bkmkend AAAAAAAAPO}
00134                     client_msg_buffer[i] = pak_data[i];\par
{\bkmkstart AAAAAAAAPP}{\bkmkend AAAAAAAAPP}
00135                     {\cf20 /*printf("%c", pak_data[i]);*/}\par
{\bkmkstart AAAAAAAAPQ}{\bkmkend AAAAAAAAPQ}
00136                 \}\par
{\bkmkstart AAAAAAAAPR}{\bkmkend AAAAAAAAPR}
00137                 printf({\cf22 "%s\\n"}, client_msg_buffer);\par
{\bkmkstart AAAAAAAAPS}{\bkmkend AAAAAAAAPS}
00138 \par
{\bkmkstart AAAAAAAAPT}{\bkmkend AAAAAAAAPT}
00139                 {\cf19 for}(; flag_server_isdumping;)\par
{\bkmkstart AAAAAAAAPU}{\bkmkend AAAAAAAAPU}
00140                     delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAAPV}{\bkmkend AAAAAAAAPV}
00141 \par
{\bkmkstart AAAAAAAAPW}{\bkmkend AAAAAAAAPW}
00142                 flag_client_isdumping = 1;\par
{\bkmkstart AAAAAAAAPX}{\bkmkend AAAAAAAAPX}
00143                 SD_buffer_put(6);\par
{\bkmkstart AAAAAAAAPY}{\bkmkend AAAAAAAAPY}
00144                 SD_buffer_put(pak_crc_byte[0]);\par
{\bkmkstart AAAAAAAAPZ}{\bkmkend AAAAAAAAPZ}
00145                 SD_buffer_put(pak_crc_byte[1]);\par
{\bkmkstart AAAAAAAAQA}{\bkmkend AAAAAAAAQA}
00146                 flag_client_isdumping = 0;\par
{\bkmkstart AAAAAAAAQB}{\bkmkend AAAAAAAAQB}
00147 \par
{\bkmkstart AAAAAAAAQC}{\bkmkend AAAAAAAAQC}
00148             \}\par
{\bkmkstart AAAAAAAAQD}{\bkmkend AAAAAAAAQD}
00149             {\cf19 else}\par
{\bkmkstart AAAAAAAAQE}{\bkmkend AAAAAAAAQE}
00150                 printf({\cf22 "Client::data packet CRC16 failed, aborted!\\n"});\par
{\bkmkstart AAAAAAAAQF}{\bkmkend AAAAAAAAQF}
00151         \}\par
{\bkmkstart AAAAAAAAQG}{\bkmkend AAAAAAAAQG}
00152         {\cf19 else} {\cf19 if}(client_pak[0] == 6)    {\cf20 /* ACK packet */}\par
{\bkmkstart AAAAAAAAQH}{\bkmkend AAAAAAAAQH}
00153         \{\par
{\bkmkstart AAAAAAAAQI}{\bkmkend AAAAAAAAQI}
00154             client_crc16[0] = RC_buffer_get();\par
{\bkmkstart AAAAAAAAQJ}{\bkmkend AAAAAAAAQJ}
00155             client_crc16[1] = RC_buffer_get();\par
{\bkmkstart AAAAAAAAQK}{\bkmkend AAAAAAAAQK}
00156             flag_client_get_ack = 1;\par
{\bkmkstart AAAAAAAAQL}{\bkmkend AAAAAAAAQL}
00157 \par
{\bkmkstart AAAAAAAAQM}{\bkmkend AAAAAAAAQM}
00158 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAAQN}{\bkmkend AAAAAAAAQN}
00159             printf({\cf22 "Client::ACK to local server...\\n"});\par
{\bkmkstart AAAAAAAAQO}{\bkmkend AAAAAAAAQO}
00160 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAAQP}{\bkmkend AAAAAAAAQP}
00161 \par
{\bkmkstart AAAAAAAAQQ}{\bkmkend AAAAAAAAQQ}
00162         \}\par
{\bkmkstart AAAAAAAAQR}{\bkmkend AAAAAAAAQR}
00163 \par
{\bkmkstart AAAAAAAAQS}{\bkmkend AAAAAAAAQS}
00164         {\cf20 /*RC_flush_buffer();*/}\par
{\bkmkstart AAAAAAAAQT}{\bkmkend AAAAAAAAQT}
00165 \par
{\bkmkstart AAAAAAAAQU}{\bkmkend AAAAAAAAQU}
00166 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAAQV}{\bkmkend AAAAAAAAQV}
00167         printf({\cf22 "Client::client is ready\\n"});\par
{\bkmkstart AAAAAAAAQW}{\bkmkend AAAAAAAAQW}
00168 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAAQX}{\bkmkend AAAAAAAAQX}
00169 \par
{\bkmkstart AAAAAAAAQY}{\bkmkend AAAAAAAAQY}
00170         flag_client_ready = 1;\par
{\bkmkstart AAAAAAAAQZ}{\bkmkend AAAAAAAAQZ}
00171     \}\par
{\bkmkstart AAAAAAAARA}{\bkmkend AAAAAAAARA}
00172 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
client.h\par \pard\plain 
{\bkmkstart AAAAAAAARB}
{\bkmkend AAAAAAAARB}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAARC}{\bkmkend AAAAAAAARC}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAARD}{\bkmkend AAAAAAAARD}
00002 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAAARE}{\bkmkend AAAAAAAARE}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAAARF}{\bkmkend AAAAAAAARF}
00004 {\cf20 // Purpose:}\par
{\bkmkstart AAAAAAAARG}{\bkmkend AAAAAAAARG}
00005 {\cf20 //}\par
{\bkmkstart AAAAAAAARH}{\bkmkend AAAAAAAARH}
00006 {\cf20 // $NoKeywords: $}\par
{\bkmkstart AAAAAAAARI}{\bkmkend AAAAAAAARI}
00007 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAAARJ}{\bkmkend AAAAAAAARJ}
00008 {\cf20 */}\par
{\bkmkstart AAAAAAAARK}{\bkmkend AAAAAAAARK}
00009 \par
{\bkmkstart AAAAAAAARL}{\bkmkend AAAAAAAARL}
00010 {\cf20 /*}\par
{\bkmkstart AAAAAAAARM}{\bkmkend AAAAAAAARM}
00011 {\cf20 }\par
{\bkmkstart AAAAAAAARN}{\bkmkend AAAAAAAARN}
00012 {\cf20 frame structure}\par
{\bkmkstart AAAAAAAARO}{\bkmkend AAAAAAAARO}
00013 {\cf20 |0|D0|D1|D2|D3|D4|D5|D6|D7|1|1|}\par
{\bkmkstart AAAAAAAARP}{\bkmkend AAAAAAAARP}
00014 {\cf20 data packet structure}\par
{\bkmkstart AAAAAAAARQ}{\bkmkend AAAAAAAARQ}
00015 {\cf20 |0|length of data|-data-|-|crc16byte0|crc16byte1|}\par
{\bkmkstart AAAAAAAARR}{\bkmkend AAAAAAAARR}
00016 {\cf20 ACK (acknowledge) packet structure}\par
{\bkmkstart AAAAAAAARS}{\bkmkend AAAAAAAARS}
00017 {\cf20 |6|crc16byte0|crc16byte1|}\par
{\bkmkstart AAAAAAAART}{\bkmkend AAAAAAAART}
00018 {\cf20 }\par
{\bkmkstart AAAAAAAARU}{\bkmkend AAAAAAAARU}
00019 {\cf20 */}\par
{\bkmkstart AAAAAAAARV}{\bkmkend AAAAAAAARV}
00020 \par
{\bkmkstart AAAAAAAARW}{\bkmkend AAAAAAAARW}
00021 \par
{\bkmkstart AAAAAAAARX}{\bkmkend AAAAAAAARX}
00022 {\cf21 #ifndef __CLIENT__}\par
{\bkmkstart AAAAAAAARY}{\bkmkend AAAAAAAARY}
00023 {\cf21 #define __CLIENT__}\par
{\bkmkstart AAAAAAAARZ}{\bkmkend AAAAAAAARZ}
00024 \par
{\bkmkstart AAAAAAAASA}{\bkmkend AAAAAAAASA}
00025 \par
{\bkmkstart AAAAAAAASB}{\bkmkend AAAAAAAASB}
00026 {\cf20 /*}\par
{\bkmkstart AAAAAAAASC}{\bkmkend AAAAAAAASC}
00027 {\cf20 // client.h}\par
{\bkmkstart AAAAAAAASD}{\bkmkend AAAAAAAASD}
00028 {\cf20 */}\par
{\bkmkstart AAAAAAAASE}{\bkmkend AAAAAAAASE}
00029 \par
{\bkmkstart AAAAAAAASF}{\bkmkend AAAAAAAASF}
00030 \par
{\bkmkstart AAAAAAAASG}{\bkmkend AAAAAAAASG}
00031 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAASH}{\bkmkend AAAAAAAASH}
00032 {\cf17 extern} {\cf22 "C"}\par
{\bkmkstart AAAAAAAASI}{\bkmkend AAAAAAAASI}
00033 \{\par
{\bkmkstart AAAAAAAASJ}{\bkmkend AAAAAAAASJ}
00034 {\cf21 #endif}\par
{\bkmkstart AAAAAAAASK}{\bkmkend AAAAAAAASK}
00035 \par
{\bkmkstart AAAAAAAASL}{\bkmkend AAAAAAAASL}
00036 {\cf17 extern} {\cf18 int} flag_client_ready;\par
{\bkmkstart AAAAAAAASM}{\bkmkend AAAAAAAASM}
00037 {\cf17 extern} {\cf18 int} flag_client_isdumping;\par
{\bkmkstart AAAAAAAASN}{\bkmkend AAAAAAAASN}
00038 \par
{\bkmkstart AAAAAAAASO}{\bkmkend AAAAAAAASO}
00039 {\cf17 extern} {\cf18 int} flag_client_get_ack;\par
{\bkmkstart AAAAAAAASP}{\bkmkend AAAAAAAASP}
00040 {\cf17 extern} {\cf18 byte} client_crc16[3];\par
{\bkmkstart AAAAAAAASQ}{\bkmkend AAAAAAAASQ}
00041 \par
{\bkmkstart AAAAAAAASR}{\bkmkend AAAAAAAASR}
00042 {\cf18 int} CL_get_msg ({\cf18 char} *msg);\par
{\bkmkstart AAAAAAAASS}{\bkmkend AAAAAAAASS}
00043 \par
{\bkmkstart AAAAAAAAST}{\bkmkend AAAAAAAAST}
00044 {\cf18 void} client_main();\par
{\bkmkstart AAAAAAAASU}{\bkmkend AAAAAAAASU}
00045 \par
{\bkmkstart AAAAAAAASV}{\bkmkend AAAAAAAASV}
00046 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAASW}{\bkmkend AAAAAAAASW}
00047 \}\par
{\bkmkstart AAAAAAAASX}{\bkmkend AAAAAAAASX}
00048 {\cf21 #endif}\par
{\bkmkstart AAAAAAAASY}{\bkmkend AAAAAAAASY}
00049 \par
{\bkmkstart AAAAAAAASZ}{\bkmkend AAAAAAAASZ}
00050 \par
{\bkmkstart AAAAAAAATA}{\bkmkend AAAAAAAATA}
00051 {\cf21 #endif  }{\cf20 /*__CLIENT__*/}{\cf21 }\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cmdlib.c\par \pard\plain 
{\bkmkstart AAAAAAAATB}
{\bkmkend AAAAAAAATB}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAATC}{\bkmkend AAAAAAAATC}
00001 {\cf20 /***}\par
{\bkmkstart AAAAAAAATD}{\bkmkend AAAAAAAATD}
00002 {\cf20 *}\par
{\bkmkstart AAAAAAAATE}{\bkmkend AAAAAAAATE}
00003 {\cf20 *       Copyright (c) 1996-2002, Valve LLC. All rights reserved.}\par
{\bkmkstart AAAAAAAATF}{\bkmkend AAAAAAAATF}
00004 {\cf20 *}\par
{\bkmkstart AAAAAAAATG}{\bkmkend AAAAAAAATG}
00005 {\cf20 *       This product contains software technology licensed from Id}\par
{\bkmkstart AAAAAAAATH}{\bkmkend AAAAAAAATH}
00006 {\cf20 *       Software, Inc. ("Id Technology").  Id Technology (c) 1996 Id Software, Inc.}\par
{\bkmkstart AAAAAAAATI}{\bkmkend AAAAAAAATI}
00007 {\cf20 *       All Rights Reserved.}\par
{\bkmkstart AAAAAAAATJ}{\bkmkend AAAAAAAATJ}
00008 {\cf20 *}\par
{\bkmkstart AAAAAAAATK}{\bkmkend AAAAAAAATK}
00009 {\cf20 ****/}\par
{\bkmkstart AAAAAAAATL}{\bkmkend AAAAAAAATL}
00010 \par
{\bkmkstart AAAAAAAATM}{\bkmkend AAAAAAAATM}
00011 {\cf20 /* cmdlib.c */}\par
{\bkmkstart AAAAAAAATN}{\bkmkend AAAAAAAATN}
00012 \par
{\bkmkstart AAAAAAAATO}{\bkmkend AAAAAAAATO}
00013 {\cf20 /*}\par
{\bkmkstart AAAAAAAATP}{\bkmkend AAAAAAAATP}
00014 {\cf20 =================}\par
{\bkmkstart AAAAAAAATQ}{\bkmkend AAAAAAAATQ}
00015 {\cf20 last modified:}\par
{\bkmkstart AAAAAAAATR}{\bkmkend AAAAAAAATR}
00016 {\cf20 =================}\par
{\bkmkstart AAAAAAAATS}{\bkmkend AAAAAAAATS}
00017 {\cf20 */}\par
{\bkmkstart AAAAAAAATT}{\bkmkend AAAAAAAATT}
00018 \par
{\bkmkstart AAAAAAAATU}{\bkmkend AAAAAAAATU}
00019 {\cf21 #include <stdio.h>}\par
{\bkmkstart AAAAAAAATV}{\bkmkend AAAAAAAATV}
00020 {\cf21 #include <string.h>}\par
{\bkmkstart AAAAAAAATW}{\bkmkend AAAAAAAATW}
00021 {\cf21 #include <stdlib.h>}\par
{\bkmkstart AAAAAAAATX}{\bkmkend AAAAAAAATX}
00022 {\cf21 #include <errno.h>}\par
{\bkmkstart AAAAAAAATY}{\bkmkend AAAAAAAATY}
00023 {\cf21 #include <ctype.h>}\par
{\bkmkstart AAAAAAAATZ}{\bkmkend AAAAAAAATZ}
00024 {\cf21 #include <time.h>}\par
{\bkmkstart AAAAAAAAUA}{\bkmkend AAAAAAAAUA}
00025 {\cf21 #include <stdarg.h>}\par
{\bkmkstart AAAAAAAAUB}{\bkmkend AAAAAAAAUB}
00026 \par
{\bkmkstart AAAAAAAAUC}{\bkmkend AAAAAAAAUC}
00027 {\cf21 #include "cmdlib.h"}\par
{\bkmkstart AAAAAAAAUD}{\bkmkend AAAAAAAAUD}
00028 {\cf21 #include <sys/types.h>}\par
{\bkmkstart AAAAAAAAUE}{\bkmkend AAAAAAAAUE}
00029 {\cf21 #include <sys/stat.h>}\par
{\bkmkstart AAAAAAAAUF}{\bkmkend AAAAAAAAUF}
00030 \par
{\bkmkstart AAAAAAAAUG}{\bkmkend AAAAAAAAUG}
00031 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAAAUH}{\bkmkend AAAAAAAAUH}
00032 {\cf21 #include <direct.h>}\par
{\bkmkstart AAAAAAAAUI}{\bkmkend AAAAAAAAUI}
00033 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAUJ}{\bkmkend AAAAAAAAUJ}
00034 \par
{\bkmkstart AAAAAAAAUK}{\bkmkend AAAAAAAAUK}
00035 {\cf21 #ifdef NeXT}\par
{\bkmkstart AAAAAAAAUL}{\bkmkend AAAAAAAAUL}
00036 {\cf21 #include <libc.h>}\par
{\bkmkstart AAAAAAAAUM}{\bkmkend AAAAAAAAUM}
00037 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAUN}{\bkmkend AAAAAAAAUN}
00038 \par
{\bkmkstart AAAAAAAAUO}{\bkmkend AAAAAAAAUO}
00039 {\cf21 #ifdef  WIN32}\par
{\bkmkstart AAAAAAAAUP}{\bkmkend AAAAAAAAUP}
00040 {\cf21 #define PATHSEPARATOR(c) ((c) == '\\\\' || (c) == '/')}\par
{\bkmkstart AAAAAAAAUQ}{\bkmkend AAAAAAAAUQ}
00041 {\cf21 #else   }{\cf20 /*WIN32*/}{\cf21 }\par
{\bkmkstart AAAAAAAAUR}{\bkmkend AAAAAAAAUR}
00042 {\cf21 #define PATHSEPARATOR(c) ((c) == '/')}\par
{\bkmkstart AAAAAAAAUS}{\bkmkend AAAAAAAAUS}
00043 {\cf21 #endif  }{\cf20 /*WIN32*/}{\cf21 }\par
{\bkmkstart AAAAAAAAUT}{\bkmkend AAAAAAAAUT}
00044 \par
{\bkmkstart AAAAAAAAUU}{\bkmkend AAAAAAAAUU}
00045 {\cf20 /* set these before calling CheckParm */}\par
{\bkmkstart AAAAAAAAUV}{\bkmkend AAAAAAAAUV}
00046 {\cf18 int} myargc;\par
{\bkmkstart AAAAAAAAUW}{\bkmkend AAAAAAAAUW}
00047 {\cf18 char} **myargv;\par
{\bkmkstart AAAAAAAAUX}{\bkmkend AAAAAAAAUX}
00048 \par
{\bkmkstart AAAAAAAAUY}{\bkmkend AAAAAAAAUY}
00049 {\cf18 char}            com_token[1024];\par
{\bkmkstart AAAAAAAAUZ}{\bkmkend AAAAAAAAUZ}
00050 qboolean        com_eof;\par
{\bkmkstart AAAAAAAAVA}{\bkmkend AAAAAAAAVA}
00051 \par
{\bkmkstart AAAAAAAAVB}{\bkmkend AAAAAAAAVB}
00052 qboolean                archive;\par
{\bkmkstart AAAAAAAAVC}{\bkmkend AAAAAAAAVC}
00053 {\cf18 char}                    archivedir[1024];\par
{\bkmkstart AAAAAAAAVD}{\bkmkend AAAAAAAAVD}
00054 \par
{\bkmkstart AAAAAAAAVE}{\bkmkend AAAAAAAAVE}
00055 \par
{\bkmkstart AAAAAAAAVF}{\bkmkend AAAAAAAAVF}
00056 {\cf18 void} COM_FixSlashes( {\cf18 char} *pname )\par
{\bkmkstart AAAAAAAAVG}{\bkmkend AAAAAAAAVG}
00057 \{\par
{\bkmkstart AAAAAAAAVH}{\bkmkend AAAAAAAAVH}
00058 {\cf21 #if 0}\par
{\bkmkstart AAAAAAAAVI}{\bkmkend AAAAAAAAVI}
00059         {\cf19 while} ( *pname ) \{\par
{\bkmkstart AAAAAAAAVJ}{\bkmkend AAAAAAAAVJ}
00060                 {\cf19 if} ( *pname == {\cf23 '/'} )\par
{\bkmkstart AAAAAAAAVK}{\bkmkend AAAAAAAAVK}
00061                         *pname = {\cf23 '\\\\'};\par
{\bkmkstart AAAAAAAAVL}{\bkmkend AAAAAAAAVL}
00062                 pname++;\par
{\bkmkstart AAAAAAAAVM}{\bkmkend AAAAAAAAVM}
00063         \}\par
{\bkmkstart AAAAAAAAVN}{\bkmkend AAAAAAAAVN}
00064 {\cf21 #else}\par
{\bkmkstart AAAAAAAAVO}{\bkmkend AAAAAAAAVO}
00065         {\cf19 while} ( *pname ) \{\par
{\bkmkstart AAAAAAAAVP}{\bkmkend AAAAAAAAVP}
00066                 {\cf19 if} ( *pname == {\cf23 '\\\\'} )\par
{\bkmkstart AAAAAAAAVQ}{\bkmkend AAAAAAAAVQ}
00067                         *pname = {\cf23 '/'};\par
{\bkmkstart AAAAAAAAVR}{\bkmkend AAAAAAAAVR}
00068                 pname++;\par
{\bkmkstart AAAAAAAAVS}{\bkmkend AAAAAAAAVS}
00069         \}\par
{\bkmkstart AAAAAAAAVT}{\bkmkend AAAAAAAAVT}
00070 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAVU}{\bkmkend AAAAAAAAVU}
00071 \}\par
{\bkmkstart AAAAAAAAVV}{\bkmkend AAAAAAAAVV}
00072 \par
{\bkmkstart AAAAAAAAVW}{\bkmkend AAAAAAAAVW}
00073 \par
{\bkmkstart AAAAAAAAVX}{\bkmkend AAAAAAAAVX}
00074 {\cf20 /*}\par
{\bkmkstart AAAAAAAAVY}{\bkmkend AAAAAAAAVY}
00075 {\cf20 =================}\par
{\bkmkstart AAAAAAAAVZ}{\bkmkend AAAAAAAAVZ}
00076 {\cf20 Error}\par
{\bkmkstart AAAAAAAAWA}{\bkmkend AAAAAAAAWA}
00077 {\cf20 }\par
{\bkmkstart AAAAAAAAWB}{\bkmkend AAAAAAAAWB}
00078 {\cf20 For abnormal program terminations}\par
{\bkmkstart AAAAAAAAWC}{\bkmkend AAAAAAAAWC}
00079 {\cf20 =================}\par
{\bkmkstart AAAAAAAAWD}{\bkmkend AAAAAAAAWD}
00080 {\cf20 */}\par
{\bkmkstart AAAAAAAAWE}{\bkmkend AAAAAAAAWE}
00081 {\cf18 void} Error ({\cf18 char} *error, ...)\par
{\bkmkstart AAAAAAAAWF}{\bkmkend AAAAAAAAWF}
00082 \{\par
{\bkmkstart AAAAAAAAWG}{\bkmkend AAAAAAAAWG}
00083         va_list argptr;\par
{\bkmkstart AAAAAAAAWH}{\bkmkend AAAAAAAAWH}
00084 \par
{\bkmkstart AAAAAAAAWI}{\bkmkend AAAAAAAAWI}
00085         printf ({\cf22 "\\n************ ERROR ************\\n"});\par
{\bkmkstart AAAAAAAAWJ}{\bkmkend AAAAAAAAWJ}
00086 \par
{\bkmkstart AAAAAAAAWK}{\bkmkend AAAAAAAAWK}
00087         va_start (argptr,error);\par
{\bkmkstart AAAAAAAAWL}{\bkmkend AAAAAAAAWL}
00088         vprintf (error,argptr);\par
{\bkmkstart AAAAAAAAWM}{\bkmkend AAAAAAAAWM}
00089         va_end (argptr);\par
{\bkmkstart AAAAAAAAWN}{\bkmkend AAAAAAAAWN}
00090         printf ({\cf22 "\\n"});\par
{\bkmkstart AAAAAAAAWO}{\bkmkend AAAAAAAAWO}
00091 \par
{\bkmkstart AAAAAAAAWP}{\bkmkend AAAAAAAAWP}
00092         exit (1);\par
{\bkmkstart AAAAAAAAWQ}{\bkmkend AAAAAAAAWQ}
00093 \}\par
{\bkmkstart AAAAAAAAWR}{\bkmkend AAAAAAAAWR}
00094 \par
{\bkmkstart AAAAAAAAWS}{\bkmkend AAAAAAAAWS}
00095 {\cf20 /* only printf if in verbose mode */}\par
{\bkmkstart AAAAAAAAWT}{\bkmkend AAAAAAAAWT}
00096 qboolean verbose = {\cf17 false};\par
{\bkmkstart AAAAAAAAWU}{\bkmkend AAAAAAAAWU}
00097 {\cf18 void} qprintf ({\cf18 char} *format, ...)\par
{\bkmkstart AAAAAAAAWV}{\bkmkend AAAAAAAAWV}
00098 \{\par
{\bkmkstart AAAAAAAAWW}{\bkmkend AAAAAAAAWW}
00099         va_list argptr;\par
{\bkmkstart AAAAAAAAWX}{\bkmkend AAAAAAAAWX}
00100 \par
{\bkmkstart AAAAAAAAWY}{\bkmkend AAAAAAAAWY}
00101         {\cf19 if} (!verbose)\par
{\bkmkstart AAAAAAAAWZ}{\bkmkend AAAAAAAAWZ}
00102                 {\cf19 return};\par
{\bkmkstart AAAAAAAAXA}{\bkmkend AAAAAAAAXA}
00103         va_start (argptr,format);\par
{\bkmkstart AAAAAAAAXB}{\bkmkend AAAAAAAAXB}
00104         vprintf (format,argptr);\par
{\bkmkstart AAAAAAAAXC}{\bkmkend AAAAAAAAXC}
00105         va_end (argptr);\par
{\bkmkstart AAAAAAAAXD}{\bkmkend AAAAAAAAXD}
00106 \}\par
{\bkmkstart AAAAAAAAXE}{\bkmkend AAAAAAAAXE}
00107 \par
{\bkmkstart AAAAAAAAXF}{\bkmkend AAAAAAAAXF}
00108 \par
{\bkmkstart AAAAAAAAXG}{\bkmkend AAAAAAAAXG}
00109 {\cf20 /*}\par
{\bkmkstart AAAAAAAAXH}{\bkmkend AAAAAAAAXH}
00110 {\cf20 }\par
{\bkmkstart AAAAAAAAXI}{\bkmkend AAAAAAAAXI}
00111 {\cf20 qdir will hold the path up to the quake directory, including the slash}\par
{\bkmkstart AAAAAAAAXJ}{\bkmkend AAAAAAAAXJ}
00112 {\cf20 }\par
{\bkmkstart AAAAAAAAXK}{\bkmkend AAAAAAAAXK}
00113 {\cf20   f:\\quake\\}\par
{\bkmkstart AAAAAAAAXL}{\bkmkend AAAAAAAAXL}
00114 {\cf20   /raid/quake/}\par
{\bkmkstart AAAAAAAAXM}{\bkmkend AAAAAAAAXM}
00115 {\cf20 }\par
{\bkmkstart AAAAAAAAXN}{\bkmkend AAAAAAAAXN}
00116 {\cf20 gamedir will hold qdir + the game directory (id1, id2, etc)}\par
{\bkmkstart AAAAAAAAXO}{\bkmkend AAAAAAAAXO}
00117 {\cf20 }\par
{\bkmkstart AAAAAAAAXP}{\bkmkend AAAAAAAAXP}
00118 {\cf20   */}\par
{\bkmkstart AAAAAAAAXQ}{\bkmkend AAAAAAAAXQ}
00119 \par
{\bkmkstart AAAAAAAAXR}{\bkmkend AAAAAAAAXR}
00120 {\cf18 char}            qproject[ 1024 ]=\{{\cf23 '\\0'}\};\par
{\bkmkstart AAAAAAAAXS}{\bkmkend AAAAAAAAXS}
00121 {\cf18 char}            qdir[1024]=\{{\cf23 '\\0'}\};\par
{\bkmkstart AAAAAAAAXT}{\bkmkend AAAAAAAAXT}
00122 {\cf18 char}            gamedir[1024]=\{{\cf23 '\\0'}\};\par
{\bkmkstart AAAAAAAAXU}{\bkmkend AAAAAAAAXU}
00123 \par
{\bkmkstart AAAAAAAAXV}{\bkmkend AAAAAAAAXV}
00124 {\cf18 void} SetQdirFromPath ({\cf18 char} *path)\par
{\bkmkstart AAAAAAAAXW}{\bkmkend AAAAAAAAXW}
00125 \{\par
{\bkmkstart AAAAAAAAXX}{\bkmkend AAAAAAAAXX}
00126 {\cf21 #ifndef OLD_BOGUS_PATH_CODE}\par
{\bkmkstart AAAAAAAAXY}{\bkmkend AAAAAAAAXY}
00127 \par
{\bkmkstart AAAAAAAAXZ}{\bkmkend AAAAAAAAXZ}
00128         {\cf19 if} ( qproject[0]=={\cf23 '\\0'} )\par
{\bkmkstart AAAAAAAAYA}{\bkmkend AAAAAAAAYA}
00129                 \{\par
{\bkmkstart AAAAAAAAYB}{\bkmkend AAAAAAAAYB}
00130                 {\cf19 if} ( getenv({\cf22 "QPROJECT"}) )\par
{\bkmkstart AAAAAAAAYC}{\bkmkend AAAAAAAAYC}
00131                 \{\par
{\bkmkstart AAAAAAAAYD}{\bkmkend AAAAAAAAYD}
00132                         {\cf18 char} c = qproject[ strlen(qproject)-1 ];\par
{\bkmkstart AAAAAAAAYE}{\bkmkend AAAAAAAAYE}
00133                         strcpy( qproject, getenv({\cf22 "QPROJECT"}) );\par
{\bkmkstart AAAAAAAAYF}{\bkmkend AAAAAAAAYF}
00134                         {\cf19 if} ( !PATHSEPARATOR( c ) )\par
{\bkmkstart AAAAAAAAYG}{\bkmkend AAAAAAAAYG}
00135                                 strcat( qproject, {\cf22 "\\\\"} );\par
{\bkmkstart AAAAAAAAYH}{\bkmkend AAAAAAAAYH}
00136                 \}\par
{\bkmkstart AAAAAAAAYI}{\bkmkend AAAAAAAAYI}
00137                 {\cf19 else}\par
{\bkmkstart AAAAAAAAYJ}{\bkmkend AAAAAAAAYJ}
00138                         strcpy( qproject, {\cf22 "quiver\\\\"} );\par
{\bkmkstart AAAAAAAAYK}{\bkmkend AAAAAAAAYK}
00139                 \}\par
{\bkmkstart AAAAAAAAYL}{\bkmkend AAAAAAAAYL}
00140         {\cf19 if} ( qproject[0] != {\cf23 '\\\\'} && qproject[0] != {\cf23 '/'} && qproject[1] != {\cf23 ':'} )\par
{\bkmkstart AAAAAAAAYM}{\bkmkend AAAAAAAAYM}
00141                 \{\par
{\bkmkstart AAAAAAAAYN}{\bkmkend AAAAAAAAYN}
00142                 strcpy( qdir, {\cf22 "\\\\"} );\par
{\bkmkstart AAAAAAAAYO}{\bkmkend AAAAAAAAYO}
00143                 \}\par
{\bkmkstart AAAAAAAAYP}{\bkmkend AAAAAAAAYP}
00144 \par
{\bkmkstart AAAAAAAAYQ}{\bkmkend AAAAAAAAYQ}
00145         strcat( qdir, qproject );\par
{\bkmkstart AAAAAAAAYR}{\bkmkend AAAAAAAAYR}
00146         strcpy( gamedir, qdir );\par
{\bkmkstart AAAAAAAAYS}{\bkmkend AAAAAAAAYS}
00147         strcat( gamedir, {\cf22 "\\\\valve\\\\"} );\par
{\bkmkstart AAAAAAAAYT}{\bkmkend AAAAAAAAYT}
00148 \par
{\bkmkstart AAAAAAAAYU}{\bkmkend AAAAAAAAYU}
00149 {\cf21 #else}\par
{\bkmkstart AAAAAAAAYV}{\bkmkend AAAAAAAAYV}
00150         {\cf18 char}    temp[1024];\par
{\bkmkstart AAAAAAAAYW}{\bkmkend AAAAAAAAYW}
00151         {\cf18 char}    *c;\par
{\bkmkstart AAAAAAAAYX}{\bkmkend AAAAAAAAYX}
00152 \par
{\bkmkstart AAAAAAAAYY}{\bkmkend AAAAAAAAYY}
00153         {\cf19 if} (!(path[0] == {\cf23 '/'} || path[0] == {\cf23 '\\\\'} || path[1] == {\cf23 ':'}))\par
{\bkmkstart AAAAAAAAYZ}{\bkmkend AAAAAAAAYZ}
00154         \{       {\cf20 // path is partial}\par
{\bkmkstart AAAAAAAAZA}{\bkmkend AAAAAAAAZA}
00155                 Q_getcwd (temp);\par
{\bkmkstart AAAAAAAAZB}{\bkmkend AAAAAAAAZB}
00156                 strcat (temp, path);\par
{\bkmkstart AAAAAAAAZC}{\bkmkend AAAAAAAAZC}
00157                 path = temp;\par
{\bkmkstart AAAAAAAAZD}{\bkmkend AAAAAAAAZD}
00158         \}\par
{\bkmkstart AAAAAAAAZE}{\bkmkend AAAAAAAAZE}
00159 \par
{\bkmkstart AAAAAAAAZF}{\bkmkend AAAAAAAAZF}
00160 {\cf20 // search for "quake" or quiver in path}\par
{\bkmkstart AAAAAAAAZG}{\bkmkend AAAAAAAAZG}
00161         {\cf19 if}( !qproject[0] ) \{\par
{\bkmkstart AAAAAAAAZH}{\bkmkend AAAAAAAAZH}
00162                 {\cf18 char} *pszProj;\par
{\bkmkstart AAAAAAAAZI}{\bkmkend AAAAAAAAZI}
00163 \par
{\bkmkstart AAAAAAAAZJ}{\bkmkend AAAAAAAAZJ}
00164                 pszProj = getenv({\cf22 "QPROJECT"});\par
{\bkmkstart AAAAAAAAZK}{\bkmkend AAAAAAAAZK}
00165 \par
{\bkmkstart AAAAAAAAZL}{\bkmkend AAAAAAAAZL}
00166                 {\cf19 if} (pszProj != NULL)\par
{\bkmkstart AAAAAAAAZM}{\bkmkend AAAAAAAAZM}
00167                         strcpy(qproject, pszProj);\par
{\bkmkstart AAAAAAAAZN}{\bkmkend AAAAAAAAZN}
00168                 {\cf19 else}\par
{\bkmkstart AAAAAAAAZO}{\bkmkend AAAAAAAAZO}
00169                         strcpy(qproject, {\cf22 "quiver"});\par
{\bkmkstart AAAAAAAAZP}{\bkmkend AAAAAAAAZP}
00170         \}\par
{\bkmkstart AAAAAAAAZQ}{\bkmkend AAAAAAAAZQ}
00171 \par
{\bkmkstart AAAAAAAAZR}{\bkmkend AAAAAAAAZR}
00172 try_again:\par
{\bkmkstart AAAAAAAAZS}{\bkmkend AAAAAAAAZS}
00173 \par
{\bkmkstart AAAAAAAAZT}{\bkmkend AAAAAAAAZT}
00174         {\cf19 for} (c=path ; *c ; c++)\par
{\bkmkstart AAAAAAAAZU}{\bkmkend AAAAAAAAZU}
00175         \{\par
{\bkmkstart AAAAAAAAZV}{\bkmkend AAAAAAAAZV}
00176                 {\cf18 int} iSize = 0;\par
{\bkmkstart AAAAAAAAZW}{\bkmkend AAAAAAAAZW}
00177 \par
{\bkmkstart AAAAAAAAZX}{\bkmkend AAAAAAAAZX}
00178                 {\cf19 if} (!Q_strncasecmp( c, qproject, strlen( qproject ) ) )\par
{\bkmkstart AAAAAAAAZY}{\bkmkend AAAAAAAAZY}
00179                         iSize = strlen( qproject ) + 1;\par
{\bkmkstart AAAAAAAAZZ}{\bkmkend AAAAAAAAZZ}
00180 \par
{\bkmkstart AAAAAAABAA}{\bkmkend AAAAAAABAA}
00181                 {\cf19 if} (iSize > 0)\par
{\bkmkstart AAAAAAABAB}{\bkmkend AAAAAAABAB}
00182                 \{\par
{\bkmkstart AAAAAAABAC}{\bkmkend AAAAAAABAC}
00183                         strncpy (qdir, path, c + iSize - path);\par
{\bkmkstart AAAAAAABAD}{\bkmkend AAAAAAABAD}
00184                         printf ({\cf22 "qdir: %s\\n"}, qdir);\par
{\bkmkstart AAAAAAABAE}{\bkmkend AAAAAAABAE}
00185                         c += iSize;\par
{\bkmkstart AAAAAAABAF}{\bkmkend AAAAAAABAF}
00186                         {\cf19 while} (*c)\par
{\bkmkstart AAAAAAABAG}{\bkmkend AAAAAAABAG}
00187                         \{\par
{\bkmkstart AAAAAAABAH}{\bkmkend AAAAAAABAH}
00188                                 {\cf19 if} (*c == {\cf23 '/'} || *c == {\cf23 '\\\\'})\par
{\bkmkstart AAAAAAABAI}{\bkmkend AAAAAAABAI}
00189                                 \{\par
{\bkmkstart AAAAAAABAJ}{\bkmkend AAAAAAABAJ}
00190                                         strncpy (gamedir, path, c+1-path);\par
{\bkmkstart AAAAAAABAK}{\bkmkend AAAAAAABAK}
00191                                         printf ({\cf22 "gamedir: %s\\n"}, gamedir);\par
{\bkmkstart AAAAAAABAL}{\bkmkend AAAAAAABAL}
00192                                         {\cf19 return};\par
{\bkmkstart AAAAAAABAM}{\bkmkend AAAAAAABAM}
00193                                 \}\par
{\bkmkstart AAAAAAABAN}{\bkmkend AAAAAAABAN}
00194                                 c++;\par
{\bkmkstart AAAAAAABAO}{\bkmkend AAAAAAABAO}
00195                         \}\par
{\bkmkstart AAAAAAABAP}{\bkmkend AAAAAAABAP}
00196                         Error ({\cf22 "No gamedir in %s"}, path);\par
{\bkmkstart AAAAAAABAQ}{\bkmkend AAAAAAABAQ}
00197                         {\cf19 return};\par
{\bkmkstart AAAAAAABAR}{\bkmkend AAAAAAABAR}
00198                 \}\par
{\bkmkstart AAAAAAABAS}{\bkmkend AAAAAAABAS}
00199         \}\par
{\bkmkstart AAAAAAABAT}{\bkmkend AAAAAAABAT}
00200 \par
{\bkmkstart AAAAAAABAU}{\bkmkend AAAAAAABAU}
00201         {\cf19 if} (!strcmp(qproject, {\cf22 "quiver"}))\par
{\bkmkstart AAAAAAABAV}{\bkmkend AAAAAAABAV}
00202         \{\par
{\bkmkstart AAAAAAABAW}{\bkmkend AAAAAAABAW}
00203                 strcpy(qproject, {\cf22 "prospero"});\par
{\bkmkstart AAAAAAABAX}{\bkmkend AAAAAAABAX}
00204                 {\cf19 goto} try_again;\par
{\bkmkstart AAAAAAABAY}{\bkmkend AAAAAAABAY}
00205         \}\par
{\bkmkstart AAAAAAABAZ}{\bkmkend AAAAAAABAZ}
00206 \par
{\bkmkstart AAAAAAABBA}{\bkmkend AAAAAAABBA}
00207         Error ({\cf22 "SetQdirFromPath: no '%s' in %s"}, qproject, path);\par
{\bkmkstart AAAAAAABBB}{\bkmkend AAAAAAABBB}
00208 {\cf21 #endif}\par
{\bkmkstart AAAAAAABBC}{\bkmkend AAAAAAABBC}
00209 \}\par
{\bkmkstart AAAAAAABBD}{\bkmkend AAAAAAABBD}
00210 \par
{\bkmkstart AAAAAAABBE}{\bkmkend AAAAAAABBE}
00211 \par
{\bkmkstart AAAAAAABBF}{\bkmkend AAAAAAABBF}
00212 {\cf18 char} *ExpandArg ({\cf18 char} *path)\par
{\bkmkstart AAAAAAABBG}{\bkmkend AAAAAAABBG}
00213 \{\par
{\bkmkstart AAAAAAABBH}{\bkmkend AAAAAAABBH}
00214         {\cf17 static} {\cf18 char} full[1024];\par
{\bkmkstart AAAAAAABBI}{\bkmkend AAAAAAABBI}
00215 \par
{\bkmkstart AAAAAAABBJ}{\bkmkend AAAAAAABBJ}
00216         {\cf19 if} (path[0] != {\cf23 '/'} && path[0] != {\cf23 '\\\\'} && path[1] != {\cf23 ':'})\par
{\bkmkstart AAAAAAABBK}{\bkmkend AAAAAAABBK}
00217         \{\par
{\bkmkstart AAAAAAABBL}{\bkmkend AAAAAAABBL}
00218                 Q_getwd (full);\par
{\bkmkstart AAAAAAABBM}{\bkmkend AAAAAAABBM}
00219                 strcat (full, path);\par
{\bkmkstart AAAAAAABBN}{\bkmkend AAAAAAABBN}
00220         \}\par
{\bkmkstart AAAAAAABBO}{\bkmkend AAAAAAABBO}
00221         {\cf19 else}\par
{\bkmkstart AAAAAAABBP}{\bkmkend AAAAAAABBP}
00222                 strcpy (full, path);\par
{\bkmkstart AAAAAAABBQ}{\bkmkend AAAAAAABBQ}
00223         {\cf19 return} full;\par
{\bkmkstart AAAAAAABBR}{\bkmkend AAAAAAABBR}
00224 \}\par
{\bkmkstart AAAAAAABBS}{\bkmkend AAAAAAABBS}
00225 \par
{\bkmkstart AAAAAAABBT}{\bkmkend AAAAAAABBT}
00226 {\cf18 char} *ExpandPath ({\cf18 char} *path)\par
{\bkmkstart AAAAAAABBU}{\bkmkend AAAAAAABBU}
00227 \{\par
{\bkmkstart AAAAAAABBV}{\bkmkend AAAAAAABBV}
00228         {\cf18 char} *psz;\par
{\bkmkstart AAAAAAABBW}{\bkmkend AAAAAAABBW}
00229         {\cf17 static} {\cf18 char} full[1024];\par
{\bkmkstart AAAAAAABBX}{\bkmkend AAAAAAABBX}
00230         {\cf19 if} (!qdir)\par
{\bkmkstart AAAAAAABBY}{\bkmkend AAAAAAABBY}
00231                 Error ({\cf22 "ExpandPath called without qdir set"});\par
{\bkmkstart AAAAAAABBZ}{\bkmkend AAAAAAABBZ}
00232         {\cf19 if} (path[0] == {\cf23 '/'} || path[0] == {\cf23 '\\\\'} || path[1] == {\cf23 ':'})\par
{\bkmkstart AAAAAAABCA}{\bkmkend AAAAAAABCA}
00233                 {\cf19 return} path;\par
{\bkmkstart AAAAAAABCB}{\bkmkend AAAAAAABCB}
00234         psz = strstr(path, qdir);\par
{\bkmkstart AAAAAAABCC}{\bkmkend AAAAAAABCC}
00235         {\cf19 if} (psz)\par
{\bkmkstart AAAAAAABCD}{\bkmkend AAAAAAABCD}
00236                 strcpy(full, path);\par
{\bkmkstart AAAAAAABCE}{\bkmkend AAAAAAABCE}
00237         {\cf19 else}\par
{\bkmkstart AAAAAAABCF}{\bkmkend AAAAAAABCF}
00238                 sprintf (full, {\cf22 "%s%s"}, qdir, path);\par
{\bkmkstart AAAAAAABCG}{\bkmkend AAAAAAABCG}
00239 \par
{\bkmkstart AAAAAAABCH}{\bkmkend AAAAAAABCH}
00240         {\cf19 return} full;\par
{\bkmkstart AAAAAAABCI}{\bkmkend AAAAAAABCI}
00241 \}\par
{\bkmkstart AAAAAAABCJ}{\bkmkend AAAAAAABCJ}
00242 \par
{\bkmkstart AAAAAAABCK}{\bkmkend AAAAAAABCK}
00243 {\cf18 char} *ExpandPathAndArchive ({\cf18 char} *path)\par
{\bkmkstart AAAAAAABCL}{\bkmkend AAAAAAABCL}
00244 \{\par
{\bkmkstart AAAAAAABCM}{\bkmkend AAAAAAABCM}
00245         {\cf18 char}    *expanded;\par
{\bkmkstart AAAAAAABCN}{\bkmkend AAAAAAABCN}
00246         {\cf18 char}    archivename[1024];\par
{\bkmkstart AAAAAAABCO}{\bkmkend AAAAAAABCO}
00247 \par
{\bkmkstart AAAAAAABCP}{\bkmkend AAAAAAABCP}
00248         expanded = ExpandPath (path);\par
{\bkmkstart AAAAAAABCQ}{\bkmkend AAAAAAABCQ}
00249 \par
{\bkmkstart AAAAAAABCR}{\bkmkend AAAAAAABCR}
00250         {\cf19 if} (archive)\par
{\bkmkstart AAAAAAABCS}{\bkmkend AAAAAAABCS}
00251         \{\par
{\bkmkstart AAAAAAABCT}{\bkmkend AAAAAAABCT}
00252                 sprintf (archivename, {\cf22 "%s/%s"}, archivedir, path);\par
{\bkmkstart AAAAAAABCU}{\bkmkend AAAAAAABCU}
00253                 QCopyFile (expanded, archivename);\par
{\bkmkstart AAAAAAABCV}{\bkmkend AAAAAAABCV}
00254         \}\par
{\bkmkstart AAAAAAABCW}{\bkmkend AAAAAAABCW}
00255         {\cf19 return} expanded;\par
{\bkmkstart AAAAAAABCX}{\bkmkend AAAAAAABCX}
00256 \}\par
{\bkmkstart AAAAAAABCY}{\bkmkend AAAAAAABCY}
00257 \par
{\bkmkstart AAAAAAABCZ}{\bkmkend AAAAAAABCZ}
00258 \par
{\bkmkstart AAAAAAABDA}{\bkmkend AAAAAAABDA}
00259 {\cf18 char} *copystring({\cf18 char} *s)\par
{\bkmkstart AAAAAAABDB}{\bkmkend AAAAAAABDB}
00260 \{\par
{\bkmkstart AAAAAAABDC}{\bkmkend AAAAAAABDC}
00261         {\cf18 char}    *b;\par
{\bkmkstart AAAAAAABDD}{\bkmkend AAAAAAABDD}
00262         b = malloc(strlen(s)+1);\par
{\bkmkstart AAAAAAABDE}{\bkmkend AAAAAAABDE}
00263         strcpy (b, s);\par
{\bkmkstart AAAAAAABDF}{\bkmkend AAAAAAABDF}
00264         {\cf19 return} b;\par
{\bkmkstart AAAAAAABDG}{\bkmkend AAAAAAABDG}
00265 \}\par
{\bkmkstart AAAAAAABDH}{\bkmkend AAAAAAABDH}
00266 \par
{\bkmkstart AAAAAAABDI}{\bkmkend AAAAAAABDI}
00267 \par
{\bkmkstart AAAAAAABDJ}{\bkmkend AAAAAAABDJ}
00268 \par
{\bkmkstart AAAAAAABDK}{\bkmkend AAAAAAABDK}
00269 {\cf20 /*}\par
{\bkmkstart AAAAAAABDL}{\bkmkend AAAAAAABDL}
00270 {\cf20 ================}\par
{\bkmkstart AAAAAAABDM}{\bkmkend AAAAAAABDM}
00271 {\cf20 I_FloatTime}\par
{\bkmkstart AAAAAAABDN}{\bkmkend AAAAAAABDN}
00272 {\cf20 ================}\par
{\bkmkstart AAAAAAABDO}{\bkmkend AAAAAAABDO}
00273 {\cf20 */}\par
{\bkmkstart AAAAAAABDP}{\bkmkend AAAAAAABDP}
00274 {\cf18 double} I_FloatTime ({\cf18 void})\par
{\bkmkstart AAAAAAABDQ}{\bkmkend AAAAAAABDQ}
00275 \{\par
{\bkmkstart AAAAAAABDR}{\bkmkend AAAAAAABDR}
00276         time_t  t;\par
{\bkmkstart AAAAAAABDS}{\bkmkend AAAAAAABDS}
00277 \par
{\bkmkstart AAAAAAABDT}{\bkmkend AAAAAAABDT}
00278         time (&t);\par
{\bkmkstart AAAAAAABDU}{\bkmkend AAAAAAABDU}
00279 \par
{\bkmkstart AAAAAAABDV}{\bkmkend AAAAAAABDV}
00280         {\cf19 return} t;\par
{\bkmkstart AAAAAAABDW}{\bkmkend AAAAAAABDW}
00281 {\cf21 #if 0}\par
{\bkmkstart AAAAAAABDX}{\bkmkend AAAAAAABDX}
00282 {\cf20 // more precise, less portable}\par
{\bkmkstart AAAAAAABDY}{\bkmkend AAAAAAABDY}
00283         {\cf17 struct }timeval tp;\par
{\bkmkstart AAAAAAABDZ}{\bkmkend AAAAAAABDZ}
00284         {\cf17 struct }timezone tzp;\par
{\bkmkstart AAAAAAABEA}{\bkmkend AAAAAAABEA}
00285         {\cf17 static} {\cf18 int}              secbase;\par
{\bkmkstart AAAAAAABEB}{\bkmkend AAAAAAABEB}
00286 \par
{\bkmkstart AAAAAAABEC}{\bkmkend AAAAAAABEC}
00287         gettimeofday(&tp, &tzp);\par
{\bkmkstart AAAAAAABED}{\bkmkend AAAAAAABED}
00288 \par
{\bkmkstart AAAAAAABEE}{\bkmkend AAAAAAABEE}
00289         {\cf19 if} (!secbase)\par
{\bkmkstart AAAAAAABEF}{\bkmkend AAAAAAABEF}
00290         \{\par
{\bkmkstart AAAAAAABEG}{\bkmkend AAAAAAABEG}
00291                 secbase = tp.tv_sec;\par
{\bkmkstart AAAAAAABEH}{\bkmkend AAAAAAABEH}
00292                 {\cf19 return} tp.tv_usec/1000000.0;\par
{\bkmkstart AAAAAAABEI}{\bkmkend AAAAAAABEI}
00293         \}\par
{\bkmkstart AAAAAAABEJ}{\bkmkend AAAAAAABEJ}
00294 \par
{\bkmkstart AAAAAAABEK}{\bkmkend AAAAAAABEK}
00295         {\cf19 return} (tp.tv_sec - secbase) + tp.tv_usec/1000000.0;\par
{\bkmkstart AAAAAAABEL}{\bkmkend AAAAAAABEL}
00296 {\cf21 #endif}\par
{\bkmkstart AAAAAAABEM}{\bkmkend AAAAAAABEM}
00297 \}\par
{\bkmkstart AAAAAAABEN}{\bkmkend AAAAAAABEN}
00298 \par
{\bkmkstart AAAAAAABEO}{\bkmkend AAAAAAABEO}
00299 {\cf18 void} Q_getwd ({\cf18 char} *out)\par
{\bkmkstart AAAAAAABEP}{\bkmkend AAAAAAABEP}
00300 \{\par
{\bkmkstart AAAAAAABEQ}{\bkmkend AAAAAAABEQ}
00301 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAABER}{\bkmkend AAAAAAABER}
00302    _getcwd (out, 256);\par
{\bkmkstart AAAAAAABES}{\bkmkend AAAAAAABES}
00303    strcat (out, {\cf22 "\\\\"});\par
{\bkmkstart AAAAAAABET}{\bkmkend AAAAAAABET}
00304 {\cf21 #else}\par
{\bkmkstart AAAAAAABEU}{\bkmkend AAAAAAABEU}
00305    getcwd (out);\par
{\bkmkstart AAAAAAABEV}{\bkmkend AAAAAAABEV}
00306 {\cf21 #endif}\par
{\bkmkstart AAAAAAABEW}{\bkmkend AAAAAAABEW}
00307 \}\par
{\bkmkstart AAAAAAABEX}{\bkmkend AAAAAAABEX}
00308 \par
{\bkmkstart AAAAAAABEY}{\bkmkend AAAAAAABEY}
00309 \par
{\bkmkstart AAAAAAABEZ}{\bkmkend AAAAAAABEZ}
00310 {\cf18 void} Q_mkdir ({\cf18 char} *path)\par
{\bkmkstart AAAAAAABFA}{\bkmkend AAAAAAABFA}
00311 \{\par
{\bkmkstart AAAAAAABFB}{\bkmkend AAAAAAABFB}
00312 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAABFC}{\bkmkend AAAAAAABFC}
00313         {\cf19 if} (_mkdir (path) != -1)\par
{\bkmkstart AAAAAAABFD}{\bkmkend AAAAAAABFD}
00314                 {\cf19 return};\par
{\bkmkstart AAAAAAABFE}{\bkmkend AAAAAAABFE}
00315 {\cf21 #else}\par
{\bkmkstart AAAAAAABFF}{\bkmkend AAAAAAABFF}
00316         {\cf19 if} (mkdir (path, 0777) != -1)\par
{\bkmkstart AAAAAAABFG}{\bkmkend AAAAAAABFG}
00317                 {\cf19 return};\par
{\bkmkstart AAAAAAABFH}{\bkmkend AAAAAAABFH}
00318 {\cf21 #endif}\par
{\bkmkstart AAAAAAABFI}{\bkmkend AAAAAAABFI}
00319         {\cf19 if} (errno != EEXIST)\par
{\bkmkstart AAAAAAABFJ}{\bkmkend AAAAAAABFJ}
00320                 Error ({\cf22 "mkdir %s: %s"},path, strerror(errno));\par
{\bkmkstart AAAAAAABFK}{\bkmkend AAAAAAABFK}
00321 \}\par
{\bkmkstart AAAAAAABFL}{\bkmkend AAAAAAABFL}
00322 \par
{\bkmkstart AAAAAAABFM}{\bkmkend AAAAAAABFM}
00323 {\cf20 /*}\par
{\bkmkstart AAAAAAABFN}{\bkmkend AAAAAAABFN}
00324 {\cf20 ============}\par
{\bkmkstart AAAAAAABFO}{\bkmkend AAAAAAABFO}
00325 {\cf20 FileTime}\par
{\bkmkstart AAAAAAABFP}{\bkmkend AAAAAAABFP}
00326 {\cf20 }\par
{\bkmkstart AAAAAAABFQ}{\bkmkend AAAAAAABFQ}
00327 {\cf20 returns -1 if not present}\par
{\bkmkstart AAAAAAABFR}{\bkmkend AAAAAAABFR}
00328 {\cf20 ============}\par
{\bkmkstart AAAAAAABFS}{\bkmkend AAAAAAABFS}
00329 {\cf20 */}\par
{\bkmkstart AAAAAAABFT}{\bkmkend AAAAAAABFT}
00330 {\cf18 int}     FileTime ({\cf18 char} *path)\par
{\bkmkstart AAAAAAABFU}{\bkmkend AAAAAAABFU}
00331 \{\par
{\bkmkstart AAAAAAABFV}{\bkmkend AAAAAAABFV}
00332         {\cf17 struct  }stat    buf;\par
{\bkmkstart AAAAAAABFW}{\bkmkend AAAAAAABFW}
00333 \par
{\bkmkstart AAAAAAABFX}{\bkmkend AAAAAAABFX}
00334         {\cf19 if} (stat (path,&buf) == -1)\par
{\bkmkstart AAAAAAABFY}{\bkmkend AAAAAAABFY}
00335                 {\cf19 return} -1;\par
{\bkmkstart AAAAAAABFZ}{\bkmkend AAAAAAABFZ}
00336 \par
{\bkmkstart AAAAAAABGA}{\bkmkend AAAAAAABGA}
00337         {\cf19 return} buf.st_mtime;\par
{\bkmkstart AAAAAAABGB}{\bkmkend AAAAAAABGB}
00338 \}\par
{\bkmkstart AAAAAAABGC}{\bkmkend AAAAAAABGC}
00339 \par
{\bkmkstart AAAAAAABGD}{\bkmkend AAAAAAABGD}
00340 \par
{\bkmkstart AAAAAAABGE}{\bkmkend AAAAAAABGE}
00341 \par
{\bkmkstart AAAAAAABGF}{\bkmkend AAAAAAABGF}
00342 {\cf20 /*}\par
{\bkmkstart AAAAAAABGG}{\bkmkend AAAAAAABGG}
00343 {\cf20 ==============}\par
{\bkmkstart AAAAAAABGH}{\bkmkend AAAAAAABGH}
00344 {\cf20 COM_Parse}\par
{\bkmkstart AAAAAAABGI}{\bkmkend AAAAAAABGI}
00345 {\cf20 }\par
{\bkmkstart AAAAAAABGJ}{\bkmkend AAAAAAABGJ}
00346 {\cf20   Parse a token out of a string (into global: char com_token[1024])}\par
{\bkmkstart AAAAAAABGK}{\bkmkend AAAAAAABGK}
00347 {\cf20 ==============}\par
{\bkmkstart AAAAAAABGL}{\bkmkend AAAAAAABGL}
00348 {\cf20 */}\par
{\bkmkstart AAAAAAABGM}{\bkmkend AAAAAAABGM}
00349 {\cf18 char} *COM_Parse ({\cf18 char} *data)\par
{\bkmkstart AAAAAAABGN}{\bkmkend AAAAAAABGN}
00350 \{\par
{\bkmkstart AAAAAAABGO}{\bkmkend AAAAAAABGO}
00351         {\cf18 int}             c;\par
{\bkmkstart AAAAAAABGP}{\bkmkend AAAAAAABGP}
00352         {\cf18 int}             len;\par
{\bkmkstart AAAAAAABGQ}{\bkmkend AAAAAAABGQ}
00353 \par
{\bkmkstart AAAAAAABGR}{\bkmkend AAAAAAABGR}
00354         len = 0;\par
{\bkmkstart AAAAAAABGS}{\bkmkend AAAAAAABGS}
00355         com_token[0] = 0;\par
{\bkmkstart AAAAAAABGT}{\bkmkend AAAAAAABGT}
00356 \par
{\bkmkstart AAAAAAABGU}{\bkmkend AAAAAAABGU}
00357         {\cf19 if} (!data)\par
{\bkmkstart AAAAAAABGV}{\bkmkend AAAAAAABGV}
00358                 {\cf19 return} NULL;\par
{\bkmkstart AAAAAAABGW}{\bkmkend AAAAAAABGW}
00359 \par
{\bkmkstart AAAAAAABGX}{\bkmkend AAAAAAABGX}
00360 {\cf20 /* skip whitespace */}\par
{\bkmkstart AAAAAAABGY}{\bkmkend AAAAAAABGY}
00361 skipwhite:\par
{\bkmkstart AAAAAAABGZ}{\bkmkend AAAAAAABGZ}
00362         {\cf19 while} ( (c = *data) <= {\cf23 ' '})\par
{\bkmkstart AAAAAAABHA}{\bkmkend AAAAAAABHA}
00363         \{\par
{\bkmkstart AAAAAAABHB}{\bkmkend AAAAAAABHB}
00364                 {\cf19 if} (c == 0)\par
{\bkmkstart AAAAAAABHC}{\bkmkend AAAAAAABHC}
00365                 \{\par
{\bkmkstart AAAAAAABHD}{\bkmkend AAAAAAABHD}
00366                         com_eof = {\cf17 true};\par
{\bkmkstart AAAAAAABHE}{\bkmkend AAAAAAABHE}
00367                         {\cf19 return} NULL;                    {\cf20 /* end of file; */}\par
{\bkmkstart AAAAAAABHF}{\bkmkend AAAAAAABHF}
00368                 \}\par
{\bkmkstart AAAAAAABHG}{\bkmkend AAAAAAABHG}
00369                 data++;\par
{\bkmkstart AAAAAAABHH}{\bkmkend AAAAAAABHH}
00370         \}\par
{\bkmkstart AAAAAAABHI}{\bkmkend AAAAAAABHI}
00371 \par
{\bkmkstart AAAAAAABHJ}{\bkmkend AAAAAAABHJ}
00372 {\cf20 /* skip // comments */}\par
{\bkmkstart AAAAAAABHK}{\bkmkend AAAAAAABHK}
00373         {\cf19 if} (c=={\cf23 '/'} && data[1] == {\cf23 '/'})\par
{\bkmkstart AAAAAAABHL}{\bkmkend AAAAAAABHL}
00374         \{\par
{\bkmkstart AAAAAAABHM}{\bkmkend AAAAAAABHM}
00375                 {\cf19 while} (*data && *data != {\cf23 '\\n'})\par
{\bkmkstart AAAAAAABHN}{\bkmkend AAAAAAABHN}
00376                         data++;\par
{\bkmkstart AAAAAAABHO}{\bkmkend AAAAAAABHO}
00377                 {\cf19 goto} skipwhite;\par
{\bkmkstart AAAAAAABHP}{\bkmkend AAAAAAABHP}
00378         \}\par
{\bkmkstart AAAAAAABHQ}{\bkmkend AAAAAAABHQ}
00379 \par
{\bkmkstart AAAAAAABHR}{\bkmkend AAAAAAABHR}
00380 \par
{\bkmkstart AAAAAAABHS}{\bkmkend AAAAAAABHS}
00381 {\cf20 /* handle quoted strings specially */}\par
{\bkmkstart AAAAAAABHT}{\bkmkend AAAAAAABHT}
00382         {\cf19 if} (c == {\cf23 '\\"'})\par
{\bkmkstart AAAAAAABHU}{\bkmkend AAAAAAABHU}
00383         \{\par
{\bkmkstart AAAAAAABHV}{\bkmkend AAAAAAABHV}
00384                 data++;\par
{\bkmkstart AAAAAAABHW}{\bkmkend AAAAAAABHW}
00385                 {\cf19 do}\par
{\bkmkstart AAAAAAABHX}{\bkmkend AAAAAAABHX}
00386                 \{\par
{\bkmkstart AAAAAAABHY}{\bkmkend AAAAAAABHY}
00387                         c = *data++;\par
{\bkmkstart AAAAAAABHZ}{\bkmkend AAAAAAABHZ}
00388                         {\cf19 if} (c=={\cf23 '\\"'})\par
{\bkmkstart AAAAAAABIA}{\bkmkend AAAAAAABIA}
00389                         \{\par
{\bkmkstart AAAAAAABIB}{\bkmkend AAAAAAABIB}
00390                                 com_token[len] = 0;\par
{\bkmkstart AAAAAAABIC}{\bkmkend AAAAAAABIC}
00391                                 {\cf19 return} data;\par
{\bkmkstart AAAAAAABID}{\bkmkend AAAAAAABID}
00392                         \}\par
{\bkmkstart AAAAAAABIE}{\bkmkend AAAAAAABIE}
00393                         com_token[len] = c;\par
{\bkmkstart AAAAAAABIF}{\bkmkend AAAAAAABIF}
00394                         len++;\par
{\bkmkstart AAAAAAABIG}{\bkmkend AAAAAAABIG}
00395                 \} {\cf19 while} (1);\par
{\bkmkstart AAAAAAABIH}{\bkmkend AAAAAAABIH}
00396         \}\par
{\bkmkstart AAAAAAABII}{\bkmkend AAAAAAABII}
00397 \par
{\bkmkstart AAAAAAABIJ}{\bkmkend AAAAAAABIJ}
00398 {\cf20 /* parse single characters */}\par
{\bkmkstart AAAAAAABIK}{\bkmkend AAAAAAABIK}
00399         {\cf19 if} (c=={\cf23 '\{'} || c=={\cf23 '\}'}|| c=={\cf23 ')'}|| c=={\cf23 '('} || c=={\cf23 '\\''} || c=={\cf23 ':'})\par
{\bkmkstart AAAAAAABIL}{\bkmkend AAAAAAABIL}
00400         \{\par
{\bkmkstart AAAAAAABIM}{\bkmkend AAAAAAABIM}
00401                 com_token[len] = c;\par
{\bkmkstart AAAAAAABIN}{\bkmkend AAAAAAABIN}
00402                 len++;\par
{\bkmkstart AAAAAAABIO}{\bkmkend AAAAAAABIO}
00403                 com_token[len] = 0;\par
{\bkmkstart AAAAAAABIP}{\bkmkend AAAAAAABIP}
00404                 {\cf19 return} data+1;\par
{\bkmkstart AAAAAAABIQ}{\bkmkend AAAAAAABIQ}
00405         \}\par
{\bkmkstart AAAAAAABIR}{\bkmkend AAAAAAABIR}
00406 \par
{\bkmkstart AAAAAAABIS}{\bkmkend AAAAAAABIS}
00407 {\cf20 /* parse a regular word */}\par
{\bkmkstart AAAAAAABIT}{\bkmkend AAAAAAABIT}
00408         {\cf19 do}\par
{\bkmkstart AAAAAAABIU}{\bkmkend AAAAAAABIU}
00409         \{\par
{\bkmkstart AAAAAAABIV}{\bkmkend AAAAAAABIV}
00410                 com_token[len] = c;\par
{\bkmkstart AAAAAAABIW}{\bkmkend AAAAAAABIW}
00411                 data++;\par
{\bkmkstart AAAAAAABIX}{\bkmkend AAAAAAABIX}
00412                 len++;\par
{\bkmkstart AAAAAAABIY}{\bkmkend AAAAAAABIY}
00413                 c = *data;\par
{\bkmkstart AAAAAAABIZ}{\bkmkend AAAAAAABIZ}
00414         {\cf19 if} (c=={\cf23 '\{'} || c=={\cf23 '\}'}|| c=={\cf23 ')'}|| c=={\cf23 '('} || c=={\cf23 '\\''} || c=={\cf23 ':'})\par
{\bkmkstart AAAAAAABJA}{\bkmkend AAAAAAABJA}
00415                         {\cf19 break};\par
{\bkmkstart AAAAAAABJB}{\bkmkend AAAAAAABJB}
00416         \} {\cf19 while} (c>32);\par
{\bkmkstart AAAAAAABJC}{\bkmkend AAAAAAABJC}
00417 \par
{\bkmkstart AAAAAAABJD}{\bkmkend AAAAAAABJD}
00418         com_token[len] = 0;\par
{\bkmkstart AAAAAAABJE}{\bkmkend AAAAAAABJE}
00419         {\cf19 return} data;\par
{\bkmkstart AAAAAAABJF}{\bkmkend AAAAAAABJF}
00420 \}\par
{\bkmkstart AAAAAAABJG}{\bkmkend AAAAAAABJG}
00421 \par
{\bkmkstart AAAAAAABJH}{\bkmkend AAAAAAABJH}
00422 \par
{\bkmkstart AAAAAAABJI}{\bkmkend AAAAAAABJI}
00423 {\cf18 int} Q_strncasecmp ({\cf18 char} *s1, {\cf18 char} *s2, {\cf18 int} n)\par
{\bkmkstart AAAAAAABJJ}{\bkmkend AAAAAAABJJ}
00424 \{\par
{\bkmkstart AAAAAAABJK}{\bkmkend AAAAAAABJK}
00425         {\cf18 int}             c1, c2;\par
{\bkmkstart AAAAAAABJL}{\bkmkend AAAAAAABJL}
00426 \par
{\bkmkstart AAAAAAABJM}{\bkmkend AAAAAAABJM}
00427         {\cf19 while} (1)\par
{\bkmkstart AAAAAAABJN}{\bkmkend AAAAAAABJN}
00428         \{\par
{\bkmkstart AAAAAAABJO}{\bkmkend AAAAAAABJO}
00429                 c1 = *s1++;\par
{\bkmkstart AAAAAAABJP}{\bkmkend AAAAAAABJP}
00430                 c2 = *s2++;\par
{\bkmkstart AAAAAAABJQ}{\bkmkend AAAAAAABJQ}
00431 \par
{\bkmkstart AAAAAAABJR}{\bkmkend AAAAAAABJR}
00432                 {\cf19 if} (!n--)\par
{\bkmkstart AAAAAAABJS}{\bkmkend AAAAAAABJS}
00433                         {\cf19 return} 0;               {\cf20 /* strings are equal until end point */}\par
{\bkmkstart AAAAAAABJT}{\bkmkend AAAAAAABJT}
00434 \par
{\bkmkstart AAAAAAABJU}{\bkmkend AAAAAAABJU}
00435                 {\cf19 if} (c1 != c2)\par
{\bkmkstart AAAAAAABJV}{\bkmkend AAAAAAABJV}
00436                 \{\par
{\bkmkstart AAAAAAABJW}{\bkmkend AAAAAAABJW}
00437                         {\cf19 if} (c1 >= {\cf23 'a'} && c1 <= {\cf23 'z'})\par
{\bkmkstart AAAAAAABJX}{\bkmkend AAAAAAABJX}
00438                                 c1 -= ({\cf23 'a'} - {\cf23 'A'});\par
{\bkmkstart AAAAAAABJY}{\bkmkend AAAAAAABJY}
00439                         {\cf19 if} (c2 >= {\cf23 'a'} && c2 <= {\cf23 'z'})\par
{\bkmkstart AAAAAAABJZ}{\bkmkend AAAAAAABJZ}
00440                                 c2 -= ({\cf23 'a'} - {\cf23 'A'});\par
{\bkmkstart AAAAAAABKA}{\bkmkend AAAAAAABKA}
00441                         {\cf19 if} (c1 != c2)\par
{\bkmkstart AAAAAAABKB}{\bkmkend AAAAAAABKB}
00442                                 {\cf19 return} -1;              {\cf20 /* strings not equal */}\par
{\bkmkstart AAAAAAABKC}{\bkmkend AAAAAAABKC}
00443                 \}\par
{\bkmkstart AAAAAAABKD}{\bkmkend AAAAAAABKD}
00444                 {\cf19 if} (!c1)\par
{\bkmkstart AAAAAAABKE}{\bkmkend AAAAAAABKE}
00445                         {\cf19 return} 0;               {\cf20 /* strings are equal */}\par
{\bkmkstart AAAAAAABKF}{\bkmkend AAAAAAABKF}
00446         \}\par
{\bkmkstart AAAAAAABKG}{\bkmkend AAAAAAABKG}
00447 \par
{\bkmkstart AAAAAAABKH}{\bkmkend AAAAAAABKH}
00448         {\cf19 return} -1;\par
{\bkmkstart AAAAAAABKI}{\bkmkend AAAAAAABKI}
00449 \}\par
{\bkmkstart AAAAAAABKJ}{\bkmkend AAAAAAABKJ}
00450 \par
{\bkmkstart AAAAAAABKK}{\bkmkend AAAAAAABKK}
00451 {\cf18 int} Q_strcasecmp ({\cf18 char} *s1, {\cf18 char} *s2)\par
{\bkmkstart AAAAAAABKL}{\bkmkend AAAAAAABKL}
00452 \{\par
{\bkmkstart AAAAAAABKM}{\bkmkend AAAAAAABKM}
00453         {\cf19 return} Q_strncasecmp (s1, s2, 99999);\par
{\bkmkstart AAAAAAABKN}{\bkmkend AAAAAAABKN}
00454 \}\par
{\bkmkstart AAAAAAABKO}{\bkmkend AAAAAAABKO}
00455 \par
{\bkmkstart AAAAAAABKP}{\bkmkend AAAAAAABKP}
00456 \par
{\bkmkstart AAAAAAABKQ}{\bkmkend AAAAAAABKQ}
00457 {\cf18 char} *strupr ({\cf18 char} *start)\par
{\bkmkstart AAAAAAABKR}{\bkmkend AAAAAAABKR}
00458 \{\par
{\bkmkstart AAAAAAABKS}{\bkmkend AAAAAAABKS}
00459         {\cf18 char}    *in;\par
{\bkmkstart AAAAAAABKT}{\bkmkend AAAAAAABKT}
00460         in = start;\par
{\bkmkstart AAAAAAABKU}{\bkmkend AAAAAAABKU}
00461         {\cf19 while} (*in)\par
{\bkmkstart AAAAAAABKV}{\bkmkend AAAAAAABKV}
00462         \{\par
{\bkmkstart AAAAAAABKW}{\bkmkend AAAAAAABKW}
00463                 *in = toupper(*in);\par
{\bkmkstart AAAAAAABKX}{\bkmkend AAAAAAABKX}
00464                 in++;\par
{\bkmkstart AAAAAAABKY}{\bkmkend AAAAAAABKY}
00465         \}\par
{\bkmkstart AAAAAAABKZ}{\bkmkend AAAAAAABKZ}
00466         {\cf19 return} start;\par
{\bkmkstart AAAAAAABLA}{\bkmkend AAAAAAABLA}
00467 \}\par
{\bkmkstart AAAAAAABLB}{\bkmkend AAAAAAABLB}
00468 \par
{\bkmkstart AAAAAAABLC}{\bkmkend AAAAAAABLC}
00469 {\cf18 char} *strlower ({\cf18 char} *start)\par
{\bkmkstart AAAAAAABLD}{\bkmkend AAAAAAABLD}
00470 \{\par
{\bkmkstart AAAAAAABLE}{\bkmkend AAAAAAABLE}
00471         {\cf18 char}    *in;\par
{\bkmkstart AAAAAAABLF}{\bkmkend AAAAAAABLF}
00472         in = start;\par
{\bkmkstart AAAAAAABLG}{\bkmkend AAAAAAABLG}
00473         {\cf19 while} (*in)\par
{\bkmkstart AAAAAAABLH}{\bkmkend AAAAAAABLH}
00474         \{\par
{\bkmkstart AAAAAAABLI}{\bkmkend AAAAAAABLI}
00475                 *in = tolower(*in);\par
{\bkmkstart AAAAAAABLJ}{\bkmkend AAAAAAABLJ}
00476                 in++;\par
{\bkmkstart AAAAAAABLK}{\bkmkend AAAAAAABLK}
00477         \}\par
{\bkmkstart AAAAAAABLL}{\bkmkend AAAAAAABLL}
00478         {\cf19 return} start;\par
{\bkmkstart AAAAAAABLM}{\bkmkend AAAAAAABLM}
00479 \}\par
{\bkmkstart AAAAAAABLN}{\bkmkend AAAAAAABLN}
00480 \par
{\bkmkstart AAAAAAABLO}{\bkmkend AAAAAAABLO}
00481 \par
{\bkmkstart AAAAAAABLP}{\bkmkend AAAAAAABLP}
00482 {\cf20 /*}\par
{\bkmkstart AAAAAAABLQ}{\bkmkend AAAAAAABLQ}
00483 {\cf20 =============================================================================}\par
{\bkmkstart AAAAAAABLR}{\bkmkend AAAAAAABLR}
00484 {\cf20 }\par
{\bkmkstart AAAAAAABLS}{\bkmkend AAAAAAABLS}
00485 {\cf20                                                 MISC FUNCTIONS}\par
{\bkmkstart AAAAAAABLT}{\bkmkend AAAAAAABLT}
00486 {\cf20 }\par
{\bkmkstart AAAAAAABLU}{\bkmkend AAAAAAABLU}
00487 {\cf20 =============================================================================}\par
{\bkmkstart AAAAAAABLV}{\bkmkend AAAAAAABLV}
00488 {\cf20 */}\par
{\bkmkstart AAAAAAABLW}{\bkmkend AAAAAAABLW}
00489 \par
{\bkmkstart AAAAAAABLX}{\bkmkend AAAAAAABLX}
00490 \par
{\bkmkstart AAAAAAABLY}{\bkmkend AAAAAAABLY}
00491 {\cf20 /*}\par
{\bkmkstart AAAAAAABLZ}{\bkmkend AAAAAAABLZ}
00492 {\cf20 =================}\par
{\bkmkstart AAAAAAABMA}{\bkmkend AAAAAAABMA}
00493 {\cf20 CheckParm}\par
{\bkmkstart AAAAAAABMB}{\bkmkend AAAAAAABMB}
00494 {\cf20 }\par
{\bkmkstart AAAAAAABMC}{\bkmkend AAAAAAABMC}
00495 {\cf20 Checks for the given parameter in the program's command line arguments}\par
{\bkmkstart AAAAAAABMD}{\bkmkend AAAAAAABMD}
00496 {\cf20 Returns the argument number (1 to argc-1) or 0 if not present}\par
{\bkmkstart AAAAAAABME}{\bkmkend AAAAAAABME}
00497 {\cf20 =================}\par
{\bkmkstart AAAAAAABMF}{\bkmkend AAAAAAABMF}
00498 {\cf20 */}\par
{\bkmkstart AAAAAAABMG}{\bkmkend AAAAAAABMG}
00499 {\cf18 int} CheckParm ({\cf18 char} *check)\par
{\bkmkstart AAAAAAABMH}{\bkmkend AAAAAAABMH}
00500 \{\par
{\bkmkstart AAAAAAABMI}{\bkmkend AAAAAAABMI}
00501         {\cf18 int}             i;\par
{\bkmkstart AAAAAAABMJ}{\bkmkend AAAAAAABMJ}
00502 \par
{\bkmkstart AAAAAAABMK}{\bkmkend AAAAAAABMK}
00503         {\cf19 for} (i = 1;i<myargc;i++)\par
{\bkmkstart AAAAAAABML}{\bkmkend AAAAAAABML}
00504         \{\par
{\bkmkstart AAAAAAABMM}{\bkmkend AAAAAAABMM}
00505                 {\cf19 if} ( !Q_strcasecmp(check, myargv[i]) )\par
{\bkmkstart AAAAAAABMN}{\bkmkend AAAAAAABMN}
00506                         {\cf19 return} i;\par
{\bkmkstart AAAAAAABMO}{\bkmkend AAAAAAABMO}
00507         \}\par
{\bkmkstart AAAAAAABMP}{\bkmkend AAAAAAABMP}
00508 \par
{\bkmkstart AAAAAAABMQ}{\bkmkend AAAAAAABMQ}
00509         {\cf19 return} 0;\par
{\bkmkstart AAAAAAABMR}{\bkmkend AAAAAAABMR}
00510 \}\par
{\bkmkstart AAAAAAABMS}{\bkmkend AAAAAAABMS}
00511 \par
{\bkmkstart AAAAAAABMT}{\bkmkend AAAAAAABMT}
00512 \par
{\bkmkstart AAAAAAABMU}{\bkmkend AAAAAAABMU}
00513 \par
{\bkmkstart AAAAAAABMV}{\bkmkend AAAAAAABMV}
00514 {\cf20 /*}\par
{\bkmkstart AAAAAAABMW}{\bkmkend AAAAAAABMW}
00515 {\cf20 ================}\par
{\bkmkstart AAAAAAABMX}{\bkmkend AAAAAAABMX}
00516 {\cf20 Q_filelength}\par
{\bkmkstart AAAAAAABMY}{\bkmkend AAAAAAABMY}
00517 {\cf20 ================}\par
{\bkmkstart AAAAAAABMZ}{\bkmkend AAAAAAABMZ}
00518 {\cf20 */}\par
{\bkmkstart AAAAAAABNA}{\bkmkend AAAAAAABNA}
00519 {\cf18 int} Q_filelength (FILE *f)\par
{\bkmkstart AAAAAAABNB}{\bkmkend AAAAAAABNB}
00520 \{\par
{\bkmkstart AAAAAAABNC}{\bkmkend AAAAAAABNC}
00521         {\cf18 int}             pos;\par
{\bkmkstart AAAAAAABND}{\bkmkend AAAAAAABND}
00522         {\cf18 int}             end;\par
{\bkmkstart AAAAAAABNE}{\bkmkend AAAAAAABNE}
00523 \par
{\bkmkstart AAAAAAABNF}{\bkmkend AAAAAAABNF}
00524         pos = ftell (f);\par
{\bkmkstart AAAAAAABNG}{\bkmkend AAAAAAABNG}
00525         fseek (f, 0, SEEK_END);\par
{\bkmkstart AAAAAAABNH}{\bkmkend AAAAAAABNH}
00526         end = ftell (f);\par
{\bkmkstart AAAAAAABNI}{\bkmkend AAAAAAABNI}
00527         fseek (f, pos, SEEK_SET);\par
{\bkmkstart AAAAAAABNJ}{\bkmkend AAAAAAABNJ}
00528 \par
{\bkmkstart AAAAAAABNK}{\bkmkend AAAAAAABNK}
00529         {\cf19 return} end;\par
{\bkmkstart AAAAAAABNL}{\bkmkend AAAAAAABNL}
00530 \}\par
{\bkmkstart AAAAAAABNM}{\bkmkend AAAAAAABNM}
00531 \par
{\bkmkstart AAAAAAABNN}{\bkmkend AAAAAAABNN}
00532 \par
{\bkmkstart AAAAAAABNO}{\bkmkend AAAAAAABNO}
00533 FILE *SafeOpenWrite ({\cf18 char} *filename)\par
{\bkmkstart AAAAAAABNP}{\bkmkend AAAAAAABNP}
00534 \{\par
{\bkmkstart AAAAAAABNQ}{\bkmkend AAAAAAABNQ}
00535         FILE    *f;\par
{\bkmkstart AAAAAAABNR}{\bkmkend AAAAAAABNR}
00536 \par
{\bkmkstart AAAAAAABNS}{\bkmkend AAAAAAABNS}
00537         f = fopen(filename, {\cf22 "wb"});\par
{\bkmkstart AAAAAAABNT}{\bkmkend AAAAAAABNT}
00538 \par
{\bkmkstart AAAAAAABNU}{\bkmkend AAAAAAABNU}
00539         {\cf19 if} (!f)\par
{\bkmkstart AAAAAAABNV}{\bkmkend AAAAAAABNV}
00540                 Error ({\cf22 "Error opening %s: %s"},filename,strerror(errno));\par
{\bkmkstart AAAAAAABNW}{\bkmkend AAAAAAABNW}
00541 \par
{\bkmkstart AAAAAAABNX}{\bkmkend AAAAAAABNX}
00542         {\cf19 return} f;\par
{\bkmkstart AAAAAAABNY}{\bkmkend AAAAAAABNY}
00543 \}\par
{\bkmkstart AAAAAAABNZ}{\bkmkend AAAAAAABNZ}
00544 \par
{\bkmkstart AAAAAAABOA}{\bkmkend AAAAAAABOA}
00545 FILE *SafeOpenRead ({\cf18 char} *filename)\par
{\bkmkstart AAAAAAABOB}{\bkmkend AAAAAAABOB}
00546 \{\par
{\bkmkstart AAAAAAABOC}{\bkmkend AAAAAAABOC}
00547         FILE    *f;\par
{\bkmkstart AAAAAAABOD}{\bkmkend AAAAAAABOD}
00548 \par
{\bkmkstart AAAAAAABOE}{\bkmkend AAAAAAABOE}
00549         f = fopen(filename, {\cf22 "rb"});\par
{\bkmkstart AAAAAAABOF}{\bkmkend AAAAAAABOF}
00550 \par
{\bkmkstart AAAAAAABOG}{\bkmkend AAAAAAABOG}
00551         {\cf19 if} (!f)\par
{\bkmkstart AAAAAAABOH}{\bkmkend AAAAAAABOH}
00552                 Error ({\cf22 "Error opening %s: %s"},filename,strerror(errno));\par
{\bkmkstart AAAAAAABOI}{\bkmkend AAAAAAABOI}
00553 \par
{\bkmkstart AAAAAAABOJ}{\bkmkend AAAAAAABOJ}
00554         {\cf19 return} f;\par
{\bkmkstart AAAAAAABOK}{\bkmkend AAAAAAABOK}
00555 \}\par
{\bkmkstart AAAAAAABOL}{\bkmkend AAAAAAABOL}
00556 \par
{\bkmkstart AAAAAAABOM}{\bkmkend AAAAAAABOM}
00557 \par
{\bkmkstart AAAAAAABON}{\bkmkend AAAAAAABON}
00558 {\cf18 void} SafeRead (FILE *f, {\cf18 void} *buffer, {\cf18 int} count)\par
{\bkmkstart AAAAAAABOO}{\bkmkend AAAAAAABOO}
00559 \{\par
{\bkmkstart AAAAAAABOP}{\bkmkend AAAAAAABOP}
00560         {\cf19 if} ( fread (buffer, 1, count, f) != ({\cf18 size_t})count)\par
{\bkmkstart AAAAAAABOQ}{\bkmkend AAAAAAABOQ}
00561                 Error ({\cf22 "File read failure"});\par
{\bkmkstart AAAAAAABOR}{\bkmkend AAAAAAABOR}
00562 \}\par
{\bkmkstart AAAAAAABOS}{\bkmkend AAAAAAABOS}
00563 \par
{\bkmkstart AAAAAAABOT}{\bkmkend AAAAAAABOT}
00564 \par
{\bkmkstart AAAAAAABOU}{\bkmkend AAAAAAABOU}
00565 {\cf18 void} SafeWrite (FILE *f, {\cf18 void} *buffer, {\cf18 int} count)\par
{\bkmkstart AAAAAAABOV}{\bkmkend AAAAAAABOV}
00566 \{\par
{\bkmkstart AAAAAAABOW}{\bkmkend AAAAAAABOW}
00567         {\cf19 if} (fwrite (buffer, 1, count, f) != ({\cf18 size_t})count)\par
{\bkmkstart AAAAAAABOX}{\bkmkend AAAAAAABOX}
00568                 Error ({\cf22 "File read failure"});\par
{\bkmkstart AAAAAAABOY}{\bkmkend AAAAAAABOY}
00569 \}\par
{\bkmkstart AAAAAAABOZ}{\bkmkend AAAAAAABOZ}
00570 \par
{\bkmkstart AAAAAAABPA}{\bkmkend AAAAAAABPA}
00571 \par
{\bkmkstart AAAAAAABPB}{\bkmkend AAAAAAABPB}
00572 \par
{\bkmkstart AAAAAAABPC}{\bkmkend AAAAAAABPC}
00573 {\cf20 /*}\par
{\bkmkstart AAAAAAABPD}{\bkmkend AAAAAAABPD}
00574 {\cf20 ==============}\par
{\bkmkstart AAAAAAABPE}{\bkmkend AAAAAAABPE}
00575 {\cf20 LoadFile}\par
{\bkmkstart AAAAAAABPF}{\bkmkend AAAAAAABPF}
00576 {\cf20 ==============}\par
{\bkmkstart AAAAAAABPG}{\bkmkend AAAAAAABPG}
00577 {\cf20 */}\par
{\bkmkstart AAAAAAABPH}{\bkmkend AAAAAAABPH}
00578 {\cf18 int}    LoadFile ({\cf18 char} *filename, {\cf18 void} **bufferptr)\par
{\bkmkstart AAAAAAABPI}{\bkmkend AAAAAAABPI}
00579 \{\par
{\bkmkstart AAAAAAABPJ}{\bkmkend AAAAAAABPJ}
00580         FILE    *f;\par
{\bkmkstart AAAAAAABPK}{\bkmkend AAAAAAABPK}
00581         {\cf18 int}    length;\par
{\bkmkstart AAAAAAABPL}{\bkmkend AAAAAAABPL}
00582         {\cf18 void}    *buffer;\par
{\bkmkstart AAAAAAABPM}{\bkmkend AAAAAAABPM}
00583 \par
{\bkmkstart AAAAAAABPN}{\bkmkend AAAAAAABPN}
00584         f = SafeOpenRead (filename);\par
{\bkmkstart AAAAAAABPO}{\bkmkend AAAAAAABPO}
00585         length = Q_filelength (f);\par
{\bkmkstart AAAAAAABPP}{\bkmkend AAAAAAABPP}
00586         buffer = malloc (length+1);\par
{\bkmkstart AAAAAAABPQ}{\bkmkend AAAAAAABPQ}
00587         (({\cf18 char} *)buffer)[length] = 0;\par
{\bkmkstart AAAAAAABPR}{\bkmkend AAAAAAABPR}
00588         SafeRead (f, buffer, length);\par
{\bkmkstart AAAAAAABPS}{\bkmkend AAAAAAABPS}
00589         fclose (f);\par
{\bkmkstart AAAAAAABPT}{\bkmkend AAAAAAABPT}
00590 \par
{\bkmkstart AAAAAAABPU}{\bkmkend AAAAAAABPU}
00591         *bufferptr = buffer;\par
{\bkmkstart AAAAAAABPV}{\bkmkend AAAAAAABPV}
00592         {\cf19 return} length;\par
{\bkmkstart AAAAAAABPW}{\bkmkend AAAAAAABPW}
00593 \}\par
{\bkmkstart AAAAAAABPX}{\bkmkend AAAAAAABPX}
00594 \par
{\bkmkstart AAAAAAABPY}{\bkmkend AAAAAAABPY}
00595 \par
{\bkmkstart AAAAAAABPZ}{\bkmkend AAAAAAABPZ}
00596 {\cf20 /*}\par
{\bkmkstart AAAAAAABQA}{\bkmkend AAAAAAABQA}
00597 {\cf20 ==============}\par
{\bkmkstart AAAAAAABQB}{\bkmkend AAAAAAABQB}
00598 {\cf20 SaveFile}\par
{\bkmkstart AAAAAAABQC}{\bkmkend AAAAAAABQC}
00599 {\cf20 ==============}\par
{\bkmkstart AAAAAAABQD}{\bkmkend AAAAAAABQD}
00600 {\cf20 */}\par
{\bkmkstart AAAAAAABQE}{\bkmkend AAAAAAABQE}
00601 {\cf18 void}    SaveFile ({\cf18 char} *filename, {\cf18 void} *buffer, {\cf18 int} count)\par
{\bkmkstart AAAAAAABQF}{\bkmkend AAAAAAABQF}
00602 \{\par
{\bkmkstart AAAAAAABQG}{\bkmkend AAAAAAABQG}
00603         FILE    *f;\par
{\bkmkstart AAAAAAABQH}{\bkmkend AAAAAAABQH}
00604 \par
{\bkmkstart AAAAAAABQI}{\bkmkend AAAAAAABQI}
00605         f = SafeOpenWrite (filename);\par
{\bkmkstart AAAAAAABQJ}{\bkmkend AAAAAAABQJ}
00606         SafeWrite (f, buffer, count);\par
{\bkmkstart AAAAAAABQK}{\bkmkend AAAAAAABQK}
00607         fclose (f);\par
{\bkmkstart AAAAAAABQL}{\bkmkend AAAAAAABQL}
00608 \}\par
{\bkmkstart AAAAAAABQM}{\bkmkend AAAAAAABQM}
00609 \par
{\bkmkstart AAAAAAABQN}{\bkmkend AAAAAAABQN}
00610 \par
{\bkmkstart AAAAAAABQO}{\bkmkend AAAAAAABQO}
00611 \par
{\bkmkstart AAAAAAABQP}{\bkmkend AAAAAAABQP}
00612 {\cf18 void} DefaultExtension ({\cf18 char} *path, {\cf18 char} *extension)\par
{\bkmkstart AAAAAAABQQ}{\bkmkend AAAAAAABQQ}
00613 \{\par
{\bkmkstart AAAAAAABQR}{\bkmkend AAAAAAABQR}
00614         {\cf18 char}    *src;\par
{\bkmkstart AAAAAAABQS}{\bkmkend AAAAAAABQS}
00615 {\cf20 /*}\par
{\bkmkstart AAAAAAABQT}{\bkmkend AAAAAAABQT}
00616 {\cf20 // if path doesn't have a .EXT, append extension}\par
{\bkmkstart AAAAAAABQU}{\bkmkend AAAAAAABQU}
00617 {\cf20 // (extension should include the .)}\par
{\bkmkstart AAAAAAABQV}{\bkmkend AAAAAAABQV}
00618 {\cf20 */}\par
{\bkmkstart AAAAAAABQW}{\bkmkend AAAAAAABQW}
00619         src = path + strlen(path) - 1;\par
{\bkmkstart AAAAAAABQX}{\bkmkend AAAAAAABQX}
00620 \par
{\bkmkstart AAAAAAABQY}{\bkmkend AAAAAAABQY}
00621         {\cf19 while} (!PATHSEPARATOR(*src) && src != path)\par
{\bkmkstart AAAAAAABQZ}{\bkmkend AAAAAAABQZ}
00622         \{\par
{\bkmkstart AAAAAAABRA}{\bkmkend AAAAAAABRA}
00623                 {\cf19 if} (*src == {\cf23 '.'})\par
{\bkmkstart AAAAAAABRB}{\bkmkend AAAAAAABRB}
00624                         {\cf19 return};                 {\cf20 /* it has an extension */}\par
{\bkmkstart AAAAAAABRC}{\bkmkend AAAAAAABRC}
00625                 src--;\par
{\bkmkstart AAAAAAABRD}{\bkmkend AAAAAAABRD}
00626         \}\par
{\bkmkstart AAAAAAABRE}{\bkmkend AAAAAAABRE}
00627 \par
{\bkmkstart AAAAAAABRF}{\bkmkend AAAAAAABRF}
00628         strcat (path, extension);\par
{\bkmkstart AAAAAAABRG}{\bkmkend AAAAAAABRG}
00629 \}\par
{\bkmkstart AAAAAAABRH}{\bkmkend AAAAAAABRH}
00630 \par
{\bkmkstart AAAAAAABRI}{\bkmkend AAAAAAABRI}
00631 \par
{\bkmkstart AAAAAAABRJ}{\bkmkend AAAAAAABRJ}
00632 {\cf18 void} DefaultPath ({\cf18 char} *path, {\cf18 char} *basepath)\par
{\bkmkstart AAAAAAABRK}{\bkmkend AAAAAAABRK}
00633 \{\par
{\bkmkstart AAAAAAABRL}{\bkmkend AAAAAAABRL}
00634         {\cf18 char}    temp[128];\par
{\bkmkstart AAAAAAABRM}{\bkmkend AAAAAAABRM}
00635 \par
{\bkmkstart AAAAAAABRN}{\bkmkend AAAAAAABRN}
00636         {\cf19 if} (PATHSEPARATOR(path[0]))\par
{\bkmkstart AAAAAAABRO}{\bkmkend AAAAAAABRO}
00637                 {\cf19 return};                   {\cf20 /* absolute path location */}\par
{\bkmkstart AAAAAAABRP}{\bkmkend AAAAAAABRP}
00638         strcpy (temp,path);\par
{\bkmkstart AAAAAAABRQ}{\bkmkend AAAAAAABRQ}
00639         strcpy (path,basepath);\par
{\bkmkstart AAAAAAABRR}{\bkmkend AAAAAAABRR}
00640         strcat (path,temp);\par
{\bkmkstart AAAAAAABRS}{\bkmkend AAAAAAABRS}
00641 \}\par
{\bkmkstart AAAAAAABRT}{\bkmkend AAAAAAABRT}
00642 \par
{\bkmkstart AAAAAAABRU}{\bkmkend AAAAAAABRU}
00643 \par
{\bkmkstart AAAAAAABRV}{\bkmkend AAAAAAABRV}
00644 {\cf18 void}    StripFilename ({\cf18 char} *path)\par
{\bkmkstart AAAAAAABRW}{\bkmkend AAAAAAABRW}
00645 \{\par
{\bkmkstart AAAAAAABRX}{\bkmkend AAAAAAABRX}
00646         {\cf18 int}             length;\par
{\bkmkstart AAAAAAABRY}{\bkmkend AAAAAAABRY}
00647 \par
{\bkmkstart AAAAAAABRZ}{\bkmkend AAAAAAABRZ}
00648         length = strlen(path)-1;\par
{\bkmkstart AAAAAAABSA}{\bkmkend AAAAAAABSA}
00649         {\cf19 while} (length > 0 && !PATHSEPARATOR(path[length]))\par
{\bkmkstart AAAAAAABSB}{\bkmkend AAAAAAABSB}
00650                 length--;\par
{\bkmkstart AAAAAAABSC}{\bkmkend AAAAAAABSC}
00651         path[length] = 0;\par
{\bkmkstart AAAAAAABSD}{\bkmkend AAAAAAABSD}
00652 \}\par
{\bkmkstart AAAAAAABSE}{\bkmkend AAAAAAABSE}
00653 \par
{\bkmkstart AAAAAAABSF}{\bkmkend AAAAAAABSF}
00654 {\cf18 void}    StripExtension ({\cf18 char} *path)\par
{\bkmkstart AAAAAAABSG}{\bkmkend AAAAAAABSG}
00655 \{\par
{\bkmkstart AAAAAAABSH}{\bkmkend AAAAAAABSH}
00656         {\cf18 int}             length;\par
{\bkmkstart AAAAAAABSI}{\bkmkend AAAAAAABSI}
00657 \par
{\bkmkstart AAAAAAABSJ}{\bkmkend AAAAAAABSJ}
00658         length = strlen(path)-1;\par
{\bkmkstart AAAAAAABSK}{\bkmkend AAAAAAABSK}
00659         {\cf19 while} (length > 0 && path[length] != {\cf23 '.'})\par
{\bkmkstart AAAAAAABSL}{\bkmkend AAAAAAABSL}
00660         \{\par
{\bkmkstart AAAAAAABSM}{\bkmkend AAAAAAABSM}
00661                 length--;\par
{\bkmkstart AAAAAAABSN}{\bkmkend AAAAAAABSN}
00662                 {\cf19 if} (path[length] == {\cf23 '/'})\par
{\bkmkstart AAAAAAABSO}{\bkmkend AAAAAAABSO}
00663                         {\cf19 return};         {\cf20 /* no extension */}\par
{\bkmkstart AAAAAAABSP}{\bkmkend AAAAAAABSP}
00664         \}\par
{\bkmkstart AAAAAAABSQ}{\bkmkend AAAAAAABSQ}
00665         {\cf19 if} (length)\par
{\bkmkstart AAAAAAABSR}{\bkmkend AAAAAAABSR}
00666                 path[length] = 0;\par
{\bkmkstart AAAAAAABSS}{\bkmkend AAAAAAABSS}
00667 \}\par
{\bkmkstart AAAAAAABST}{\bkmkend AAAAAAABST}
00668 \par
{\bkmkstart AAAAAAABSU}{\bkmkend AAAAAAABSU}
00669 \par
{\bkmkstart AAAAAAABSV}{\bkmkend AAAAAAABSV}
00670 {\cf20 /*}\par
{\bkmkstart AAAAAAABSW}{\bkmkend AAAAAAABSW}
00671 {\cf20 ====================}\par
{\bkmkstart AAAAAAABSX}{\bkmkend AAAAAAABSX}
00672 {\cf20 Extract file parts}\par
{\bkmkstart AAAAAAABSY}{\bkmkend AAAAAAABSY}
00673 {\cf20 ====================}\par
{\bkmkstart AAAAAAABSZ}{\bkmkend AAAAAAABSZ}
00674 {\cf20 */}\par
{\bkmkstart AAAAAAABTA}{\bkmkend AAAAAAABTA}
00675 {\cf18 void} ExtractFilePath ({\cf18 char} *path, {\cf18 char} *dest)\par
{\bkmkstart AAAAAAABTB}{\bkmkend AAAAAAABTB}
00676 \{\par
{\bkmkstart AAAAAAABTC}{\bkmkend AAAAAAABTC}
00677         {\cf18 char}    *src;\par
{\bkmkstart AAAAAAABTD}{\bkmkend AAAAAAABTD}
00678 \par
{\bkmkstart AAAAAAABTE}{\bkmkend AAAAAAABTE}
00679         src = path + strlen(path) - 1;\par
{\bkmkstart AAAAAAABTF}{\bkmkend AAAAAAABTF}
00680 \par
{\bkmkstart AAAAAAABTG}{\bkmkend AAAAAAABTG}
00681 {\cf20 /*}\par
{\bkmkstart AAAAAAABTH}{\bkmkend AAAAAAABTH}
00682 {\cf20 // back up until a \\ or the start}\par
{\bkmkstart AAAAAAABTI}{\bkmkend AAAAAAABTI}
00683 {\cf20 */}\par
{\bkmkstart AAAAAAABTJ}{\bkmkend AAAAAAABTJ}
00684         {\cf19 while} (src != path && !PATHSEPARATOR(*(src-1)))\par
{\bkmkstart AAAAAAABTK}{\bkmkend AAAAAAABTK}
00685                 src--;\par
{\bkmkstart AAAAAAABTL}{\bkmkend AAAAAAABTL}
00686 \par
{\bkmkstart AAAAAAABTM}{\bkmkend AAAAAAABTM}
00687         memcpy (dest, path, src-path);\par
{\bkmkstart AAAAAAABTN}{\bkmkend AAAAAAABTN}
00688         dest[src-path] = 0;\par
{\bkmkstart AAAAAAABTO}{\bkmkend AAAAAAABTO}
00689 \}\par
{\bkmkstart AAAAAAABTP}{\bkmkend AAAAAAABTP}
00690 \par
{\bkmkstart AAAAAAABTQ}{\bkmkend AAAAAAABTQ}
00691 {\cf18 void} ExtractFileBase ({\cf18 char} *path, {\cf18 char} *dest)\par
{\bkmkstart AAAAAAABTR}{\bkmkend AAAAAAABTR}
00692 \{\par
{\bkmkstart AAAAAAABTS}{\bkmkend AAAAAAABTS}
00693         {\cf18 char}    *src;\par
{\bkmkstart AAAAAAABTT}{\bkmkend AAAAAAABTT}
00694 \par
{\bkmkstart AAAAAAABTU}{\bkmkend AAAAAAABTU}
00695         src = path + strlen(path) - 1;\par
{\bkmkstart AAAAAAABTV}{\bkmkend AAAAAAABTV}
00696 \par
{\bkmkstart AAAAAAABTW}{\bkmkend AAAAAAABTW}
00697 {\cf20 /*}\par
{\bkmkstart AAAAAAABTX}{\bkmkend AAAAAAABTX}
00698 {\cf20 // back up until a \\ or the start}\par
{\bkmkstart AAAAAAABTY}{\bkmkend AAAAAAABTY}
00699 {\cf20 */}\par
{\bkmkstart AAAAAAABTZ}{\bkmkend AAAAAAABTZ}
00700         {\cf19 while} (src != path && !PATHSEPARATOR(*(src-1)))\par
{\bkmkstart AAAAAAABUA}{\bkmkend AAAAAAABUA}
00701                 src--;\par
{\bkmkstart AAAAAAABUB}{\bkmkend AAAAAAABUB}
00702 \par
{\bkmkstart AAAAAAABUC}{\bkmkend AAAAAAABUC}
00703         {\cf19 while} (*src && *src != {\cf23 '.'})\par
{\bkmkstart AAAAAAABUD}{\bkmkend AAAAAAABUD}
00704         \{\par
{\bkmkstart AAAAAAABUE}{\bkmkend AAAAAAABUE}
00705                 *dest++ = *src++;\par
{\bkmkstart AAAAAAABUF}{\bkmkend AAAAAAABUF}
00706         \}\par
{\bkmkstart AAAAAAABUG}{\bkmkend AAAAAAABUG}
00707         *dest = 0;\par
{\bkmkstart AAAAAAABUH}{\bkmkend AAAAAAABUH}
00708 \}\par
{\bkmkstart AAAAAAABUI}{\bkmkend AAAAAAABUI}
00709 \par
{\bkmkstart AAAAAAABUJ}{\bkmkend AAAAAAABUJ}
00710 {\cf18 void} ExtractFileExtension ({\cf18 char} *path, {\cf18 char} *dest)\par
{\bkmkstart AAAAAAABUK}{\bkmkend AAAAAAABUK}
00711 \{\par
{\bkmkstart AAAAAAABUL}{\bkmkend AAAAAAABUL}
00712         {\cf18 char}    *src;\par
{\bkmkstart AAAAAAABUM}{\bkmkend AAAAAAABUM}
00713 \par
{\bkmkstart AAAAAAABUN}{\bkmkend AAAAAAABUN}
00714         src = path + strlen(path) - 1;\par
{\bkmkstart AAAAAAABUO}{\bkmkend AAAAAAABUO}
00715 \par
{\bkmkstart AAAAAAABUP}{\bkmkend AAAAAAABUP}
00716 {\cf20 /*}\par
{\bkmkstart AAAAAAABUQ}{\bkmkend AAAAAAABUQ}
00717 {\cf20 // back up until a . or the start}\par
{\bkmkstart AAAAAAABUR}{\bkmkend AAAAAAABUR}
00718 {\cf20 */}\par
{\bkmkstart AAAAAAABUS}{\bkmkend AAAAAAABUS}
00719         {\cf19 while} (src != path && *(src-1) != {\cf23 '.'})\par
{\bkmkstart AAAAAAABUT}{\bkmkend AAAAAAABUT}
00720                 src--;\par
{\bkmkstart AAAAAAABUU}{\bkmkend AAAAAAABUU}
00721         {\cf19 if} (src == path)\par
{\bkmkstart AAAAAAABUV}{\bkmkend AAAAAAABUV}
00722         \{\par
{\bkmkstart AAAAAAABUW}{\bkmkend AAAAAAABUW}
00723                 *dest = 0;      {\cf20 /* no extension */}\par
{\bkmkstart AAAAAAABUX}{\bkmkend AAAAAAABUX}
00724                 {\cf19 return};\par
{\bkmkstart AAAAAAABUY}{\bkmkend AAAAAAABUY}
00725         \}\par
{\bkmkstart AAAAAAABUZ}{\bkmkend AAAAAAABUZ}
00726 \par
{\bkmkstart AAAAAAABVA}{\bkmkend AAAAAAABVA}
00727         strcpy (dest,src);\par
{\bkmkstart AAAAAAABVB}{\bkmkend AAAAAAABVB}
00728 \}\par
{\bkmkstart AAAAAAABVC}{\bkmkend AAAAAAABVC}
00729 \par
{\bkmkstart AAAAAAABVD}{\bkmkend AAAAAAABVD}
00730 \par
{\bkmkstart AAAAAAABVE}{\bkmkend AAAAAAABVE}
00731 {\cf20 /*}\par
{\bkmkstart AAAAAAABVF}{\bkmkend AAAAAAABVF}
00732 {\cf20 ==============}\par
{\bkmkstart AAAAAAABVG}{\bkmkend AAAAAAABVG}
00733 {\cf20 ParseNum / ParseHex}\par
{\bkmkstart AAAAAAABVH}{\bkmkend AAAAAAABVH}
00734 {\cf20 ==============}\par
{\bkmkstart AAAAAAABVI}{\bkmkend AAAAAAABVI}
00735 {\cf20 */}\par
{\bkmkstart AAAAAAABVJ}{\bkmkend AAAAAAABVJ}
00736 {\cf18 int} ParseHex ({\cf18 char} *hex)\par
{\bkmkstart AAAAAAABVK}{\bkmkend AAAAAAABVK}
00737 \{\par
{\bkmkstart AAAAAAABVL}{\bkmkend AAAAAAABVL}
00738         {\cf18 char}    *str;\par
{\bkmkstart AAAAAAABVM}{\bkmkend AAAAAAABVM}
00739         {\cf18 int}    num;\par
{\bkmkstart AAAAAAABVN}{\bkmkend AAAAAAABVN}
00740 \par
{\bkmkstart AAAAAAABVO}{\bkmkend AAAAAAABVO}
00741         num = 0;\par
{\bkmkstart AAAAAAABVP}{\bkmkend AAAAAAABVP}
00742         str = hex;\par
{\bkmkstart AAAAAAABVQ}{\bkmkend AAAAAAABVQ}
00743 \par
{\bkmkstart AAAAAAABVR}{\bkmkend AAAAAAABVR}
00744         {\cf19 while} (*str)\par
{\bkmkstart AAAAAAABVS}{\bkmkend AAAAAAABVS}
00745         \{\par
{\bkmkstart AAAAAAABVT}{\bkmkend AAAAAAABVT}
00746                 num <<= 4;\par
{\bkmkstart AAAAAAABVU}{\bkmkend AAAAAAABVU}
00747                 {\cf19 if} (*str >= {\cf23 '0'} && *str <= {\cf23 '9'})\par
{\bkmkstart AAAAAAABVV}{\bkmkend AAAAAAABVV}
00748                         num += *str-{\cf23 '0'};\par
{\bkmkstart AAAAAAABVW}{\bkmkend AAAAAAABVW}
00749                 {\cf19 else} {\cf19 if} (*str >= {\cf23 'a'} && *str <= {\cf23 'f'})\par
{\bkmkstart AAAAAAABVX}{\bkmkend AAAAAAABVX}
00750                         num += 10 + *str-{\cf23 'a'};\par
{\bkmkstart AAAAAAABVY}{\bkmkend AAAAAAABVY}
00751                 {\cf19 else} {\cf19 if} (*str >= {\cf23 'A'} && *str <= {\cf23 'F'})\par
{\bkmkstart AAAAAAABVZ}{\bkmkend AAAAAAABVZ}
00752                         num += 10 + *str-{\cf23 'A'};\par
{\bkmkstart AAAAAAABWA}{\bkmkend AAAAAAABWA}
00753                 {\cf19 else}\par
{\bkmkstart AAAAAAABWB}{\bkmkend AAAAAAABWB}
00754                         Error ({\cf22 "Bad hex number: %s"},hex);\par
{\bkmkstart AAAAAAABWC}{\bkmkend AAAAAAABWC}
00755                 str++;\par
{\bkmkstart AAAAAAABWD}{\bkmkend AAAAAAABWD}
00756         \}\par
{\bkmkstart AAAAAAABWE}{\bkmkend AAAAAAABWE}
00757 \par
{\bkmkstart AAAAAAABWF}{\bkmkend AAAAAAABWF}
00758         {\cf19 return} num;\par
{\bkmkstart AAAAAAABWG}{\bkmkend AAAAAAABWG}
00759 \}\par
{\bkmkstart AAAAAAABWH}{\bkmkend AAAAAAABWH}
00760 \par
{\bkmkstart AAAAAAABWI}{\bkmkend AAAAAAABWI}
00761 \par
{\bkmkstart AAAAAAABWJ}{\bkmkend AAAAAAABWJ}
00762 {\cf18 int} ParseNum ({\cf18 char} *str)\par
{\bkmkstart AAAAAAABWK}{\bkmkend AAAAAAABWK}
00763 \{\par
{\bkmkstart AAAAAAABWL}{\bkmkend AAAAAAABWL}
00764         {\cf19 if} (str[0] == {\cf23 '$'})\par
{\bkmkstart AAAAAAABWM}{\bkmkend AAAAAAABWM}
00765                 {\cf19 return} ParseHex (str+1);\par
{\bkmkstart AAAAAAABWN}{\bkmkend AAAAAAABWN}
00766         {\cf19 if} (str[0] == {\cf23 '0'} && str[1] == {\cf23 'x'})\par
{\bkmkstart AAAAAAABWO}{\bkmkend AAAAAAABWO}
00767                 {\cf19 return} ParseHex (str+2);\par
{\bkmkstart AAAAAAABWP}{\bkmkend AAAAAAABWP}
00768         {\cf19 return} atol (str);\par
{\bkmkstart AAAAAAABWQ}{\bkmkend AAAAAAABWQ}
00769 \}\par
{\bkmkstart AAAAAAABWR}{\bkmkend AAAAAAABWR}
00770 \par
{\bkmkstart AAAAAAABWS}{\bkmkend AAAAAAABWS}
00771 \par
{\bkmkstart AAAAAAABWT}{\bkmkend AAAAAAABWT}
00772 \par
{\bkmkstart AAAAAAABWU}{\bkmkend AAAAAAABWU}
00773 {\cf20 /*}\par
{\bkmkstart AAAAAAABWV}{\bkmkend AAAAAAABWV}
00774 {\cf20 ============================================================================}\par
{\bkmkstart AAAAAAABWW}{\bkmkend AAAAAAABWW}
00775 {\cf20 }\par
{\bkmkstart AAAAAAABWX}{\bkmkend AAAAAAABWX}
00776 {\cf20                                         BYTE ORDER FUNCTIONS}\par
{\bkmkstart AAAAAAABWY}{\bkmkend AAAAAAABWY}
00777 {\cf20 }\par
{\bkmkstart AAAAAAABWZ}{\bkmkend AAAAAAABWZ}
00778 {\cf20 ============================================================================}\par
{\bkmkstart AAAAAAABXA}{\bkmkend AAAAAAABXA}
00779 {\cf20 */}\par
{\bkmkstart AAAAAAABXB}{\bkmkend AAAAAAABXB}
00780 \par
{\bkmkstart AAAAAAABXC}{\bkmkend AAAAAAABXC}
00781 {\cf21 #ifdef _SGI_SOURCE}\par
{\bkmkstart AAAAAAABXD}{\bkmkend AAAAAAABXD}
00782 {\cf21 #define __BIG_ENDIAN__}\par
{\bkmkstart AAAAAAABXE}{\bkmkend AAAAAAABXE}
00783 {\cf21 #endif}\par
{\bkmkstart AAAAAAABXF}{\bkmkend AAAAAAABXF}
00784 \par
{\bkmkstart AAAAAAABXG}{\bkmkend AAAAAAABXG}
00785 {\cf21 #ifdef __BIG_ENDIAN__}\par
{\bkmkstart AAAAAAABXH}{\bkmkend AAAAAAABXH}
00786 \par
{\bkmkstart AAAAAAABXI}{\bkmkend AAAAAAABXI}
00787 {\cf18 short}   LittleShort ({\cf18 short} l)\par
{\bkmkstart AAAAAAABXJ}{\bkmkend AAAAAAABXJ}
00788 \{\par
{\bkmkstart AAAAAAABXK}{\bkmkend AAAAAAABXK}
00789         {\cf18 byte}    b1,b2;\par
{\bkmkstart AAAAAAABXL}{\bkmkend AAAAAAABXL}
00790 \par
{\bkmkstart AAAAAAABXM}{\bkmkend AAAAAAABXM}
00791         b1 = l&255;\par
{\bkmkstart AAAAAAABXN}{\bkmkend AAAAAAABXN}
00792         b2 = (l>>8)&255;\par
{\bkmkstart AAAAAAABXO}{\bkmkend AAAAAAABXO}
00793 \par
{\bkmkstart AAAAAAABXP}{\bkmkend AAAAAAABXP}
00794         {\cf19 return} (b1<<8) + b2;\par
{\bkmkstart AAAAAAABXQ}{\bkmkend AAAAAAABXQ}
00795 \}\par
{\bkmkstart AAAAAAABXR}{\bkmkend AAAAAAABXR}
00796 \par
{\bkmkstart AAAAAAABXS}{\bkmkend AAAAAAABXS}
00797 {\cf18 short}   BigShort ({\cf18 short} l)\par
{\bkmkstart AAAAAAABXT}{\bkmkend AAAAAAABXT}
00798 \{\par
{\bkmkstart AAAAAAABXU}{\bkmkend AAAAAAABXU}
00799         {\cf19 return} l;\par
{\bkmkstart AAAAAAABXV}{\bkmkend AAAAAAABXV}
00800 \}\par
{\bkmkstart AAAAAAABXW}{\bkmkend AAAAAAABXW}
00801 \par
{\bkmkstart AAAAAAABXX}{\bkmkend AAAAAAABXX}
00802 \par
{\bkmkstart AAAAAAABXY}{\bkmkend AAAAAAABXY}
00803 {\cf18 int}    LittleLong ({\cf18 int} l)\par
{\bkmkstart AAAAAAABXZ}{\bkmkend AAAAAAABXZ}
00804 \{\par
{\bkmkstart AAAAAAABYA}{\bkmkend AAAAAAABYA}
00805         {\cf18 byte}    b1,b2,b3,b4;\par
{\bkmkstart AAAAAAABYB}{\bkmkend AAAAAAABYB}
00806 \par
{\bkmkstart AAAAAAABYC}{\bkmkend AAAAAAABYC}
00807         b1 = l&255;\par
{\bkmkstart AAAAAAABYD}{\bkmkend AAAAAAABYD}
00808         b2 = (l>>8)&255;\par
{\bkmkstart AAAAAAABYE}{\bkmkend AAAAAAABYE}
00809         b3 = (l>>16)&255;\par
{\bkmkstart AAAAAAABYF}{\bkmkend AAAAAAABYF}
00810         b4 = (l>>24)&255;\par
{\bkmkstart AAAAAAABYG}{\bkmkend AAAAAAABYG}
00811 \par
{\bkmkstart AAAAAAABYH}{\bkmkend AAAAAAABYH}
00812         {\cf19 return} (({\cf18 int})b1<<24) + (({\cf18 int})b2<<16) + (({\cf18 int})b3<<8) + b4;\par
{\bkmkstart AAAAAAABYI}{\bkmkend AAAAAAABYI}
00813 \}\par
{\bkmkstart AAAAAAABYJ}{\bkmkend AAAAAAABYJ}
00814 \par
{\bkmkstart AAAAAAABYK}{\bkmkend AAAAAAABYK}
00815 {\cf18 int}    BigLong ({\cf18 int} l)\par
{\bkmkstart AAAAAAABYL}{\bkmkend AAAAAAABYL}
00816 \{\par
{\bkmkstart AAAAAAABYM}{\bkmkend AAAAAAABYM}
00817         {\cf19 return} l;\par
{\bkmkstart AAAAAAABYN}{\bkmkend AAAAAAABYN}
00818 \}\par
{\bkmkstart AAAAAAABYO}{\bkmkend AAAAAAABYO}
00819 \par
{\bkmkstart AAAAAAABYP}{\bkmkend AAAAAAABYP}
00820 \par
{\bkmkstart AAAAAAABYQ}{\bkmkend AAAAAAABYQ}
00821 {\cf18 float}   LittleFloat ({\cf18 float} l)\par
{\bkmkstart AAAAAAABYR}{\bkmkend AAAAAAABYR}
00822 \{\par
{\bkmkstart AAAAAAABYS}{\bkmkend AAAAAAABYS}
00823         {\cf17 union }\{{\cf18 byte} b[4]; {\cf18 float} f;\} in, out;\par
{\bkmkstart AAAAAAABYT}{\bkmkend AAAAAAABYT}
00824 \par
{\bkmkstart AAAAAAABYU}{\bkmkend AAAAAAABYU}
00825         in.f = l;\par
{\bkmkstart AAAAAAABYV}{\bkmkend AAAAAAABYV}
00826         out.b[0] = in.b[3];\par
{\bkmkstart AAAAAAABYW}{\bkmkend AAAAAAABYW}
00827         out.b[1] = in.b[2];\par
{\bkmkstart AAAAAAABYX}{\bkmkend AAAAAAABYX}
00828         out.b[2] = in.b[1];\par
{\bkmkstart AAAAAAABYY}{\bkmkend AAAAAAABYY}
00829         out.b[3] = in.b[0];\par
{\bkmkstart AAAAAAABYZ}{\bkmkend AAAAAAABYZ}
00830 \par
{\bkmkstart AAAAAAABZA}{\bkmkend AAAAAAABZA}
00831         {\cf19 return} out.f;\par
{\bkmkstart AAAAAAABZB}{\bkmkend AAAAAAABZB}
00832 \}\par
{\bkmkstart AAAAAAABZC}{\bkmkend AAAAAAABZC}
00833 \par
{\bkmkstart AAAAAAABZD}{\bkmkend AAAAAAABZD}
00834 {\cf18 float}   BigFloat ({\cf18 float} l)\par
{\bkmkstart AAAAAAABZE}{\bkmkend AAAAAAABZE}
00835 \{\par
{\bkmkstart AAAAAAABZF}{\bkmkend AAAAAAABZF}
00836         {\cf19 return} l;\par
{\bkmkstart AAAAAAABZG}{\bkmkend AAAAAAABZG}
00837 \}\par
{\bkmkstart AAAAAAABZH}{\bkmkend AAAAAAABZH}
00838 \par
{\bkmkstart AAAAAAABZI}{\bkmkend AAAAAAABZI}
00839 \par
{\bkmkstart AAAAAAABZJ}{\bkmkend AAAAAAABZJ}
00840 {\cf21 #else}\par
{\bkmkstart AAAAAAABZK}{\bkmkend AAAAAAABZK}
00841 \par
{\bkmkstart AAAAAAABZL}{\bkmkend AAAAAAABZL}
00842 \par
{\bkmkstart AAAAAAABZM}{\bkmkend AAAAAAABZM}
00843 {\cf18 short}   BigShort ({\cf18 short} l)\par
{\bkmkstart AAAAAAABZN}{\bkmkend AAAAAAABZN}
00844 \{\par
{\bkmkstart AAAAAAABZO}{\bkmkend AAAAAAABZO}
00845         {\cf18 byte}    b1,b2;\par
{\bkmkstart AAAAAAABZP}{\bkmkend AAAAAAABZP}
00846 \par
{\bkmkstart AAAAAAABZQ}{\bkmkend AAAAAAABZQ}
00847         b1 = l&255;\par
{\bkmkstart AAAAAAABZR}{\bkmkend AAAAAAABZR}
00848         b2 = (l>>8)&255;\par
{\bkmkstart AAAAAAABZS}{\bkmkend AAAAAAABZS}
00849 \par
{\bkmkstart AAAAAAABZT}{\bkmkend AAAAAAABZT}
00850         {\cf19 return} (b1<<8) + b2;\par
{\bkmkstart AAAAAAABZU}{\bkmkend AAAAAAABZU}
00851 \}\par
{\bkmkstart AAAAAAABZV}{\bkmkend AAAAAAABZV}
00852 \par
{\bkmkstart AAAAAAABZW}{\bkmkend AAAAAAABZW}
00853 {\cf18 short}   LittleShort ({\cf18 short} l)\par
{\bkmkstart AAAAAAABZX}{\bkmkend AAAAAAABZX}
00854 \{\par
{\bkmkstart AAAAAAABZY}{\bkmkend AAAAAAABZY}
00855         {\cf19 return} l;\par
{\bkmkstart AAAAAAABZZ}{\bkmkend AAAAAAABZZ}
00856 \}\par
{\bkmkstart AAAAAAACAA}{\bkmkend AAAAAAACAA}
00857 \par
{\bkmkstart AAAAAAACAB}{\bkmkend AAAAAAACAB}
00858 \par
{\bkmkstart AAAAAAACAC}{\bkmkend AAAAAAACAC}
00859 {\cf18 int}    BigLong ({\cf18 int} l)\par
{\bkmkstart AAAAAAACAD}{\bkmkend AAAAAAACAD}
00860 \{\par
{\bkmkstart AAAAAAACAE}{\bkmkend AAAAAAACAE}
00861         {\cf18 byte}    b1,b2,b3,b4;\par
{\bkmkstart AAAAAAACAF}{\bkmkend AAAAAAACAF}
00862 \par
{\bkmkstart AAAAAAACAG}{\bkmkend AAAAAAACAG}
00863         b1 = l&255;\par
{\bkmkstart AAAAAAACAH}{\bkmkend AAAAAAACAH}
00864         b2 = (l>>8)&255;\par
{\bkmkstart AAAAAAACAI}{\bkmkend AAAAAAACAI}
00865         b3 = (l>>16)&255;\par
{\bkmkstart AAAAAAACAJ}{\bkmkend AAAAAAACAJ}
00866         b4 = (l>>24)&255;\par
{\bkmkstart AAAAAAACAK}{\bkmkend AAAAAAACAK}
00867 \par
{\bkmkstart AAAAAAACAL}{\bkmkend AAAAAAACAL}
00868         {\cf19 return} (({\cf18 int})b1<<24) + (({\cf18 int})b2<<16) + (({\cf18 int})b3<<8) + b4;\par
{\bkmkstart AAAAAAACAM}{\bkmkend AAAAAAACAM}
00869 \}\par
{\bkmkstart AAAAAAACAN}{\bkmkend AAAAAAACAN}
00870 \par
{\bkmkstart AAAAAAACAO}{\bkmkend AAAAAAACAO}
00871 {\cf18 int}    LittleLong ({\cf18 int} l)\par
{\bkmkstart AAAAAAACAP}{\bkmkend AAAAAAACAP}
00872 \{\par
{\bkmkstart AAAAAAACAQ}{\bkmkend AAAAAAACAQ}
00873         {\cf19 return} l;\par
{\bkmkstart AAAAAAACAR}{\bkmkend AAAAAAACAR}
00874 \}\par
{\bkmkstart AAAAAAACAS}{\bkmkend AAAAAAACAS}
00875 \par
{\bkmkstart AAAAAAACAT}{\bkmkend AAAAAAACAT}
00876 {\cf18 float}   BigFloat ({\cf18 float} l)\par
{\bkmkstart AAAAAAACAU}{\bkmkend AAAAAAACAU}
00877 \{\par
{\bkmkstart AAAAAAACAV}{\bkmkend AAAAAAACAV}
00878         {\cf17 union }\{{\cf18 byte} b[4]; {\cf18 float} f;\} in, out;\par
{\bkmkstart AAAAAAACAW}{\bkmkend AAAAAAACAW}
00879 \par
{\bkmkstart AAAAAAACAX}{\bkmkend AAAAAAACAX}
00880         in.f = l;\par
{\bkmkstart AAAAAAACAY}{\bkmkend AAAAAAACAY}
00881         out.b[0] = in.b[3];\par
{\bkmkstart AAAAAAACAZ}{\bkmkend AAAAAAACAZ}
00882         out.b[1] = in.b[2];\par
{\bkmkstart AAAAAAACBA}{\bkmkend AAAAAAACBA}
00883         out.b[2] = in.b[1];\par
{\bkmkstart AAAAAAACBB}{\bkmkend AAAAAAACBB}
00884         out.b[3] = in.b[0];\par
{\bkmkstart AAAAAAACBC}{\bkmkend AAAAAAACBC}
00885 \par
{\bkmkstart AAAAAAACBD}{\bkmkend AAAAAAACBD}
00886         {\cf19 return} out.f;\par
{\bkmkstart AAAAAAACBE}{\bkmkend AAAAAAACBE}
00887 \}\par
{\bkmkstart AAAAAAACBF}{\bkmkend AAAAAAACBF}
00888 \par
{\bkmkstart AAAAAAACBG}{\bkmkend AAAAAAACBG}
00889 {\cf18 float}   LittleFloat ({\cf18 float} l)\par
{\bkmkstart AAAAAAACBH}{\bkmkend AAAAAAACBH}
00890 \{\par
{\bkmkstart AAAAAAACBI}{\bkmkend AAAAAAACBI}
00891         {\cf19 return} l;\par
{\bkmkstart AAAAAAACBJ}{\bkmkend AAAAAAACBJ}
00892 \}\par
{\bkmkstart AAAAAAACBK}{\bkmkend AAAAAAACBK}
00893 \par
{\bkmkstart AAAAAAACBL}{\bkmkend AAAAAAACBL}
00894 \par
{\bkmkstart AAAAAAACBM}{\bkmkend AAAAAAACBM}
00895 {\cf21 #endif}\par
{\bkmkstart AAAAAAACBN}{\bkmkend AAAAAAACBN}
00896 \par
{\bkmkstart AAAAAAACBO}{\bkmkend AAAAAAACBO}
00897 {\cf20 /*}\par
{\bkmkstart AAAAAAACBP}{\bkmkend AAAAAAACBP}
00898 {\cf20 //=======================================================}\par
{\bkmkstart AAAAAAACBQ}{\bkmkend AAAAAAACBQ}
00899 {\cf20 }\par
{\bkmkstart AAAAAAACBR}{\bkmkend AAAAAAACBR}
00900 {\cf20 }\par
{\bkmkstart AAAAAAACBS}{\bkmkend AAAAAAACBS}
00901 {\cf20 // FIXME: byte swap?}\par
{\bkmkstart AAAAAAACBT}{\bkmkend AAAAAAACBT}
00902 {\cf20 }\par
{\bkmkstart AAAAAAACBU}{\bkmkend AAAAAAACBU}
00903 {\cf20 // this is a 16 bit, non-reflected CRC using the polynomial 0x1021}\par
{\bkmkstart AAAAAAACBV}{\bkmkend AAAAAAACBV}
00904 {\cf20 // and the initial and final xor values shown below...  in other words, the}\par
{\bkmkstart AAAAAAACBW}{\bkmkend AAAAAAACBW}
00905 {\cf20 // CCITT standard CRC used by XMODEM}\par
{\bkmkstart AAAAAAACBX}{\bkmkend AAAAAAACBX}
00906 {\cf20 */}\par
{\bkmkstart AAAAAAACBY}{\bkmkend AAAAAAACBY}
00907 \par
{\bkmkstart AAAAAAACBZ}{\bkmkend AAAAAAACBZ}
00908 {\cf21 #define CRC_INIT_VALUE  0xffff}\par
{\bkmkstart AAAAAAACCA}{\bkmkend AAAAAAACCA}
00909 {\cf21 #define CRC_XOR_VALUE   0x0000}\par
{\bkmkstart AAAAAAACCB}{\bkmkend AAAAAAACCB}
00910 \par
{\bkmkstart AAAAAAACCC}{\bkmkend AAAAAAACCC}
00911 {\cf17 static} {\cf18 unsigned} {\cf18 short} crctable[256] =\par
{\bkmkstart AAAAAAACCD}{\bkmkend AAAAAAACCD}
00912 \{\par
{\bkmkstart AAAAAAACCE}{\bkmkend AAAAAAACCE}
00913         0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,\par
{\bkmkstart AAAAAAACCF}{\bkmkend AAAAAAACCF}
00914         0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef,\par
{\bkmkstart AAAAAAACCG}{\bkmkend AAAAAAACCG}
00915         0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,\par
{\bkmkstart AAAAAAACCH}{\bkmkend AAAAAAACCH}
00916         0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de,\par
{\bkmkstart AAAAAAACCI}{\bkmkend AAAAAAACCI}
00917         0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485,\par
{\bkmkstart AAAAAAACCJ}{\bkmkend AAAAAAACCJ}
00918         0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,\par
{\bkmkstart AAAAAAACCK}{\bkmkend AAAAAAACCK}
00919         0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4,\par
{\bkmkstart AAAAAAACCL}{\bkmkend AAAAAAACCL}
00920         0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc,\par
{\bkmkstart AAAAAAACCM}{\bkmkend AAAAAAACCM}
00921         0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,\par
{\bkmkstart AAAAAAACCN}{\bkmkend AAAAAAACCN}
00922         0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b,\par
{\bkmkstart AAAAAAACCO}{\bkmkend AAAAAAACCO}
00923         0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12,\par
{\bkmkstart AAAAAAACCP}{\bkmkend AAAAAAACCP}
00924         0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,\par
{\bkmkstart AAAAAAACCQ}{\bkmkend AAAAAAACCQ}
00925         0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41,\par
{\bkmkstart AAAAAAACCR}{\bkmkend AAAAAAACCR}
00926         0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49,\par
{\bkmkstart AAAAAAACCS}{\bkmkend AAAAAAACCS}
00927         0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,\par
{\bkmkstart AAAAAAACCT}{\bkmkend AAAAAAACCT}
00928         0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78,\par
{\bkmkstart AAAAAAACCU}{\bkmkend AAAAAAACCU}
00929         0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f,\par
{\bkmkstart AAAAAAACCV}{\bkmkend AAAAAAACCV}
00930         0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,\par
{\bkmkstart AAAAAAACCW}{\bkmkend AAAAAAACCW}
00931         0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e,\par
{\bkmkstart AAAAAAACCX}{\bkmkend AAAAAAACCX}
00932         0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256,\par
{\bkmkstart AAAAAAACCY}{\bkmkend AAAAAAACCY}
00933         0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,\par
{\bkmkstart AAAAAAACCZ}{\bkmkend AAAAAAACCZ}
00934         0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,\par
{\bkmkstart AAAAAAACDA}{\bkmkend AAAAAAACDA}
00935         0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c,\par
{\bkmkstart AAAAAAACDB}{\bkmkend AAAAAAACDB}
00936         0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,\par
{\bkmkstart AAAAAAACDC}{\bkmkend AAAAAAACDC}
00937         0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab,\par
{\bkmkstart AAAAAAACDD}{\bkmkend AAAAAAACDD}
00938         0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3,\par
{\bkmkstart AAAAAAACDE}{\bkmkend AAAAAAACDE}
00939         0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,\par
{\bkmkstart AAAAAAACDF}{\bkmkend AAAAAAACDF}
00940         0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,\par
{\bkmkstart AAAAAAACDG}{\bkmkend AAAAAAACDG}
00941         0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9,\par
{\bkmkstart AAAAAAACDH}{\bkmkend AAAAAAACDH}
00942         0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,\par
{\bkmkstart AAAAAAACDI}{\bkmkend AAAAAAACDI}
00943         0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,\par
{\bkmkstart AAAAAAACDJ}{\bkmkend AAAAAAACDJ}
00944         0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0\par
{\bkmkstart AAAAAAACDK}{\bkmkend AAAAAAACDK}
00945 \};\par
{\bkmkstart AAAAAAACDL}{\bkmkend AAAAAAACDL}
00946 \par
{\bkmkstart AAAAAAACDM}{\bkmkend AAAAAAACDM}
00947 {\cf18 void} CRC_Init({\cf18 unsigned} {\cf18 short} *crcvalue)\par
{\bkmkstart AAAAAAACDN}{\bkmkend AAAAAAACDN}
00948 \{\par
{\bkmkstart AAAAAAACDO}{\bkmkend AAAAAAACDO}
00949         *crcvalue = CRC_INIT_VALUE;\par
{\bkmkstart AAAAAAACDP}{\bkmkend AAAAAAACDP}
00950 \}\par
{\bkmkstart AAAAAAACDQ}{\bkmkend AAAAAAACDQ}
00951 \par
{\bkmkstart AAAAAAACDR}{\bkmkend AAAAAAACDR}
00952 {\cf18 void} CRC_ProcessByte({\cf18 unsigned} {\cf18 short} *crcvalue, {\cf18 byte} data)\par
{\bkmkstart AAAAAAACDS}{\bkmkend AAAAAAACDS}
00953 \{\par
{\bkmkstart AAAAAAACDT}{\bkmkend AAAAAAACDT}
00954         *crcvalue = (*crcvalue << 8) ^ crctable[(*crcvalue >> 8) ^ data];\par
{\bkmkstart AAAAAAACDU}{\bkmkend AAAAAAACDU}
00955 \}\par
{\bkmkstart AAAAAAACDV}{\bkmkend AAAAAAACDV}
00956 \par
{\bkmkstart AAAAAAACDW}{\bkmkend AAAAAAACDW}
00957 {\cf18 unsigned} {\cf18 short} CRC_Value({\cf18 unsigned} {\cf18 short} crcvalue)\par
{\bkmkstart AAAAAAACDX}{\bkmkend AAAAAAACDX}
00958 \{\par
{\bkmkstart AAAAAAACDY}{\bkmkend AAAAAAACDY}
00959         {\cf19 return} crcvalue ^ CRC_XOR_VALUE;\par
{\bkmkstart AAAAAAACDZ}{\bkmkend AAAAAAACDZ}
00960 \}\par
{\bkmkstart AAAAAAACEA}{\bkmkend AAAAAAACEA}
00961 \par
{\bkmkstart AAAAAAACEB}{\bkmkend AAAAAAACEB}
00962 {\cf20 /*}\par
{\bkmkstart AAAAAAACEC}{\bkmkend AAAAAAACEC}
00963 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAACED}{\bkmkend AAAAAAACED}
00964 {\cf20 */}\par
{\bkmkstart AAAAAAACEE}{\bkmkend AAAAAAACEE}
00965 \par
{\bkmkstart AAAAAAACEF}{\bkmkend AAAAAAACEF}
00966 {\cf20 /*}\par
{\bkmkstart AAAAAAACEG}{\bkmkend AAAAAAACEG}
00967 {\cf20 ============}\par
{\bkmkstart AAAAAAACEH}{\bkmkend AAAAAAACEH}
00968 {\cf20 CreatePath}\par
{\bkmkstart AAAAAAACEI}{\bkmkend AAAAAAACEI}
00969 {\cf20 ============}\par
{\bkmkstart AAAAAAACEJ}{\bkmkend AAAAAAACEJ}
00970 {\cf20 */}\par
{\bkmkstart AAAAAAACEK}{\bkmkend AAAAAAACEK}
00971 {\cf18 void}    CreatePath ({\cf18 char} *path)\par
{\bkmkstart AAAAAAACEL}{\bkmkend AAAAAAACEL}
00972 \{\par
{\bkmkstart AAAAAAACEM}{\bkmkend AAAAAAACEM}
00973         {\cf18 char}    *ofs, c;\par
{\bkmkstart AAAAAAACEN}{\bkmkend AAAAAAACEN}
00974 \par
{\bkmkstart AAAAAAACEO}{\bkmkend AAAAAAACEO}
00975         {\cf19 for} (ofs = path+1 ; *ofs ; ofs++)\par
{\bkmkstart AAAAAAACEP}{\bkmkend AAAAAAACEP}
00976         \{\par
{\bkmkstart AAAAAAACEQ}{\bkmkend AAAAAAACEQ}
00977                 c = *ofs;\par
{\bkmkstart AAAAAAACER}{\bkmkend AAAAAAACER}
00978                 {\cf19 if} (c == {\cf23 '/'} || c == {\cf23 '\\\\'})\par
{\bkmkstart AAAAAAACES}{\bkmkend AAAAAAACES}
00979                 \{       {\cf20 /* create the directory */}\par
{\bkmkstart AAAAAAACET}{\bkmkend AAAAAAACET}
00980                         *ofs = 0;\par
{\bkmkstart AAAAAAACEU}{\bkmkend AAAAAAACEU}
00981                         Q_mkdir (path);\par
{\bkmkstart AAAAAAACEV}{\bkmkend AAAAAAACEV}
00982                         *ofs = c;\par
{\bkmkstart AAAAAAACEW}{\bkmkend AAAAAAACEW}
00983                 \}\par
{\bkmkstart AAAAAAACEX}{\bkmkend AAAAAAACEX}
00984         \}\par
{\bkmkstart AAAAAAACEY}{\bkmkend AAAAAAACEY}
00985 \}\par
{\bkmkstart AAAAAAACEZ}{\bkmkend AAAAAAACEZ}
00986 \par
{\bkmkstart AAAAAAACFA}{\bkmkend AAAAAAACFA}
00987 \par
{\bkmkstart AAAAAAACFB}{\bkmkend AAAAAAACFB}
00988 {\cf20 /*}\par
{\bkmkstart AAAAAAACFC}{\bkmkend AAAAAAACFC}
00989 {\cf20 ============}\par
{\bkmkstart AAAAAAACFD}{\bkmkend AAAAAAACFD}
00990 {\cf20 QCopyFile}\par
{\bkmkstart AAAAAAACFE}{\bkmkend AAAAAAACFE}
00991 {\cf20 }\par
{\bkmkstart AAAAAAACFF}{\bkmkend AAAAAAACFF}
00992 {\cf20   Used to archive source files}\par
{\bkmkstart AAAAAAACFG}{\bkmkend AAAAAAACFG}
00993 {\cf20 ============}\par
{\bkmkstart AAAAAAACFH}{\bkmkend AAAAAAACFH}
00994 {\cf20 */}\par
{\bkmkstart AAAAAAACFI}{\bkmkend AAAAAAACFI}
00995 {\cf18 void} QCopyFile ({\cf18 char} *from, {\cf18 char} *to)\par
{\bkmkstart AAAAAAACFJ}{\bkmkend AAAAAAACFJ}
00996 \{\par
{\bkmkstart AAAAAAACFK}{\bkmkend AAAAAAACFK}
00997         {\cf18 void}    *buffer;\par
{\bkmkstart AAAAAAACFL}{\bkmkend AAAAAAACFL}
00998         {\cf18 int}             length;\par
{\bkmkstart AAAAAAACFM}{\bkmkend AAAAAAACFM}
00999 \par
{\bkmkstart AAAAAAACFN}{\bkmkend AAAAAAACFN}
01000         length = LoadFile (from, &buffer);\par
{\bkmkstart AAAAAAACFO}{\bkmkend AAAAAAACFO}
01001         CreatePath (to);\par
{\bkmkstart AAAAAAACFP}{\bkmkend AAAAAAACFP}
01002         SaveFile (to, buffer, length);\par
{\bkmkstart AAAAAAACFQ}{\bkmkend AAAAAAACFQ}
01003         free (buffer);\par
{\bkmkstart AAAAAAACFR}{\bkmkend AAAAAAACFR}
01004 \}\par
{\bkmkstart AAAAAAACFS}{\bkmkend AAAAAAACFS}
01005 \par
{\bkmkstart AAAAAAACFT}{\bkmkend AAAAAAACFT}
01006 \par
{\bkmkstart AAAAAAACFU}{\bkmkend AAAAAAACFU}
01007 {\cf20 /*}\par
{\bkmkstart AAAAAAACFV}{\bkmkend AAAAAAACFV}
01008 {\cf20 ============}\par
{\bkmkstart AAAAAAACFW}{\bkmkend AAAAAAACFW}
01009 {\cf20 ListPak}\par
{\bkmkstart AAAAAAACFX}{\bkmkend AAAAAAACFX}
01010 {\cf20 }\par
{\bkmkstart AAAAAAACFY}{\bkmkend AAAAAAACFY}
01011 {\cf20  Prints the contents of the specified pak file to stdout}\par
{\bkmkstart AAAAAAACFZ}{\bkmkend AAAAAAACFZ}
01012 {\cf20 ============}\par
{\bkmkstart AAAAAAACGA}{\bkmkend AAAAAAACGA}
01013 {\cf20 */}\par
{\bkmkstart AAAAAAACGB}{\bkmkend AAAAAAACGB}
01014 \par
{\bkmkstart AAAAAAACGC}{\bkmkend AAAAAAACGC}
01015 {\cf18 void} ListPak({\cf18 char}* pakname)\par
{\bkmkstart AAAAAAACGD}{\bkmkend AAAAAAACGD}
01016 \{\par
{\bkmkstart AAAAAAACGE}{\bkmkend AAAAAAACGE}
01017         FILE* f = SafeOpenRead(pakname);\par
{\bkmkstart AAAAAAACGF}{\bkmkend AAAAAAACGF}
01018         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACGG" }{}}{\fldrslt {\cs37\ul\cf2 packheader_t}}}
 head;\par
{\bkmkstart AAAAAAACGH}{\bkmkend AAAAAAACGH}
01019         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACGI" }{}}{\fldrslt {\cs37\ul\cf2 packfile_t}}}
* pdir;\par
{\bkmkstart AAAAAAACGJ}{\bkmkend AAAAAAACGJ}
01020         {\cf18 long} i=0,imax=0;\par
{\bkmkstart AAAAAAACGK}{\bkmkend AAAAAAACGK}
01021         {\cf18 long} totlen=0;\par
{\bkmkstart AAAAAAACGL}{\bkmkend AAAAAAACGL}
01022 \par
{\bkmkstart AAAAAAACGM}{\bkmkend AAAAAAACGM}
01023         SafeRead(f,&head,{\cf17 sizeof}({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACGG" }{}}{\fldrslt {\cs37\ul\cf2 packheader_t}}}
));\par
{\bkmkstart AAAAAAACGN}{\bkmkend AAAAAAACGN}
01024         pdir=malloc(head.dirlen);\par
{\bkmkstart AAAAAAACGO}{\bkmkend AAAAAAACGO}
01025 \par
{\bkmkstart AAAAAAACGP}{\bkmkend AAAAAAACGP}
01026         fseek(f,head.dirofs,SEEK_SET);\par
{\bkmkstart AAAAAAACGQ}{\bkmkend AAAAAAACGQ}
01027         SafeRead(f,pdir,head.dirlen);\par
{\bkmkstart AAAAAAACGR}{\bkmkend AAAAAAACGR}
01028 \par
{\bkmkstart AAAAAAACGS}{\bkmkend AAAAAAACGS}
01029         fseek(f,0,SEEK_END);\par
{\bkmkstart AAAAAAACGT}{\bkmkend AAAAAAACGT}
01030         totlen=ftell(f);\par
{\bkmkstart AAAAAAACGU}{\bkmkend AAAAAAACGU}
01031 \par
{\bkmkstart AAAAAAACGV}{\bkmkend AAAAAAACGV}
01032         fclose(f);\par
{\bkmkstart AAAAAAACGW}{\bkmkend AAAAAAACGW}
01033 \par
{\bkmkstart AAAAAAACGX}{\bkmkend AAAAAAACGX}
01034         imax=head.dirlen/{\cf17 sizeof}({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACGI" }{}}{\fldrslt {\cs37\ul\cf2 packfile_t}}}
);\par
{\bkmkstart AAAAAAACGY}{\bkmkend AAAAAAACGY}
01035 \par
{\bkmkstart AAAAAAACGZ}{\bkmkend AAAAAAACGZ}
01036         {\cf19 for}(i;i<imax;i++)\par
{\bkmkstart AAAAAAACHA}{\bkmkend AAAAAAACHA}
01037         \{\par
{\bkmkstart AAAAAAACHB}{\bkmkend AAAAAAACHB}
01038                 printf ({\cf22 "%64s : %7i\\n"}, pdir[i].name,pdir[i].filelen);\par
{\bkmkstart AAAAAAACHC}{\bkmkend AAAAAAACHC}
01039         \}\par
{\bkmkstart AAAAAAACHD}{\bkmkend AAAAAAACHD}
01040 \par
{\bkmkstart AAAAAAACHE}{\bkmkend AAAAAAACHE}
01041         printf({\cf22 "Total Length: %li bytes\\n"},totlen);\par
{\bkmkstart AAAAAAACHF}{\bkmkend AAAAAAACHF}
01042 \}\par
{\bkmkstart AAAAAAACHG}{\bkmkend AAAAAAACHG}
01043 \par
{\bkmkstart AAAAAAACHH}{\bkmkend AAAAAAACHH}
01044 \par
{\bkmkstart AAAAAAACHI}{\bkmkend AAAAAAACHI}
01045 \par
{\bkmkstart AAAAAAACHJ}{\bkmkend AAAAAAACHJ}
01046 {\cf18 long} flen(FILE* f)\par
{\bkmkstart AAAAAAACHK}{\bkmkend AAAAAAACHK}
01047 \{\par
{\bkmkstart AAAAAAACHL}{\bkmkend AAAAAAACHL}
01048         {\cf18 long} savepos=ftell(f);\par
{\bkmkstart AAAAAAACHM}{\bkmkend AAAAAAACHM}
01049         {\cf18 long} filelen=0;\par
{\bkmkstart AAAAAAACHN}{\bkmkend AAAAAAACHN}
01050 \par
{\bkmkstart AAAAAAACHO}{\bkmkend AAAAAAACHO}
01051         fseek(f,0,SEEK_END);\par
{\bkmkstart AAAAAAACHP}{\bkmkend AAAAAAACHP}
01052         filelen=ftell(f);\par
{\bkmkstart AAAAAAACHQ}{\bkmkend AAAAAAACHQ}
01053 \par
{\bkmkstart AAAAAAACHR}{\bkmkend AAAAAAACHR}
01054         fseek(f,savepos,SEEK_SET);\par
{\bkmkstart AAAAAAACHS}{\bkmkend AAAAAAACHS}
01055         {\cf19 return} filelen;\par
{\bkmkstart AAAAAAACHT}{\bkmkend AAAAAAACHT}
01056 \}\par
{\bkmkstart AAAAAAACHU}{\bkmkend AAAAAAACHU}
01057 \par
{\bkmkstart AAAAAAACHV}{\bkmkend AAAAAAACHV}
01058 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cmdlib.h\par \pard\plain 
{\bkmkstart AAAAAAACHW}
{\bkmkend AAAAAAACHW}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAACHX}{\bkmkend AAAAAAACHX}
00001 {\cf20 /***}\par
{\bkmkstart AAAAAAACHY}{\bkmkend AAAAAAACHY}
00002 {\cf20 *}\par
{\bkmkstart AAAAAAACHZ}{\bkmkend AAAAAAACHZ}
00003 {\cf20 *       Copyright (c) 1996-2002, Valve LLC. All rights reserved.}\par
{\bkmkstart AAAAAAACIA}{\bkmkend AAAAAAACIA}
00004 {\cf20 *}\par
{\bkmkstart AAAAAAACIB}{\bkmkend AAAAAAACIB}
00005 {\cf20 *       This product contains software technology licensed from Id}\par
{\bkmkstart AAAAAAACIC}{\bkmkend AAAAAAACIC}
00006 {\cf20 *       Software, Inc. ("Id Technology").  Id Technology (c) 1996 Id Software, Inc.}\par
{\bkmkstart AAAAAAACID}{\bkmkend AAAAAAACID}
00007 {\cf20 *       All Rights Reserved.}\par
{\bkmkstart AAAAAAACIE}{\bkmkend AAAAAAACIE}
00008 {\cf20 *}\par
{\bkmkstart AAAAAAACIF}{\bkmkend AAAAAAACIF}
00009 {\cf20 ****/}\par
{\bkmkstart AAAAAAACIG}{\bkmkend AAAAAAACIG}
00010 \par
{\bkmkstart AAAAAAACIH}{\bkmkend AAAAAAACIH}
00011 {\cf20 /* cmdlib.h */}\par
{\bkmkstart AAAAAAACII}{\bkmkend AAAAAAACII}
00012 \par
{\bkmkstart AAAAAAACIJ}{\bkmkend AAAAAAACIJ}
00013 {\cf20 /*}\par
{\bkmkstart AAAAAAACIK}{\bkmkend AAAAAAACIK}
00014 {\cf20 =================}\par
{\bkmkstart AAAAAAACIL}{\bkmkend AAAAAAACIL}
00015 {\cf20 last modified: 2023/3/25}\par
{\bkmkstart AAAAAAACIM}{\bkmkend AAAAAAACIM}
00016 {\cf20 =================}\par
{\bkmkstart AAAAAAACIN}{\bkmkend AAAAAAACIN}
00017 {\cf20 */}\par
{\bkmkstart AAAAAAACIO}{\bkmkend AAAAAAACIO}
00018 \par
{\bkmkstart AAAAAAACIP}{\bkmkend AAAAAAACIP}
00019 {\cf21 #ifndef __CMDLIB__}\par
{\bkmkstart AAAAAAACIQ}{\bkmkend AAAAAAACIQ}
00020 {\cf21 #define __CMDLIB__}\par
{\bkmkstart AAAAAAACIR}{\bkmkend AAAAAAACIR}
00021 \par
{\bkmkstart AAAAAAACIS}{\bkmkend AAAAAAACIS}
00022 \par
{\bkmkstart AAAAAAACIT}{\bkmkend AAAAAAACIT}
00023 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAACIU}{\bkmkend AAAAAAACIU}
00024 {\cf17 extern} {\cf22 "C"}\par
{\bkmkstart AAAAAAACIV}{\bkmkend AAAAAAACIV}
00025 \{\par
{\bkmkstart AAAAAAACIW}{\bkmkend AAAAAAACIW}
00026 {\cf21 #endif}\par
{\bkmkstart AAAAAAACIX}{\bkmkend AAAAAAACIX}
00027 \par
{\bkmkstart AAAAAAACIY}{\bkmkend AAAAAAACIY}
00028 \par
{\bkmkstart AAAAAAACIZ}{\bkmkend AAAAAAACIZ}
00029 {\cf21 #include <stdio.h>}\par
{\bkmkstart AAAAAAACJA}{\bkmkend AAAAAAACJA}
00030 \par
{\bkmkstart AAAAAAACJB}{\bkmkend AAAAAAACJB}
00031 \par
{\bkmkstart AAAAAAACJC}{\bkmkend AAAAAAACJC}
00032 {\cf21 #ifndef __CMDUTIL__}\par
{\bkmkstart AAAAAAACJD}{\bkmkend AAAAAAACJD}
00033 {\cf21 #define __CMDUTIL__}\par
{\bkmkstart AAAAAAACJE}{\bkmkend AAAAAAACJE}
00034 {\cf21 #ifndef _NOENUMQBOOL}\par
{\bkmkstart AAAAAAACJF}{\bkmkend AAAAAAACJF}
00035 {\cf17 typedef} {\cf17 enum} \{{\cf17 false}, {\cf17 true}\} qboolean;\par
{\bkmkstart AAAAAAACJG}{\bkmkend AAAAAAACJG}
00036 {\cf21 #else}\par
{\bkmkstart AAAAAAACJH}{\bkmkend AAAAAAACJH}
00037 {\cf17 typedef} {\cf18 int} qboolean;\par
{\bkmkstart AAAAAAACJI}{\bkmkend AAAAAAACJI}
00038 {\cf21 #undef true}\par
{\bkmkstart AAAAAAACJJ}{\bkmkend AAAAAAACJJ}
00039 {\cf21 #undef false}\par
{\bkmkstart AAAAAAACJK}{\bkmkend AAAAAAACJK}
00040 {\cf21 #define true 1}\par
{\bkmkstart AAAAAAACJL}{\bkmkend AAAAAAACJL}
00041 {\cf21 #define false 0}\par
{\bkmkstart AAAAAAACJM}{\bkmkend AAAAAAACJM}
00042 {\cf21 #endif}\par
{\bkmkstart AAAAAAACJN}{\bkmkend AAAAAAACJN}
00043 \par
{\bkmkstart AAAAAAACJO}{\bkmkend AAAAAAACJO}
00044 {\cf17 typedef} {\cf18 unsigned} {\cf18 char} byte;\par
{\bkmkstart AAAAAAACJP}{\bkmkend AAAAAAACJP}
00045 {\cf21 #endif}\par
{\bkmkstart AAAAAAACJQ}{\bkmkend AAAAAAACJQ}
00046 \par
{\bkmkstart AAAAAAACJR}{\bkmkend AAAAAAACJR}
00047 {\cf20 /* the dec offsetof macro doesn't work very well... */}\par
{\bkmkstart AAAAAAACJS}{\bkmkend AAAAAAACJS}
00048 {\cf21 #define myoffsetof(type,identifier) ((size_t)&((type *)0)->identifier)}\par
{\bkmkstart AAAAAAACJT}{\bkmkend AAAAAAACJT}
00049 \par
{\bkmkstart AAAAAAACJU}{\bkmkend AAAAAAACJU}
00050 \par
{\bkmkstart AAAAAAACJV}{\bkmkend AAAAAAACJV}
00051 {\cf20 /* set these before calling CheckParm */}\par
{\bkmkstart AAAAAAACJW}{\bkmkend AAAAAAACJW}
00052 {\cf17 extern} {\cf18 int} myargc;\par
{\bkmkstart AAAAAAACJX}{\bkmkend AAAAAAACJX}
00053 {\cf17 extern} {\cf18 char} **myargv;\par
{\bkmkstart AAAAAAACJY}{\bkmkend AAAAAAACJY}
00054 \par
{\bkmkstart AAAAAAACJZ}{\bkmkend AAAAAAACJZ}
00055 {\cf18 void} COM_FixSlashes( {\cf18 char} *pname );\par
{\bkmkstart AAAAAAACKA}{\bkmkend AAAAAAACKA}
00056 {\cf18 char} *strupr ({\cf18 char} *in);\par
{\bkmkstart AAAAAAACKB}{\bkmkend AAAAAAACKB}
00057 {\cf18 char} *strlower ({\cf18 char} *in);\par
{\bkmkstart AAAAAAACKC}{\bkmkend AAAAAAACKC}
00058 {\cf18 int} Q_strncasecmp ({\cf18 char} *s1, {\cf18 char} *s2, {\cf18 int} n);\par
{\bkmkstart AAAAAAACKD}{\bkmkend AAAAAAACKD}
00059 {\cf18 int} Q_strcasecmp ({\cf18 char} *s1, {\cf18 char} *s2);\par
{\bkmkstart AAAAAAACKE}{\bkmkend AAAAAAACKE}
00060 {\cf18 void} Q_getwd ({\cf18 char} *out);\par
{\bkmkstart AAAAAAACKF}{\bkmkend AAAAAAACKF}
00061 \par
{\bkmkstart AAAAAAACKG}{\bkmkend AAAAAAACKG}
00062 {\cf18 int} Q_filelength (FILE *f);\par
{\bkmkstart AAAAAAACKH}{\bkmkend AAAAAAACKH}
00063 {\cf18 int}     FileTime ({\cf18 char} *path);\par
{\bkmkstart AAAAAAACKI}{\bkmkend AAAAAAACKI}
00064 \par
{\bkmkstart AAAAAAACKJ}{\bkmkend AAAAAAACKJ}
00065 {\cf18 void}    Q_mkdir ({\cf18 char} *path);\par
{\bkmkstart AAAAAAACKK}{\bkmkend AAAAAAACKK}
00066 \par
{\bkmkstart AAAAAAACKL}{\bkmkend AAAAAAACKL}
00067 {\cf17 extern}  {\cf18 char}            qdir[1024];\par
{\bkmkstart AAAAAAACKM}{\bkmkend AAAAAAACKM}
00068 {\cf17 extern}  {\cf18 char}            gamedir[1024];\par
{\bkmkstart AAAAAAACKN}{\bkmkend AAAAAAACKN}
00069 {\cf18 void} SetQdirFromPath ({\cf18 char} *path);\par
{\bkmkstart AAAAAAACKO}{\bkmkend AAAAAAACKO}
00070 {\cf18 char} *ExpandArg ({\cf18 char} *path);   {\cf20 /* from cmd line */}\par
{\bkmkstart AAAAAAACKP}{\bkmkend AAAAAAACKP}
00071 {\cf18 char} *ExpandPath ({\cf18 char} *path);  {\cf20 /* from scripts  */}\par
{\bkmkstart AAAAAAACKQ}{\bkmkend AAAAAAACKQ}
00072 {\cf18 char} *ExpandPathAndArchive ({\cf18 char} *path);\par
{\bkmkstart AAAAAAACKR}{\bkmkend AAAAAAACKR}
00073 \par
{\bkmkstart AAAAAAACKS}{\bkmkend AAAAAAACKS}
00074 \par
{\bkmkstart AAAAAAACKT}{\bkmkend AAAAAAACKT}
00075 {\cf18 double} I_FloatTime ({\cf18 void});\par
{\bkmkstart AAAAAAACKU}{\bkmkend AAAAAAACKU}
00076 \par
{\bkmkstart AAAAAAACKV}{\bkmkend AAAAAAACKV}
00077 {\cf18 void}    Error ({\cf18 char} *error, ...);\par
{\bkmkstart AAAAAAACKW}{\bkmkend AAAAAAACKW}
00078 {\cf18 int}             CheckParm ({\cf18 char} *check);\par
{\bkmkstart AAAAAAACKX}{\bkmkend AAAAAAACKX}
00079 \par
{\bkmkstart AAAAAAACKY}{\bkmkend AAAAAAACKY}
00080 FILE    *SafeOpenWrite ({\cf18 char} *filename);\par
{\bkmkstart AAAAAAACKZ}{\bkmkend AAAAAAACKZ}
00081 FILE    *SafeOpenRead ({\cf18 char} *filename);\par
{\bkmkstart AAAAAAACLA}{\bkmkend AAAAAAACLA}
00082 {\cf18 void}    SafeRead (FILE *f, {\cf18 void} *buffer, {\cf18 int} count);\par
{\bkmkstart AAAAAAACLB}{\bkmkend AAAAAAACLB}
00083 {\cf18 void}    SafeWrite (FILE *f, {\cf18 void} *buffer, {\cf18 int} count);\par
{\bkmkstart AAAAAAACLC}{\bkmkend AAAAAAACLC}
00084 \par
{\bkmkstart AAAAAAACLD}{\bkmkend AAAAAAACLD}
00085 {\cf18 int}             LoadFile ({\cf18 char} *filename, {\cf18 void} **bufferptr);\par
{\bkmkstart AAAAAAACLE}{\bkmkend AAAAAAACLE}
00086 {\cf18 void}    SaveFile ({\cf18 char} *filename, {\cf18 void} *buffer, {\cf18 int} count);\par
{\bkmkstart AAAAAAACLF}{\bkmkend AAAAAAACLF}
00087 \par
{\bkmkstart AAAAAAACLG}{\bkmkend AAAAAAACLG}
00088 {\cf18 void}    DefaultExtension ({\cf18 char} *path, {\cf18 char} *extension);\par
{\bkmkstart AAAAAAACLH}{\bkmkend AAAAAAACLH}
00089 {\cf18 void}    DefaultPath ({\cf18 char} *path, {\cf18 char} *basepath);\par
{\bkmkstart AAAAAAACLI}{\bkmkend AAAAAAACLI}
00090 {\cf18 void}    StripFilename ({\cf18 char} *path);\par
{\bkmkstart AAAAAAACLJ}{\bkmkend AAAAAAACLJ}
00091 {\cf18 void}    StripExtension ({\cf18 char} *path);\par
{\bkmkstart AAAAAAACLK}{\bkmkend AAAAAAACLK}
00092 \par
{\bkmkstart AAAAAAACLL}{\bkmkend AAAAAAACLL}
00093 {\cf18 void}    ExtractFilePath ({\cf18 char} *path, {\cf18 char} *dest);\par
{\bkmkstart AAAAAAACLM}{\bkmkend AAAAAAACLM}
00094 {\cf18 void}    ExtractFileBase ({\cf18 char} *path, {\cf18 char} *dest);\par
{\bkmkstart AAAAAAACLN}{\bkmkend AAAAAAACLN}
00095 {\cf18 void}    ExtractFileExtension ({\cf18 char} *path, {\cf18 char} *dest);\par
{\bkmkstart AAAAAAACLO}{\bkmkend AAAAAAACLO}
00096 \par
{\bkmkstart AAAAAAACLP}{\bkmkend AAAAAAACLP}
00097 {\cf18 int}     ParseNum ({\cf18 char} *str);\par
{\bkmkstart AAAAAAACLQ}{\bkmkend AAAAAAACLQ}
00098 \par
{\bkmkstart AAAAAAACLR}{\bkmkend AAAAAAACLR}
00099 {\cf18 short}   BigShort ({\cf18 short} l);\par
{\bkmkstart AAAAAAACLS}{\bkmkend AAAAAAACLS}
00100 {\cf18 short}   LittleShort ({\cf18 short} l);\par
{\bkmkstart AAAAAAACLT}{\bkmkend AAAAAAACLT}
00101 {\cf18 int}             BigLong ({\cf18 int} l);\par
{\bkmkstart AAAAAAACLU}{\bkmkend AAAAAAACLU}
00102 {\cf18 int}             LittleLong ({\cf18 int} l);\par
{\bkmkstart AAAAAAACLV}{\bkmkend AAAAAAACLV}
00103 {\cf18 float}   BigFloat ({\cf18 float} l);\par
{\bkmkstart AAAAAAACLW}{\bkmkend AAAAAAACLW}
00104 {\cf18 float}   LittleFloat ({\cf18 float} l);\par
{\bkmkstart AAAAAAACLX}{\bkmkend AAAAAAACLX}
00105 \par
{\bkmkstart AAAAAAACLY}{\bkmkend AAAAAAACLY}
00106 {\cf18 long} flen(FILE* f);\par
{\bkmkstart AAAAAAACLZ}{\bkmkend AAAAAAACLZ}
00107 \par
{\bkmkstart AAAAAAACMA}{\bkmkend AAAAAAACMA}
00108 \par
{\bkmkstart AAAAAAACMB}{\bkmkend AAAAAAACMB}
00109 \par
{\bkmkstart AAAAAAACMC}{\bkmkend AAAAAAACMC}
00110 {\cf18 char} *COM_Parse ({\cf18 char} *data);\par
{\bkmkstart AAAAAAACMD}{\bkmkend AAAAAAACMD}
00111 \par
{\bkmkstart AAAAAAACME}{\bkmkend AAAAAAACME}
00112 {\cf17 extern}  {\cf18 char}            com_token[1024];\par
{\bkmkstart AAAAAAACMF}{\bkmkend AAAAAAACMF}
00113 {\cf17 extern}  qboolean        com_eof;\par
{\bkmkstart AAAAAAACMG}{\bkmkend AAAAAAACMG}
00114 \par
{\bkmkstart AAAAAAACMH}{\bkmkend AAAAAAACMH}
00115 {\cf18 char} *copystring({\cf18 char} *s);\par
{\bkmkstart AAAAAAACMI}{\bkmkend AAAAAAACMI}
00116 \par
{\bkmkstart AAAAAAACMJ}{\bkmkend AAAAAAACMJ}
00117 \par
{\bkmkstart AAAAAAACMK}{\bkmkend AAAAAAACMK}
00118 {\cf18 void} CRC_Init({\cf18 unsigned} {\cf18 short} *crcvalue);\par
{\bkmkstart AAAAAAACML}{\bkmkend AAAAAAACML}
00119 {\cf18 void} CRC_ProcessByte({\cf18 unsigned} {\cf18 short} *crcvalue, {\cf18 byte} data);\par
{\bkmkstart AAAAAAACMM}{\bkmkend AAAAAAACMM}
00120 {\cf18 unsigned} {\cf18 short} CRC_Value({\cf18 unsigned} {\cf18 short} crcvalue);\par
{\bkmkstart AAAAAAACMN}{\bkmkend AAAAAAACMN}
00121 \par
{\bkmkstart AAAAAAACMO}{\bkmkend AAAAAAACMO}
00122 {\cf18 void}    CreatePath ({\cf18 char} *path);\par
{\bkmkstart AAAAAAACMP}{\bkmkend AAAAAAACMP}
00123 {\cf18 void}    QCopyFile ({\cf18 char} *from, {\cf18 char} *to);\par
{\bkmkstart AAAAAAACMQ}{\bkmkend AAAAAAACMQ}
00124 \par
{\bkmkstart AAAAAAACMR}{\bkmkend AAAAAAACMR}
00125 {\cf17 extern}  qboolean                archive;\par
{\bkmkstart AAAAAAACMS}{\bkmkend AAAAAAACMS}
00126 {\cf17 extern}  {\cf18 char}                    archivedir[1024];\par
{\bkmkstart AAAAAAACMT}{\bkmkend AAAAAAACMT}
00127 \par
{\bkmkstart AAAAAAACMU}{\bkmkend AAAAAAACMU}
00128 \par
{\bkmkstart AAAAAAACMV}{\bkmkend AAAAAAACMV}
00129 {\cf17 extern}  qboolean verbose;\par
{\bkmkstart AAAAAAACMW}{\bkmkend AAAAAAACMW}
00130 {\cf18 void} qprintf ({\cf18 char} *format, ...);\par
{\bkmkstart AAAAAAACMX}{\bkmkend AAAAAAACMX}
00131 \par
{\bkmkstart AAAAAAACMY}{\bkmkend AAAAAAACMY}
00132 \par
{\bkmkstart AAAAAAACMZ}{\bkmkend AAAAAAACMZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACGI" }{}}{\fldrslt {\cs37\ul\cf2 00133}}}
 {\cf17 typedef} {\cf17 struct}\par
{\bkmkstart AAAAAAACNA}{\bkmkend AAAAAAACNA}
00134 \{\par
{\bkmkstart AAAAAAACNB}{\bkmkend AAAAAAACNB}
00135     {\cf18 char}        name[56];\par
{\bkmkstart AAAAAAACNC}{\bkmkend AAAAAAACNC}
00136     {\cf18 int}         filepos, filelen;\par
{\bkmkstart AAAAAAACND}{\bkmkend AAAAAAACND}
00137 \} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACGI" }{}}{\fldrslt {\cs37\ul\cf2 packfile_t}}}
;\par
{\bkmkstart AAAAAAACNE}{\bkmkend AAAAAAACNE}
00138 \par
{\bkmkstart AAAAAAACNF}{\bkmkend AAAAAAACNF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACGG" }{}}{\fldrslt {\cs37\ul\cf2 00139}}}
 {\cf17 typedef} {\cf17 struct}\par
{\bkmkstart AAAAAAACNG}{\bkmkend AAAAAAACNG}
00140 \{\par
{\bkmkstart AAAAAAACNH}{\bkmkend AAAAAAACNH}
00141     {\cf18 char}        {\cf18 id}[4];\par
{\bkmkstart AAAAAAACNI}{\bkmkend AAAAAAACNI}
00142     {\cf18 int}         dirofs;\par
{\bkmkstart AAAAAAACNJ}{\bkmkend AAAAAAACNJ}
00143     {\cf18 int}         dirlen;\par
{\bkmkstart AAAAAAACNK}{\bkmkend AAAAAAACNK}
00144 \} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACGG" }{}}{\fldrslt {\cs37\ul\cf2 packheader_t}}}
;\par
{\bkmkstart AAAAAAACNL}{\bkmkend AAAAAAACNL}
00145 \par
{\bkmkstart AAAAAAACNM}{\bkmkend AAAAAAACNM}
00146 \par
{\bkmkstart AAAAAAACNN}{\bkmkend AAAAAAACNN}
00147 {\cf18 void} ListPak({\cf18 char}* pakname);\par
{\bkmkstart AAAAAAACNO}{\bkmkend AAAAAAACNO}
00148 \par
{\bkmkstart AAAAAAACNP}{\bkmkend AAAAAAACNP}
00149 \par
{\bkmkstart AAAAAAACNQ}{\bkmkend AAAAAAACNQ}
00150 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAACNR}{\bkmkend AAAAAAACNR}
00151 \}\par
{\bkmkstart AAAAAAACNS}{\bkmkend AAAAAAACNS}
00152 {\cf21 #endif}\par
{\bkmkstart AAAAAAACNT}{\bkmkend AAAAAAACNT}
00153 \par
{\bkmkstart AAAAAAACNU}{\bkmkend AAAAAAACNU}
00154 {\cf21 #endif }{\cf20 /*__CMDLIB__*/}{\cf21 }\par
{\bkmkstart AAAAAAACNV}{\bkmkend AAAAAAACNV}
00155 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CmdLine.h\par \pard\plain 
{\bkmkstart AAAAAAACNW}
{\bkmkend AAAAAAACNW}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAACNX}{\bkmkend AAAAAAACNX}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAACNY}{\bkmkend AAAAAAACNY}
00002 {\cf20 //}\par
{\bkmkstart AAAAAAACNZ}{\bkmkend AAAAAAACNZ}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAACOA}{\bkmkend AAAAAAACOA}
00004 {\cf20 //}\par
{\bkmkstart AAAAAAACOB}{\bkmkend AAAAAAACOB}
00005 {\cf20 // file: CmdLine.h}\par
{\bkmkstart AAAAAAACOC}{\bkmkend AAAAAAACOC}
00006 {\cf20 // last modified:}\par
{\bkmkstart AAAAAAACOD}{\bkmkend AAAAAAACOD}
00007 {\cf20 // copyright:}\par
{\bkmkstart AAAAAAACOE}{\bkmkend AAAAAAACOE}
00008 {\cf20 // version:}\par
{\bkmkstart AAAAAAACOF}{\bkmkend AAAAAAACOF}
00009 {\cf20 //}\par
{\bkmkstart AAAAAAACOG}{\bkmkend AAAAAAACOG}
00010 {\cf20 // email:}\par
{\bkmkstart AAAAAAACOH}{\bkmkend AAAAAAACOH}
00011 {\cf20 // web:}\par
{\bkmkstart AAAAAAACOI}{\bkmkend AAAAAAACOI}
00012 {\cf20 //}\par
{\bkmkstart AAAAAAACOJ}{\bkmkend AAAAAAACOJ}
00013 {\cf20 */}\par
{\bkmkstart AAAAAAACOK}{\bkmkend AAAAAAACOK}
00014 \par
{\bkmkstart AAAAAAACOL}{\bkmkend AAAAAAACOL}
00015 {\cf21 #ifndef INCLUDED_CMDLINE}\par
{\bkmkstart AAAAAAACOM}{\bkmkend AAAAAAACOM}
00016 {\cf21 #define INCLUDED_CMDLINE}\par
{\bkmkstart AAAAAAACON}{\bkmkend AAAAAAACON}
00017 \par
{\bkmkstart AAAAAAACOO}{\bkmkend AAAAAAACOO}
00018 {\cf21 #include <cstdio>}\par
{\bkmkstart AAAAAAACOP}{\bkmkend AAAAAAACOP}
00019 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAACOQ}{\bkmkend AAAAAAACOQ}
00020 {\cf21 #include <iterator>}\par
{\bkmkstart AAAAAAACOR}{\bkmkend AAAAAAACOR}
00021 \par
{\bkmkstart AAAAAAACOS}{\bkmkend AAAAAAACOS}
00022 \par
{\bkmkstart AAAAAAACOT}{\bkmkend AAAAAAACOT}
00023 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAACOU}{\bkmkend AAAAAAACOU}
00024 {\cf17 extern} {\cf22 "C"}\par
{\bkmkstart AAAAAAACOV}{\bkmkend AAAAAAACOV}
00025 \{\par
{\bkmkstart AAAAAAACOW}{\bkmkend AAAAAAACOW}
00026 {\cf21 #endif}\par
{\bkmkstart AAAAAAACOX}{\bkmkend AAAAAAACOX}
00027 \par
{\bkmkstart AAAAAAACOY}{\bkmkend AAAAAAACOY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACOZ" }{}}{\fldrslt {\cs37\ul\cf2 00028}}}
 {\cf17 typedef} {\cf17 struct}\par
{\bkmkstart AAAAAAACPA}{\bkmkend AAAAAAACPA}
00029 \{\par
{\bkmkstart AAAAAAACPB}{\bkmkend AAAAAAACPB}
00030     {\cf18 unsigned} {\cf18 char} x0;\par
{\bkmkstart AAAAAAACPC}{\bkmkend AAAAAAACPC}
00031     {\cf18 unsigned} {\cf18 char} y0;\par
{\bkmkstart AAAAAAACPD}{\bkmkend AAAAAAACPD}
00032     {\cf18 unsigned} {\cf18 char} x1;\par
{\bkmkstart AAAAAAACPE}{\bkmkend AAAAAAACPE}
00033     {\cf18 unsigned} {\cf18 char} y1;\par
{\bkmkstart AAAAAAACPF}{\bkmkend AAAAAAACPF}
00034 \} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACOZ" }{}}{\fldrslt {\cs37\ul\cf2 line_t}}}
;\par
{\bkmkstart AAAAAAACPG}{\bkmkend AAAAAAACPG}
00035 \par
{\bkmkstart AAAAAAACPH}{\bkmkend AAAAAAACPH}
00036 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAACPI}{\bkmkend AAAAAAACPI}
00037 \}\par
{\bkmkstart AAAAAAACPJ}{\bkmkend AAAAAAACPJ}
00038 {\cf21 #endif}\par
{\bkmkstart AAAAAAACPK}{\bkmkend AAAAAAACPK}
00039 \par
{\bkmkstart AAAAAAACPL}{\bkmkend AAAAAAACPL}
00040 {\cf17 typedef} std::vector<line_t> drawlines_t;\par
{\bkmkstart AAAAAAACPM}{\bkmkend AAAAAAACPM}
00041 \par
{\bkmkstart AAAAAAACPN}{\bkmkend AAAAAAACPN}
00042 \par
{\bkmkstart AAAAAAACPO}{\bkmkend AAAAAAACPO}
00043 {\cf21 #endif }{\cf20 // INCLUDED_CMDLINE}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GlPainter.cpp\par \pard\plain 
{\bkmkstart AAAAAAACPP}
{\bkmkend AAAAAAACPP}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAACPQ}{\bkmkend AAAAAAACPQ}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAACPR}{\bkmkend AAAAAAACPR}
00002 {\cf20 }\par
{\bkmkstart AAAAAAACPS}{\bkmkend AAAAAAACPS}
00003 {\cf20 ===== GlPainter.cpp ========================================================}\par
{\bkmkstart AAAAAAACPT}{\bkmkend AAAAAAACPT}
00004 {\cf20 }\par
{\bkmkstart AAAAAAACPU}{\bkmkend AAAAAAACPU}
00005 {\cf20 */}\par
{\bkmkstart AAAAAAACPV}{\bkmkend AAAAAAACPV}
00006 \par
{\bkmkstart AAAAAAACPW}{\bkmkend AAAAAAACPW}
00007 {\cf21 #include <cstdio>}\par
{\bkmkstart AAAAAAACPX}{\bkmkend AAAAAAACPX}
00008 {\cf21 #include <cstdlib>}\par
{\bkmkstart AAAAAAACPY}{\bkmkend AAAAAAACPY}
00009 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAACPZ}{\bkmkend AAAAAAACPZ}
00010 \par
{\bkmkstart AAAAAAACQA}{\bkmkend AAAAAAACQA}
00011 {\cf21 #include <mx/mx.h>}\par
{\bkmkstart AAAAAAACQB}{\bkmkend AAAAAAACQB}
00012 \par
{\bkmkstart AAAAAAACQC}{\bkmkend AAAAAAACQC}
00013 {\cf21 #include "shared.h"}\par
{\bkmkstart AAAAAAACQD}{\bkmkend AAAAAAACQD}
00014 {\cf21 #include "server.h"}\par
{\bkmkstart AAAAAAACQE}{\bkmkend AAAAAAACQE}
00015 {\cf21 #include "client.h"}\par
{\bkmkstart AAAAAAACQF}{\bkmkend AAAAAAACQF}
00016 {\cf21 #include "SDWindow.h"}\par
{\bkmkstart AAAAAAACQG}{\bkmkend AAAAAAACQG}
00017 {\cf21 #include "RCWindow.h"}\par
{\bkmkstart AAAAAAACQH}{\bkmkend AAAAAAACQH}
00018 \par
{\bkmkstart AAAAAAACQI}{\bkmkend AAAAAAACQI}
00019 {\cf21 #include "action.h"}\par
{\bkmkstart AAAAAAACQJ}{\bkmkend AAAAAAACQJ}
00020 \par
{\bkmkstart AAAAAAACQK}{\bkmkend AAAAAAACQK}
00021 {\cf21 #ifdef _SOFTGPIO}\par
{\bkmkstart AAAAAAACQL}{\bkmkend AAAAAAACQL}
00022 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAACQM}{\bkmkend AAAAAAACQM}
00023 {\cf17 extern} {\cf22 "C"}\par
{\bkmkstart AAAAAAACQN}{\bkmkend AAAAAAACQN}
00024 \{\par
{\bkmkstart AAAAAAACQO}{\bkmkend AAAAAAACQO}
00025     {\cf17 namespace }\{\par
{\bkmkstart AAAAAAACQP}{\bkmkend AAAAAAACQP}
00026 {\cf21 #endif}\par
{\bkmkstart AAAAAAACQQ}{\bkmkend AAAAAAACQQ}
00027 {\cf17 extern} {\cf18 void} delay({\cf18 unsigned} {\cf18 int} howLong);\par
{\bkmkstart AAAAAAACQR}{\bkmkend AAAAAAACQR}
00028 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAACQS}{\bkmkend AAAAAAACQS}
00029     \} {\cf20 //namespace}\par
{\bkmkstart AAAAAAACQT}{\bkmkend AAAAAAACQT}
00030 \}\par
{\bkmkstart AAAAAAACQU}{\bkmkend AAAAAAACQU}
00031 {\cf21 #endif}\par
{\bkmkstart AAAAAAACQV}{\bkmkend AAAAAAACQV}
00032 {\cf21 #else}\par
{\bkmkstart AAAAAAACQW}{\bkmkend AAAAAAACQW}
00033 {\cf21 #include <wiringPi.h>}\par
{\bkmkstart AAAAAAACQX}{\bkmkend AAAAAAACQX}
00034 {\cf21 #endif }{\cf20 //_SOFTGPIO}\par
{\bkmkstart AAAAAAACQY}{\bkmkend AAAAAAACQY}
00035 \par
{\bkmkstart AAAAAAACQZ}{\bkmkend AAAAAAACQZ}
00036 {\cf21 #include "GlPainter.h"}\par
{\bkmkstart AAAAAAACRA}{\bkmkend AAAAAAACRA}
00037 \par
{\bkmkstart AAAAAAACRB}{\bkmkend AAAAAAACRB}
00038 {\cf18 int} glpainter_main()\{\par
{\bkmkstart AAAAAAACRC}{\bkmkend AAAAAAACRC}
00039         {\cf20 //}\par
{\bkmkstart AAAAAAACRD}{\bkmkend AAAAAAACRD}
00040         {\cf20 // make sure, we start in the right directory}\par
{\bkmkstart AAAAAAACRE}{\bkmkend AAAAAAACRE}
00041         {\cf20 //}\par
{\bkmkstart AAAAAAACRF}{\bkmkend AAAAAAACRF}
00042 \par
{\bkmkstart AAAAAAACRG}{\bkmkend AAAAAAACRG}
00043     {\cf19 for}(; !flag_server_ready || !flag_client_ready;)\par
{\bkmkstart AAAAAAACRH}{\bkmkend AAAAAAACRH}
00044         delay(BAUD_RATE);\par
{\bkmkstart AAAAAAACRI}{\bkmkend AAAAAAACRI}
00045 \par
{\bkmkstart AAAAAAACRJ}{\bkmkend AAAAAAACRJ}
00046 {\cf20 //      mx_setcwd (mx::getApplicationPath ());      //fix me}\par
{\bkmkstart AAAAAAACRK}{\bkmkend AAAAAAACRK}
00047 \par
{\bkmkstart AAAAAAACRL}{\bkmkend AAAAAAACRL}
00048         {\cf20 //mx::setDisplayMode (0, 0, 0);}\par
{\bkmkstart AAAAAAACRM}{\bkmkend AAAAAAACRM}
00049     mx::init (mxargc, mxargv);\par
{\bkmkstart AAAAAAACRN}{\bkmkend AAAAAAACRN}
00050 \par
{\bkmkstart AAAAAAACRO}{\bkmkend AAAAAAACRO}
00051     g_SDWindow = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRP" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow}}}
 ();\par
{\bkmkstart AAAAAAACRQ}{\bkmkend AAAAAAACRQ}
00052     g_SDWindow->setMenuBar (g_SDWindow->getMenuBar ());\par
{\bkmkstart AAAAAAACRR}{\bkmkend AAAAAAACRR}
00053     g_SDWindow->setBounds (20, 20, 640, 540);\par
{\bkmkstart AAAAAAACRS}{\bkmkend AAAAAAACRS}
00054     g_SDWindow->setVisible ({\cf17 true});\par
{\bkmkstart AAAAAAACRT}{\bkmkend AAAAAAACRT}
00055 \par
{\bkmkstart AAAAAAACRU}{\bkmkend AAAAAAACRU}
00056     g_RCWindow = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRV" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow}}}
 ();\par
{\bkmkstart AAAAAAACRW}{\bkmkend AAAAAAACRW}
00057     g_RCWindow->setMenuBar (g_RCWindow->getMenuBar ());\par
{\bkmkstart AAAAAAACRX}{\bkmkend AAAAAAACRX}
00058     g_RCWindow->setBounds (120, 20, 640, 540);\par
{\bkmkstart AAAAAAACRY}{\bkmkend AAAAAAACRY}
00059     g_RCWindow->setVisible ({\cf17 true});\par
{\bkmkstart AAAAAAACRZ}{\bkmkend AAAAAAACRZ}
00060 \par
{\bkmkstart AAAAAAACSA}{\bkmkend AAAAAAACSA}
00061     {\cf18 int} ret = mx::run ();\par
{\bkmkstart AAAAAAACSB}{\bkmkend AAAAAAACSB}
00062 \par
{\bkmkstart AAAAAAACSC}{\bkmkend AAAAAAACSC}
00063     mx::cleanup ();\par
{\bkmkstart AAAAAAACSD}{\bkmkend AAAAAAACSD}
00064 \par
{\bkmkstart AAAAAAACSE}{\bkmkend AAAAAAACSE}
00065     {\cf19 return} ret;\par
{\bkmkstart AAAAAAACSF}{\bkmkend AAAAAAACSF}
00066 \par
{\bkmkstart AAAAAAACSG}{\bkmkend AAAAAAACSG}
00067 \}\par
{\bkmkstart AAAAAAACSH}{\bkmkend AAAAAAACSH}
00068 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GlPainter.h\par \pard\plain 
{\bkmkstart AAAAAAACSI}
{\bkmkend AAAAAAACSI}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAACSJ}{\bkmkend AAAAAAACSJ}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAACSK}{\bkmkend AAAAAAACSK}
00002 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAACSL}{\bkmkend AAAAAAACSL}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAACSM}{\bkmkend AAAAAAACSM}
00004 {\cf20 // Purpose:}\par
{\bkmkstart AAAAAAACSN}{\bkmkend AAAAAAACSN}
00005 {\cf20 //}\par
{\bkmkstart AAAAAAACSO}{\bkmkend AAAAAAACSO}
00006 {\cf20 // $NoKeywords: $}\par
{\bkmkstart AAAAAAACSP}{\bkmkend AAAAAAACSP}
00007 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAACSQ}{\bkmkend AAAAAAACSQ}
00008 {\cf20 */}\par
{\bkmkstart AAAAAAACSR}{\bkmkend AAAAAAACSR}
00009 \par
{\bkmkstart AAAAAAACSS}{\bkmkend AAAAAAACSS}
00010 \par
{\bkmkstart AAAAAAACST}{\bkmkend AAAAAAACST}
00011 {\cf21 #ifndef __GLPAINTER__}\par
{\bkmkstart AAAAAAACSU}{\bkmkend AAAAAAACSU}
00012 {\cf21 #define __GLPAINTER__}\par
{\bkmkstart AAAAAAACSV}{\bkmkend AAAAAAACSV}
00013 \par
{\bkmkstart AAAAAAACSW}{\bkmkend AAAAAAACSW}
00014 \par
{\bkmkstart AAAAAAACSX}{\bkmkend AAAAAAACSX}
00015 {\cf20 /*}\par
{\bkmkstart AAAAAAACSY}{\bkmkend AAAAAAACSY}
00016 {\cf20 // GlPainter.h}\par
{\bkmkstart AAAAAAACSZ}{\bkmkend AAAAAAACSZ}
00017 {\cf20 */}\par
{\bkmkstart AAAAAAACTA}{\bkmkend AAAAAAACTA}
00018 \par
{\bkmkstart AAAAAAACTB}{\bkmkend AAAAAAACTB}
00019 \par
{\bkmkstart AAAAAAACTC}{\bkmkend AAAAAAACTC}
00020 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAACTD}{\bkmkend AAAAAAACTD}
00021 {\cf17 extern} {\cf22 "C"}\par
{\bkmkstart AAAAAAACTE}{\bkmkend AAAAAAACTE}
00022 \{\par
{\bkmkstart AAAAAAACTF}{\bkmkend AAAAAAACTF}
00023 {\cf21 #endif}\par
{\bkmkstart AAAAAAACTG}{\bkmkend AAAAAAACTG}
00024 \par
{\bkmkstart AAAAAAACTH}{\bkmkend AAAAAAACTH}
00025 {\cf18 int} glpainter_main();\par
{\bkmkstart AAAAAAACTI}{\bkmkend AAAAAAACTI}
00026 \par
{\bkmkstart AAAAAAACTJ}{\bkmkend AAAAAAACTJ}
00027 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAACTK}{\bkmkend AAAAAAACTK}
00028 \}\par
{\bkmkstart AAAAAAACTL}{\bkmkend AAAAAAACTL}
00029 {\cf21 #endif}\par
{\bkmkstart AAAAAAACTM}{\bkmkend AAAAAAACTM}
00030 \par
{\bkmkstart AAAAAAACTN}{\bkmkend AAAAAAACTN}
00031 \par
{\bkmkstart AAAAAAACTO}{\bkmkend AAAAAAACTO}
00032 {\cf21 #endif  }{\cf20 /*__GLPAINTER__*/}{\cf21 }\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GlWindow.cpp\par \pard\plain 
{\bkmkstart AAAAAAACTP}
{\bkmkend AAAAAAACTP}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAACTQ}{\bkmkend AAAAAAACTQ}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAACTR}{\bkmkend AAAAAAACTR}
00002 {\cf20 //}\par
{\bkmkstart AAAAAAACTS}{\bkmkend AAAAAAACTS}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAACTT}{\bkmkend AAAAAAACTT}
00004 {\cf20 //}\par
{\bkmkstart AAAAAAACTU}{\bkmkend AAAAAAACTU}
00005 {\cf20 // file: GlWindow.cpp}\par
{\bkmkstart AAAAAAACTV}{\bkmkend AAAAAAACTV}
00006 {\cf20 // last modified:}\par
{\bkmkstart AAAAAAACTW}{\bkmkend AAAAAAACTW}
00007 {\cf20 // copyright:}\par
{\bkmkstart AAAAAAACTX}{\bkmkend AAAAAAACTX}
00008 {\cf20 // version:}\par
{\bkmkstart AAAAAAACTY}{\bkmkend AAAAAAACTY}
00009 {\cf20 //}\par
{\bkmkstart AAAAAAACTZ}{\bkmkend AAAAAAACTZ}
00010 {\cf20 // email:}\par
{\bkmkstart AAAAAAACUA}{\bkmkend AAAAAAACUA}
00011 {\cf20 // web:}\par
{\bkmkstart AAAAAAACUB}{\bkmkend AAAAAAACUB}
00012 {\cf20 //}\par
{\bkmkstart AAAAAAACUC}{\bkmkend AAAAAAACUC}
00013 {\cf20 */}\par
{\bkmkstart AAAAAAACUD}{\bkmkend AAAAAAACUD}
00014 \par
{\bkmkstart AAAAAAACUE}{\bkmkend AAAAAAACUE}
00015 {\cf21 #include <mx/mx.h>}\par
{\bkmkstart AAAAAAACUF}{\bkmkend AAAAAAACUF}
00016 {\cf21 #include <mx/mxMessageBox.h>}\par
{\bkmkstart AAAAAAACUG}{\bkmkend AAAAAAACUG}
00017 {\cf20 //#include <mxTga.h>}\par
{\bkmkstart AAAAAAACUH}{\bkmkend AAAAAAACUH}
00018 {\cf20 //#include <mxPcx.h>}\par
{\bkmkstart AAAAAAACUI}{\bkmkend AAAAAAACUI}
00019 {\cf20 //#include <mxBmp.h>}\par
{\bkmkstart AAAAAAACUJ}{\bkmkend AAAAAAACUJ}
00020 {\cf21 #include <mx/gl.h>}\par
{\bkmkstart AAAAAAACUK}{\bkmkend AAAAAAACUK}
00021 {\cf21 #include <GL/glu.h>}\par
{\bkmkstart AAAAAAACUL}{\bkmkend AAAAAAACUL}
00022 {\cf21 #include <cstdio>}\par
{\bkmkstart AAAAAAACUM}{\bkmkend AAAAAAACUM}
00023 {\cf21 #include <cstdlib>}\par
{\bkmkstart AAAAAAACUN}{\bkmkend AAAAAAACUN}
00024 {\cf21 #include <ctime>}\par
{\bkmkstart AAAAAAACUO}{\bkmkend AAAAAAACUO}
00025 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAACUP}{\bkmkend AAAAAAACUP}
00026 \par
{\bkmkstart AAAAAAACUQ}{\bkmkend AAAAAAACUQ}
00027 {\cf21 #include "CmdLine.h"}\par
{\bkmkstart AAAAAAACUR}{\bkmkend AAAAAAACUR}
00028 {\cf21 #include "shared.h"}\par
{\bkmkstart AAAAAAACUS}{\bkmkend AAAAAAACUS}
00029 {\cf21 #include "server.h"}\par
{\bkmkstart AAAAAAACUT}{\bkmkend AAAAAAACUT}
00030 {\cf21 #include "client.h"}\par
{\bkmkstart AAAAAAACUU}{\bkmkend AAAAAAACUU}
00031 \par
{\bkmkstart AAAAAAACUV}{\bkmkend AAAAAAACUV}
00032 {\cf21 #include "GlWindow.h"}\par
{\bkmkstart AAAAAAACUW}{\bkmkend AAAAAAACUW}
00033 \par
{\bkmkstart AAAAAAACUX}{\bkmkend AAAAAAACUX}
00034 {\cf21 #ifdef _SOFTGPIO}\par
{\bkmkstart AAAAAAACUY}{\bkmkend AAAAAAACUY}
00035 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAACUZ}{\bkmkend AAAAAAACUZ}
00036 {\cf17 extern} {\cf22 "C"}\par
{\bkmkstart AAAAAAACVA}{\bkmkend AAAAAAACVA}
00037 \{\par
{\bkmkstart AAAAAAACVB}{\bkmkend AAAAAAACVB}
00038     {\cf17 namespace }\{\par
{\bkmkstart AAAAAAACVC}{\bkmkend AAAAAAACVC}
00039 {\cf21 #endif}\par
{\bkmkstart AAAAAAACVD}{\bkmkend AAAAAAACVD}
00040 {\cf17 extern} {\cf18 void} delay({\cf18 unsigned} {\cf18 int} howLong);\par
{\bkmkstart AAAAAAACVE}{\bkmkend AAAAAAACVE}
00041 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAACVF}{\bkmkend AAAAAAACVF}
00042     \} {\cf20 //namespace}\par
{\bkmkstart AAAAAAACVG}{\bkmkend AAAAAAACVG}
00043 \}\par
{\bkmkstart AAAAAAACVH}{\bkmkend AAAAAAACVH}
00044 {\cf21 #endif}\par
{\bkmkstart AAAAAAACVI}{\bkmkend AAAAAAACVI}
00045 {\cf21 #else}\par
{\bkmkstart AAAAAAACVJ}{\bkmkend AAAAAAACVJ}
00046 {\cf21 #include <wiringPi.h>}\par
{\bkmkstart AAAAAAACVK}{\bkmkend AAAAAAACVK}
00047 {\cf21 #endif }{\cf20 //_SOFTGPIO}\par
{\bkmkstart AAAAAAACVL}{\bkmkend AAAAAAACVL}
00048 \par
{\bkmkstart AAAAAAACVM}{\bkmkend AAAAAAACVM}
00049 \par
{\bkmkstart AAAAAAACVN}{\bkmkend AAAAAAACVN}
00050 {\cf17 extern} {\cf18 char} g_appTitle[];\par
{\bkmkstart AAAAAAACVO}{\bkmkend AAAAAAACVO}
00051 \par
{\bkmkstart AAAAAAACVP}{\bkmkend AAAAAAACVP}
00052 \par
{\bkmkstart AAAAAAACVQ}{\bkmkend AAAAAAACVQ}
00053 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 *g_GlWindow = 0;\par
{\bkmkstart AAAAAAACVS}{\bkmkend AAAAAAACVS}
00054 \par
{\bkmkstart AAAAAAACVT}{\bkmkend AAAAAAACVT}
00055 GlWindow :: GlWindow( mxWindow *parent, {\cf18 int} x, {\cf18 int} y, {\cf18 int} w, {\cf18 int} h, {\cf17 const} {\cf18 char} *label, {\cf18 int} style ) : mxGlWindow( parent, x, y, w, h, label, style )\par
{\bkmkstart AAAAAAACVU}{\bkmkend AAAAAAACVU}
00056 \{\par
{\bkmkstart AAAAAAACVV}{\bkmkend AAAAAAACVV}
00057 {\cf20 //      glDepthFunc( GL_LEQUAL );}\par
{\bkmkstart AAAAAAACVW}{\bkmkend AAAAAAACVW}
00058 \par
{\bkmkstart AAAAAAACVX}{\bkmkend AAAAAAACVX}
00059         {\cf19 if}( !parent ) setVisible( {\cf17 true} );\par
{\bkmkstart AAAAAAACVY}{\bkmkend AAAAAAACVY}
00060         {\cf19 else} mx :: setIdleWindow ( {\cf17 this} );\par
{\bkmkstart AAAAAAACVZ}{\bkmkend AAAAAAACVZ}
00061 \par
{\bkmkstart AAAAAAACWA}{\bkmkend AAAAAAACWA}
00062 {\cf20 //      line_t line1 = \{0,0,255,255\};}\par
{\bkmkstart AAAAAAACWB}{\bkmkend AAAAAAACWB}
00063 {\cf20 //      CmdLines.assign(1, line1);}\par
{\bkmkstart AAAAAAACWC}{\bkmkend AAAAAAACWC}
00064             x0 = 0;\par
{\bkmkstart AAAAAAACWD}{\bkmkend AAAAAAACWD}
00065             y0 = 0;\par
{\bkmkstart AAAAAAACWE}{\bkmkend AAAAAAACWE}
00066             x1 = 0;\par
{\bkmkstart AAAAAAACWF}{\bkmkend AAAAAAACWF}
00067             y1 = 0;\par
{\bkmkstart AAAAAAACWG}{\bkmkend AAAAAAACWG}
00068 {\cf20 //    PrevLine.x0 = 0;}\par
{\bkmkstart AAAAAAACWH}{\bkmkend AAAAAAACWH}
00069 {\cf20 //    PrevLine.y0 = 0;}\par
{\bkmkstart AAAAAAACWI}{\bkmkend AAAAAAACWI}
00070 {\cf20 //    PrevLine.x1 = 0;}\par
{\bkmkstart AAAAAAACWJ}{\bkmkend AAAAAAACWJ}
00071 {\cf20 //    PrevLine.y1 = 0;}\par
{\bkmkstart AAAAAAACWK}{\bkmkend AAAAAAACWK}
00072 \par
{\bkmkstart AAAAAAACWL}{\bkmkend AAAAAAACWL}
00073     setTimer( BAUD_RATE * 10 );\par
{\bkmkstart AAAAAAACWM}{\bkmkend AAAAAAACWM}
00074 \}\par
{\bkmkstart AAAAAAACWN}{\bkmkend AAAAAAACWN}
00075 \par
{\bkmkstart AAAAAAACWO}{\bkmkend AAAAAAACWO}
00076 GlWindow :: ~GlWindow( {\cf18 void} )\par
{\bkmkstart AAAAAAACWP}{\bkmkend AAAAAAACWP}
00077 \{\par
{\bkmkstart AAAAAAACWQ}{\bkmkend AAAAAAACWQ}
00078         mx::setIdleWindow( 0 );\par
{\bkmkstart AAAAAAACWR}{\bkmkend AAAAAAACWR}
00079 \}\par
{\bkmkstart AAAAAAACWS}{\bkmkend AAAAAAACWS}
00080 \par
{\bkmkstart AAAAAAACWT}{\bkmkend AAAAAAACWT}
00081 {\cf18 int} GlWindow :: handleEvent( mxEvent *event )\par
{\bkmkstart AAAAAAACWU}{\bkmkend AAAAAAACWU}
00082 \{\par
{\bkmkstart AAAAAAACWV}{\bkmkend AAAAAAACWV}
00083 {\cf20 //      static float oldrx, oldry, oldtz, oldtx, oldty;}\par
{\bkmkstart AAAAAAACWW}{\bkmkend AAAAAAACWW}
00084 {\cf20 //      static float oldlx, oldly;}\par
{\bkmkstart AAAAAAACWX}{\bkmkend AAAAAAACWX}
00085 {\cf20 //      static int oldx, oldy;}\par
{\bkmkstart AAAAAAACWY}{\bkmkend AAAAAAACWY}
00086 {\cf20 //      static double lastupdate;}\par
{\bkmkstart AAAAAAACWZ}{\bkmkend AAAAAAACWZ}
00087 \par
{\bkmkstart AAAAAAACXA}{\bkmkend AAAAAAACXA}
00088         {\cf19 switch}( event->event )\par
{\bkmkstart AAAAAAACXB}{\bkmkend AAAAAAACXB}
00089         \{\par
{\bkmkstart AAAAAAACXC}{\bkmkend AAAAAAACXC}
00090 {\cf20 /*}\par
{\bkmkstart AAAAAAACXD}{\bkmkend AAAAAAACXD}
00091 {\cf20     case mxEvent::ParentNotify:}\par
{\bkmkstart AAAAAAACXE}{\bkmkend AAAAAAACXE}
00092 {\cf20     \{}\par
{\bkmkstart AAAAAAACXF}{\bkmkend AAAAAAACXF}
00093 {\cf20         char msg[MAX_MSG_LENGTH + 1];}\par
{\bkmkstart AAAAAAACXG}{\bkmkend AAAAAAACXG}
00094 {\cf20         msg[MAX_MSG_LENGTH] = '\\0';}\par
{\bkmkstart AAAAAAACXH}{\bkmkend AAAAAAACXH}
00095 {\cf20         int i = 0;}\par
{\bkmkstart AAAAAAACXI}{\bkmkend AAAAAAACXI}
00096 {\cf20 }\par
{\bkmkstart AAAAAAACXJ}{\bkmkend AAAAAAACXJ}
00097 {\cf20         for(drawlines_t::iterator iter_buffer = Buffer.begin(); iter_buffer != Buffer.end() && i < MAX_MSG_LENGTH; ++iter_buffer, i+=4)}\par
{\bkmkstart AAAAAAACXK}{\bkmkend AAAAAAACXK}
00098 {\cf20         \{}\par
{\bkmkstart AAAAAAACXL}{\bkmkend AAAAAAACXL}
00099 {\cf20         msg[i] = iter_buffer->x0;}\par
{\bkmkstart AAAAAAACXM}{\bkmkend AAAAAAACXM}
00100 {\cf20         msg[i+1] = iter_buffer->y0;}\par
{\bkmkstart AAAAAAACXN}{\bkmkend AAAAAAACXN}
00101 {\cf20         msg[i+2] = iter_buffer->x1;}\par
{\bkmkstart AAAAAAACXO}{\bkmkend AAAAAAACXO}
00102 {\cf20         msg[i+3] = iter_buffer->y1;}\par
{\bkmkstart AAAAAAACXP}{\bkmkend AAAAAAACXP}
00103 {\cf20         \}}\par
{\bkmkstart AAAAAAACXQ}{\bkmkend AAAAAAACXQ}
00104 {\cf20 }\par
{\bkmkstart AAAAAAACXR}{\bkmkend AAAAAAACXR}
00105 {\cf20         msg[i] = '\\0';}\par
{\bkmkstart AAAAAAACXS}{\bkmkend AAAAAAACXS}
00106 {\cf20 }\par
{\bkmkstart AAAAAAACXT}{\bkmkend AAAAAAACXT}
00107 {\cf20         if(Buffer.size() == MAX_MSG_LENGTH/4)}\par
{\bkmkstart AAAAAAACXU}{\bkmkend AAAAAAACXU}
00108 {\cf20         \{}\par
{\bkmkstart AAAAAAACXV}{\bkmkend AAAAAAACXV}
00109 {\cf20             SV_insert_msg(msg);}\par
{\bkmkstart AAAAAAACXW}{\bkmkend AAAAAAACXW}
00110 {\cf20             Buffer.clear();}\par
{\bkmkstart AAAAAAACXX}{\bkmkend AAAAAAACXX}
00111 {\cf20         \}}\par
{\bkmkstart AAAAAAACXY}{\bkmkend AAAAAAACXY}
00112 {\cf20         else}\par
{\bkmkstart AAAAAAACXZ}{\bkmkend AAAAAAACXZ}
00113 {\cf20             if(!SV_insert_msg_nb(msg))}\par
{\bkmkstart AAAAAAACYA}{\bkmkend AAAAAAACYA}
00114 {\cf20                 Buffer.clear();}\par
{\bkmkstart AAAAAAACYB}{\bkmkend AAAAAAACYB}
00115 {\cf20     \}}\par
{\bkmkstart AAAAAAACYC}{\bkmkend AAAAAAACYC}
00116 {\cf20     break;}\par
{\bkmkstart AAAAAAACYD}{\bkmkend AAAAAAACYD}
00117 {\cf20 */}\par
{\bkmkstart AAAAAAACYE}{\bkmkend AAAAAAACYE}
00118     {\cf19 case} mxEvent::Timer:\par
{\bkmkstart AAAAAAACYF}{\bkmkend AAAAAAACYF}
00119     \{\par
{\bkmkstart AAAAAAACYG}{\bkmkend AAAAAAACYG}
00120                         redraw();\par
{\bkmkstart AAAAAAACYH}{\bkmkend AAAAAAACYH}
00121 \par
{\bkmkstart AAAAAAACYI}{\bkmkend AAAAAAACYI}
00122             {\cf19 if}(this->isEnabled())\par
{\bkmkstart AAAAAAACYJ}{\bkmkend AAAAAAACYJ}
00123             \{\par
{\bkmkstart AAAAAAACYK}{\bkmkend AAAAAAACYK}
00124                 {\cf19 if}(Buffer.size() < MAX_MSG_LENGTH/4)\par
{\bkmkstart AAAAAAACYL}{\bkmkend AAAAAAACYL}
00125                     \{\par
{\bkmkstart AAAAAAACYM}{\bkmkend AAAAAAACYM}
00126                     {\cf18 unsigned} {\cf18 char} msg[MAX_MSG_LENGTH + 1];\par
{\bkmkstart AAAAAAACYN}{\bkmkend AAAAAAACYN}
00127                     msg[MAX_MSG_LENGTH] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAACYO}{\bkmkend AAAAAAACYO}
00128                     {\cf18 int} i = 0;\par
{\bkmkstart AAAAAAACYP}{\bkmkend AAAAAAACYP}
00129 \par
{\bkmkstart AAAAAAACYQ}{\bkmkend AAAAAAACYQ}
00130                     msg[MAX_MSG_LENGTH] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAACYR}{\bkmkend AAAAAAACYR}
00131 \par
{\bkmkstart AAAAAAACYS}{\bkmkend AAAAAAACYS}
00132                     {\cf19 for}(drawlines_t::iterator iter_buffer = Buffer.begin(); iter_buffer != Buffer.end() && i < MAX_MSG_LENGTH; ++iter_buffer, i+=4)\par
{\bkmkstart AAAAAAACYT}{\bkmkend AAAAAAACYT}
00133                     \{\par
{\bkmkstart AAAAAAACYU}{\bkmkend AAAAAAACYU}
00134                     msg[i] = iter_buffer->x0;\par
{\bkmkstart AAAAAAACYV}{\bkmkend AAAAAAACYV}
00135                     msg[i+1] = iter_buffer->y0;\par
{\bkmkstart AAAAAAACYW}{\bkmkend AAAAAAACYW}
00136                     msg[i+2] = iter_buffer->x1;\par
{\bkmkstart AAAAAAACYX}{\bkmkend AAAAAAACYX}
00137                     msg[i+3] = iter_buffer->y1;\par
{\bkmkstart AAAAAAACYY}{\bkmkend AAAAAAACYY}
00138                     \}\par
{\bkmkstart AAAAAAACYZ}{\bkmkend AAAAAAACYZ}
00139 \par
{\bkmkstart AAAAAAACZA}{\bkmkend AAAAAAACZA}
00140                     msg[i] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAACZB}{\bkmkend AAAAAAACZB}
00141 \par
{\bkmkstart AAAAAAACZC}{\bkmkend AAAAAAACZC}
00142                     {\cf19 if}(Buffer.size() == MAX_MSG_LENGTH/4)\par
{\bkmkstart AAAAAAACZD}{\bkmkend AAAAAAACZD}
00143                     \{\par
{\bkmkstart AAAAAAACZE}{\bkmkend AAAAAAACZE}
00144                         SV_insert_msg(msg);\par
{\bkmkstart AAAAAAACZF}{\bkmkend AAAAAAACZF}
00145                         Buffer.clear();\par
{\bkmkstart AAAAAAACZG}{\bkmkend AAAAAAACZG}
00146                     \}\par
{\bkmkstart AAAAAAACZH}{\bkmkend AAAAAAACZH}
00147                     {\cf19 else}\par
{\bkmkstart AAAAAAACZI}{\bkmkend AAAAAAACZI}
00148                         {\cf19 if}(!SV_insert_msg_nb(msg))\par
{\bkmkstart AAAAAAACZJ}{\bkmkend AAAAAAACZJ}
00149                             Buffer.clear();\par
{\bkmkstart AAAAAAACZK}{\bkmkend AAAAAAACZK}
00150                 \}\par
{\bkmkstart AAAAAAACZL}{\bkmkend AAAAAAACZL}
00151                 {\cf19 else} {\cf19 if}(Buffer.size() > MAX_MSG_LENGTH/4)\par
{\bkmkstart AAAAAAACZM}{\bkmkend AAAAAAACZM}
00152                         Buffer.clear();\par
{\bkmkstart AAAAAAACZN}{\bkmkend AAAAAAACZN}
00153             \}\par
{\bkmkstart AAAAAAACZO}{\bkmkend AAAAAAACZO}
00154             {\cf19 else} {\cf19 if}(!this->isEnabled())\par
{\bkmkstart AAAAAAACZP}{\bkmkend AAAAAAACZP}
00155             \{\par
{\bkmkstart AAAAAAACZQ}{\bkmkend AAAAAAACZQ}
00156                 {\cf18 char} msg[MAX_MSG_LENGTH + 1];\par
{\bkmkstart AAAAAAACZR}{\bkmkend AAAAAAACZR}
00157                 msg[MAX_MSG_LENGTH] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAACZS}{\bkmkend AAAAAAACZS}
00158                 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACOZ" }{}}{\fldrslt {\cs37\ul\cf2 line_t}}}
 NewLine = \{0,0,0,0\};\par
{\bkmkstart AAAAAAACZT}{\bkmkend AAAAAAACZT}
00159 \par
{\bkmkstart AAAAAAACZU}{\bkmkend AAAAAAACZU}
00160                 {\cf19 if}(!CL_get_msg(msg))\par
{\bkmkstart AAAAAAACZV}{\bkmkend AAAAAAACZV}
00161                 \{\par
{\bkmkstart AAAAAAACZW}{\bkmkend AAAAAAACZW}
00162                     {\cf19 for}({\cf18 int} i=0; i < MAX_MSG_LENGTH; i+=4)\par
{\bkmkstart AAAAAAACZX}{\bkmkend AAAAAAACZX}
00163                     \{\par
{\bkmkstart AAAAAAACZY}{\bkmkend AAAAAAACZY}
00164                         {\cf19 if}(msg[i])\par
{\bkmkstart AAAAAAACZZ}{\bkmkend AAAAAAACZZ}
00165                             NewLine.x0 = msg[i];\par
{\bkmkstart AAAAAAADAA}{\bkmkend AAAAAAADAA}
00166                         {\cf19 else}\par
{\bkmkstart AAAAAAADAB}{\bkmkend AAAAAAADAB}
00167                             {\cf19 break};\par
{\bkmkstart AAAAAAADAC}{\bkmkend AAAAAAADAC}
00168                         {\cf19 if}(msg[i+1])\par
{\bkmkstart AAAAAAADAD}{\bkmkend AAAAAAADAD}
00169                             NewLine.y0 = msg[i+1];\par
{\bkmkstart AAAAAAADAE}{\bkmkend AAAAAAADAE}
00170                         {\cf19 else}\par
{\bkmkstart AAAAAAADAF}{\bkmkend AAAAAAADAF}
00171                             {\cf19 break};\par
{\bkmkstart AAAAAAADAG}{\bkmkend AAAAAAADAG}
00172                         {\cf19 if}(msg[i+2])\par
{\bkmkstart AAAAAAADAH}{\bkmkend AAAAAAADAH}
00173                             NewLine.x1 = msg[i+2];\par
{\bkmkstart AAAAAAADAI}{\bkmkend AAAAAAADAI}
00174                         {\cf19 else}\par
{\bkmkstart AAAAAAADAJ}{\bkmkend AAAAAAADAJ}
00175                             {\cf19 break};\par
{\bkmkstart AAAAAAADAK}{\bkmkend AAAAAAADAK}
00176                         {\cf19 if}(msg[i+3])\par
{\bkmkstart AAAAAAADAL}{\bkmkend AAAAAAADAL}
00177                             NewLine.y1 = msg[i+3];\par
{\bkmkstart AAAAAAADAM}{\bkmkend AAAAAAADAM}
00178                         {\cf19 else}\par
{\bkmkstart AAAAAAADAN}{\bkmkend AAAAAAADAN}
00179                             {\cf19 break};\par
{\bkmkstart AAAAAAADAO}{\bkmkend AAAAAAADAO}
00180 \par
{\bkmkstart AAAAAAADAP}{\bkmkend AAAAAAADAP}
00181                         {\cf19 if}(NewLine.x0 == 255 && NewLine.y0 == 255 && NewLine.x1 == 255 && NewLine.y1 == 255)\par
{\bkmkstart AAAAAAADAQ}{\bkmkend AAAAAAADAQ}
00182                             CmdLines.clear();\par
{\bkmkstart AAAAAAADAR}{\bkmkend AAAAAAADAR}
00183                         {\cf19 else}\par
{\bkmkstart AAAAAAADAS}{\bkmkend AAAAAAADAS}
00184                             CmdLines.push_back(NewLine);\par
{\bkmkstart AAAAAAADAT}{\bkmkend AAAAAAADAT}
00185 \par
{\bkmkstart AAAAAAADAU}{\bkmkend AAAAAAADAU}
00186 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADAV}{\bkmkend AAAAAAADAV}
00187                         std::printf({\cf22 "RCWindow::newline: %d %d %d %d\\n"} ,NewLine.x0, NewLine.y0, NewLine.x1, NewLine.y1);\par
{\bkmkstart AAAAAAADAW}{\bkmkend AAAAAAADAW}
00188 {\cf21 #endif }{\cf20 // _DEBUG}\par
{\bkmkstart AAAAAAADAX}{\bkmkend AAAAAAADAX}
00189 \par
{\bkmkstart AAAAAAADAY}{\bkmkend AAAAAAADAY}
00190                     \}\par
{\bkmkstart AAAAAAADAZ}{\bkmkend AAAAAAADAZ}
00191                 \}\par
{\bkmkstart AAAAAAADBA}{\bkmkend AAAAAAADBA}
00192             \}\par
{\bkmkstart AAAAAAADBB}{\bkmkend AAAAAAADBB}
00193 \par
{\bkmkstart AAAAAAADBC}{\bkmkend AAAAAAADBC}
00194                 {\cf19 return} 1;\par
{\bkmkstart AAAAAAADBD}{\bkmkend AAAAAAADBD}
00195     \}\par
{\bkmkstart AAAAAAADBE}{\bkmkend AAAAAAADBE}
00196     {\cf19 break};\par
{\bkmkstart AAAAAAADBF}{\bkmkend AAAAAAADBF}
00197 \par
{\bkmkstart AAAAAAADBG}{\bkmkend AAAAAAADBG}
00198     {\cf20 /*}\par
{\bkmkstart AAAAAAADBH}{\bkmkend AAAAAAADBH}
00199 {\cf20         case mxEvent::Idle:}\par
{\bkmkstart AAAAAAADBI}{\bkmkend AAAAAAADBI}
00200 {\cf20         \{}\par
{\bkmkstart AAAAAAADBJ}{\bkmkend AAAAAAADBJ}
00201 {\cf20 }\par
{\bkmkstart AAAAAAADBK}{\bkmkend AAAAAAADBK}
00202 {\cf20                         redraw();}\par
{\bkmkstart AAAAAAADBL}{\bkmkend AAAAAAADBL}
00203 {\cf20                         delay(100);}\par
{\bkmkstart AAAAAAADBM}{\bkmkend AAAAAAADBM}
00204 {\cf20 }\par
{\bkmkstart AAAAAAADBN}{\bkmkend AAAAAAADBN}
00205 {\cf20 //              prev = curr;}\par
{\bkmkstart AAAAAAADBO}{\bkmkend AAAAAAADBO}
00206 {\cf20 }\par
{\bkmkstart AAAAAAADBP}{\bkmkend AAAAAAADBP}
00207 {\cf20             if(!this->isEnabled())}\par
{\bkmkstart AAAAAAADBQ}{\bkmkend AAAAAAADBQ}
00208 {\cf20             \{}\par
{\bkmkstart AAAAAAADBR}{\bkmkend AAAAAAADBR}
00209 {\cf20                 char msg[MAX_MSG_LENGTH + 1];}\par
{\bkmkstart AAAAAAADBS}{\bkmkend AAAAAAADBS}
00210 {\cf20                 msg[MAX_MSG_LENGTH] = '\\0';}\par
{\bkmkstart AAAAAAADBT}{\bkmkend AAAAAAADBT}
00211 {\cf20                 line_t NewLine = \{0,0,0,0\};}\par
{\bkmkstart AAAAAAADBU}{\bkmkend AAAAAAADBU}
00212 {\cf20 }\par
{\bkmkstart AAAAAAADBV}{\bkmkend AAAAAAADBV}
00213 {\cf20                 if(!CL_get_msg(msg))}\par
{\bkmkstart AAAAAAADBW}{\bkmkend AAAAAAADBW}
00214 {\cf20                 \{}\par
{\bkmkstart AAAAAAADBX}{\bkmkend AAAAAAADBX}
00215 {\cf20                     for(int i=0; i < MAX_MSG_LENGTH; i+=4)}\par
{\bkmkstart AAAAAAADBY}{\bkmkend AAAAAAADBY}
00216 {\cf20                     \{}\par
{\bkmkstart AAAAAAADBZ}{\bkmkend AAAAAAADBZ}
00217 {\cf20                         if(msg[i])}\par
{\bkmkstart AAAAAAADCA}{\bkmkend AAAAAAADCA}
00218 {\cf20                             NewLine.x0 = msg[i];}\par
{\bkmkstart AAAAAAADCB}{\bkmkend AAAAAAADCB}
00219 {\cf20                         else}\par
{\bkmkstart AAAAAAADCC}{\bkmkend AAAAAAADCC}
00220 {\cf20                             break;}\par
{\bkmkstart AAAAAAADCD}{\bkmkend AAAAAAADCD}
00221 {\cf20                         if(msg[i+1])}\par
{\bkmkstart AAAAAAADCE}{\bkmkend AAAAAAADCE}
00222 {\cf20                             NewLine.y0 = msg[i+1];}\par
{\bkmkstart AAAAAAADCF}{\bkmkend AAAAAAADCF}
00223 {\cf20                         else}\par
{\bkmkstart AAAAAAADCG}{\bkmkend AAAAAAADCG}
00224 {\cf20                             break;}\par
{\bkmkstart AAAAAAADCH}{\bkmkend AAAAAAADCH}
00225 {\cf20                         if(msg[i+2])}\par
{\bkmkstart AAAAAAADCI}{\bkmkend AAAAAAADCI}
00226 {\cf20                             NewLine.x1 = msg[i+2];}\par
{\bkmkstart AAAAAAADCJ}{\bkmkend AAAAAAADCJ}
00227 {\cf20                         else}\par
{\bkmkstart AAAAAAADCK}{\bkmkend AAAAAAADCK}
00228 {\cf20                             break;}\par
{\bkmkstart AAAAAAADCL}{\bkmkend AAAAAAADCL}
00229 {\cf20                         if(msg[i+3])}\par
{\bkmkstart AAAAAAADCM}{\bkmkend AAAAAAADCM}
00230 {\cf20                             NewLine.y1 = msg[i+3];}\par
{\bkmkstart AAAAAAADCN}{\bkmkend AAAAAAADCN}
00231 {\cf20                         else}\par
{\bkmkstart AAAAAAADCO}{\bkmkend AAAAAAADCO}
00232 {\cf20                             break;}\par
{\bkmkstart AAAAAAADCP}{\bkmkend AAAAAAADCP}
00233 {\cf20 }\par
{\bkmkstart AAAAAAADCQ}{\bkmkend AAAAAAADCQ}
00234 {\cf20                         if(NewLine.x0 == 255 && NewLine.y0 == 255 && NewLine.x1 == 255 && NewLine.y1 == 255)}\par
{\bkmkstart AAAAAAADCR}{\bkmkend AAAAAAADCR}
00235 {\cf20                             CmdLines.clear();}\par
{\bkmkstart AAAAAAADCS}{\bkmkend AAAAAAADCS}
00236 {\cf20                         else}\par
{\bkmkstart AAAAAAADCT}{\bkmkend AAAAAAADCT}
00237 {\cf20                             CmdLines.push_back(NewLine);}\par
{\bkmkstart AAAAAAADCU}{\bkmkend AAAAAAADCU}
00238 {\cf20 }\par
{\bkmkstart AAAAAAADCV}{\bkmkend AAAAAAADCV}
00239 {\cf20 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADCW}{\bkmkend AAAAAAADCW}
00240 {\cf20                         std::printf("RCWindow::newline: %d %d %d %d\\n" ,NewLine.x0, NewLine.y0, NewLine.x1, NewLine.y1);}\par
{\bkmkstart AAAAAAADCX}{\bkmkend AAAAAAADCX}
00241 {\cf20 #endif // _DEBUG}\par
{\bkmkstart AAAAAAADCY}{\bkmkend AAAAAAADCY}
00242 {\cf20 }\par
{\bkmkstart AAAAAAADCZ}{\bkmkend AAAAAAADCZ}
00243 {\cf20                     \}}\par
{\bkmkstart AAAAAAADDA}{\bkmkend AAAAAAADDA}
00244 {\cf20                 \}}\par
{\bkmkstart AAAAAAADDB}{\bkmkend AAAAAAADDB}
00245 {\cf20             \}}\par
{\bkmkstart AAAAAAADDC}{\bkmkend AAAAAAADDC}
00246 {\cf20 }\par
{\bkmkstart AAAAAAADDD}{\bkmkend AAAAAAADDD}
00247 {\cf20                 return 1;}\par
{\bkmkstart AAAAAAADDE}{\bkmkend AAAAAAADDE}
00248 {\cf20         \}}\par
{\bkmkstart AAAAAAADDF}{\bkmkend AAAAAAADDF}
00249 {\cf20         break;}\par
{\bkmkstart AAAAAAADDG}{\bkmkend AAAAAAADDG}
00250 {\cf20     */}\par
{\bkmkstart AAAAAAADDH}{\bkmkend AAAAAAADDH}
00251         {\cf19 case} mxEvent::MouseUp:\par
{\bkmkstart AAAAAAADDI}{\bkmkend AAAAAAADDI}
00252         \{\par
{\bkmkstart AAAAAAADDJ}{\bkmkend AAAAAAADDJ}
00253 {\cf20 //        char msg[MAX_MSG_LENGTH + 1];}\par
{\bkmkstart AAAAAAADDK}{\bkmkend AAAAAAADDK}
00254 {\cf20 //        int i = 0;}\par
{\bkmkstart AAAAAAADDL}{\bkmkend AAAAAAADDL}
00255             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACOZ" }{}}{\fldrslt {\cs37\ul\cf2 line_t}}}
 NewLine = \{x0,y0,x1,y1\};\par
{\bkmkstart AAAAAAADDM}{\bkmkend AAAAAAADDM}
00256 \par
{\bkmkstart AAAAAAADDN}{\bkmkend AAAAAAADDN}
00257 {\cf20 //          PrevLine = NewLine;}\par
{\bkmkstart AAAAAAADDO}{\bkmkend AAAAAAADDO}
00258             {\cf19 if}(Buffer.size() < MAX_MSG_LENGTH/4)\par
{\bkmkstart AAAAAAADDP}{\bkmkend AAAAAAADDP}
00259         \{\par
{\bkmkstart AAAAAAADDQ}{\bkmkend AAAAAAADDQ}
00260             {\cf18 unsigned} {\cf18 char} msg[MAX_MSG_LENGTH + 1];\par
{\bkmkstart AAAAAAADDR}{\bkmkend AAAAAAADDR}
00261             msg[MAX_MSG_LENGTH] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADDS}{\bkmkend AAAAAAADDS}
00262             {\cf18 int} i = 0;\par
{\bkmkstart AAAAAAADDT}{\bkmkend AAAAAAADDT}
00263 \par
{\bkmkstart AAAAAAADDU}{\bkmkend AAAAAAADDU}
00264             msg[MAX_MSG_LENGTH] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADDV}{\bkmkend AAAAAAADDV}
00265 \par
{\bkmkstart AAAAAAADDW}{\bkmkend AAAAAAADDW}
00266             CmdLines.push_back(NewLine);\par
{\bkmkstart AAAAAAADDX}{\bkmkend AAAAAAADDX}
00267             Buffer.push_back(NewLine);\par
{\bkmkstart AAAAAAADDY}{\bkmkend AAAAAAADDY}
00268 \par
{\bkmkstart AAAAAAADDZ}{\bkmkend AAAAAAADDZ}
00269 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADEA}{\bkmkend AAAAAAADEA}
00270             std::printf({\cf22 "SDWindow::newline\\n"});\par
{\bkmkstart AAAAAAADEB}{\bkmkend AAAAAAADEB}
00271 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADEC}{\bkmkend AAAAAAADEC}
00272 \par
{\bkmkstart AAAAAAADED}{\bkmkend AAAAAAADED}
00273             {\cf19 for}(drawlines_t::iterator iter_buffer = Buffer.begin(); iter_buffer != Buffer.end() && i < MAX_MSG_LENGTH; ++iter_buffer, i+=4)\par
{\bkmkstart AAAAAAADEE}{\bkmkend AAAAAAADEE}
00274             \{\par
{\bkmkstart AAAAAAADEF}{\bkmkend AAAAAAADEF}
00275             msg[i] = iter_buffer->x0;\par
{\bkmkstart AAAAAAADEG}{\bkmkend AAAAAAADEG}
00276             msg[i+1] = iter_buffer->y0;\par
{\bkmkstart AAAAAAADEH}{\bkmkend AAAAAAADEH}
00277             msg[i+2] = iter_buffer->x1;\par
{\bkmkstart AAAAAAADEI}{\bkmkend AAAAAAADEI}
00278             msg[i+3] = iter_buffer->y1;\par
{\bkmkstart AAAAAAADEJ}{\bkmkend AAAAAAADEJ}
00279             \}\par
{\bkmkstart AAAAAAADEK}{\bkmkend AAAAAAADEK}
00280 \par
{\bkmkstart AAAAAAADEL}{\bkmkend AAAAAAADEL}
00281             msg[i] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADEM}{\bkmkend AAAAAAADEM}
00282 \par
{\bkmkstart AAAAAAADEN}{\bkmkend AAAAAAADEN}
00283             {\cf19 if}(Buffer.size() == MAX_MSG_LENGTH/4)\par
{\bkmkstart AAAAAAADEO}{\bkmkend AAAAAAADEO}
00284             \{\par
{\bkmkstart AAAAAAADEP}{\bkmkend AAAAAAADEP}
00285                 SV_insert_msg(msg);\par
{\bkmkstart AAAAAAADEQ}{\bkmkend AAAAAAADEQ}
00286                 Buffer.clear();\par
{\bkmkstart AAAAAAADER}{\bkmkend AAAAAAADER}
00287             \}\par
{\bkmkstart AAAAAAADES}{\bkmkend AAAAAAADES}
00288             {\cf19 else}\par
{\bkmkstart AAAAAAADET}{\bkmkend AAAAAAADET}
00289                 {\cf19 if}(!SV_insert_msg_nb(msg))\par
{\bkmkstart AAAAAAADEU}{\bkmkend AAAAAAADEU}
00290                     Buffer.clear();\par
{\bkmkstart AAAAAAADEV}{\bkmkend AAAAAAADEV}
00291         \}\par
{\bkmkstart AAAAAAADEW}{\bkmkend AAAAAAADEW}
00292         {\cf19 else} {\cf19 if}(Buffer.size() > MAX_MSG_LENGTH/4)\par
{\bkmkstart AAAAAAADEX}{\bkmkend AAAAAAADEX}
00293                 Buffer.clear();\par
{\bkmkstart AAAAAAADEY}{\bkmkend AAAAAAADEY}
00294 \par
{\bkmkstart AAAAAAADEZ}{\bkmkend AAAAAAADEZ}
00295             x0 = 0;\par
{\bkmkstart AAAAAAADFA}{\bkmkend AAAAAAADFA}
00296             y0 = 0;\par
{\bkmkstart AAAAAAADFB}{\bkmkend AAAAAAADFB}
00297             x1 = 0;\par
{\bkmkstart AAAAAAADFC}{\bkmkend AAAAAAADFC}
00298             y1 = 0;\par
{\bkmkstart AAAAAAADFD}{\bkmkend AAAAAAADFD}
00299 {\cf20 //              g_viewerSettings.pause = false;}\par
{\bkmkstart AAAAAAADFE}{\bkmkend AAAAAAADFE}
00300         \}\par
{\bkmkstart AAAAAAADFF}{\bkmkend AAAAAAADFF}
00301         {\cf19 break};\par
{\bkmkstart AAAAAAADFG}{\bkmkend AAAAAAADFG}
00302 \par
{\bkmkstart AAAAAAADFH}{\bkmkend AAAAAAADFH}
00303         {\cf19 case} mxEvent::MouseDown:\par
{\bkmkstart AAAAAAADFI}{\bkmkend AAAAAAADFI}
00304         \{\par
{\bkmkstart AAAAAAADFJ}{\bkmkend AAAAAAADFJ}
00305 {\cf20 //          std::printf("%d,%d\\n", event->x, event->y);}\par
{\bkmkstart AAAAAAADFK}{\bkmkend AAAAAAADFK}
00306 {\cf20 //      std::printf("%d,%d,%d,%d\\n", x0, y0,x1,y1);}\par
{\bkmkstart AAAAAAADFL}{\bkmkend AAAAAAADFL}
00307             x0 = unsigned ({\cf18 char}( event->x * 255.0f / w2() ));\par
{\bkmkstart AAAAAAADFM}{\bkmkend AAAAAAADFM}
00308             y0 = unsigned ({\cf18 char}( event->y * 255.0f / h2() ));\par
{\bkmkstart AAAAAAADFN}{\bkmkend AAAAAAADFN}
00309             x1 = x0;\par
{\bkmkstart AAAAAAADFO}{\bkmkend AAAAAAADFO}
00310             y1 = y0;\par
{\bkmkstart AAAAAAADFP}{\bkmkend AAAAAAADFP}
00311 \par
{\bkmkstart AAAAAAADFQ}{\bkmkend AAAAAAADFQ}
00312                 {\cf19 return} 1;\par
{\bkmkstart AAAAAAADFR}{\bkmkend AAAAAAADFR}
00313         \}\par
{\bkmkstart AAAAAAADFS}{\bkmkend AAAAAAADFS}
00314         {\cf19 break};\par
{\bkmkstart AAAAAAADFT}{\bkmkend AAAAAAADFT}
00315 \par
{\bkmkstart AAAAAAADFU}{\bkmkend AAAAAAADFU}
00316         {\cf19 case} mxEvent::MouseDrag:\par
{\bkmkstart AAAAAAADFV}{\bkmkend AAAAAAADFV}
00317         \{\par
{\bkmkstart AAAAAAADFW}{\bkmkend AAAAAAADFW}
00318 {\cf20 //          std::printf("%d,%d,%d,%d\\n", x0, y0,x1,y1);}\par
{\bkmkstart AAAAAAADFX}{\bkmkend AAAAAAADFX}
00319             x1 = unsigned ({\cf18 char}( event->x * 255.0f / w2() ));\par
{\bkmkstart AAAAAAADFY}{\bkmkend AAAAAAADFY}
00320             y1 = unsigned ({\cf18 char}( event->y * 255.0f / h2() ));\par
{\bkmkstart AAAAAAADFZ}{\bkmkend AAAAAAADFZ}
00321 \par
{\bkmkstart AAAAAAADGA}{\bkmkend AAAAAAADGA}
00322                 redraw ();\par
{\bkmkstart AAAAAAADGB}{\bkmkend AAAAAAADGB}
00323 \par
{\bkmkstart AAAAAAADGC}{\bkmkend AAAAAAADGC}
00324                 {\cf19 return} 1;\par
{\bkmkstart AAAAAAADGD}{\bkmkend AAAAAAADGD}
00325         \}\par
{\bkmkstart AAAAAAADGE}{\bkmkend AAAAAAADGE}
00326         {\cf19 break};\par
{\bkmkstart AAAAAAADGF}{\bkmkend AAAAAAADGF}
00327         \} {\cf20 // switch (event->event)}\par
{\bkmkstart AAAAAAADGG}{\bkmkend AAAAAAADGG}
00328 \par
{\bkmkstart AAAAAAADGH}{\bkmkend AAAAAAADGH}
00329         {\cf19 return} 1;\par
{\bkmkstart AAAAAAADGI}{\bkmkend AAAAAAADGI}
00330 \}\par
{\bkmkstart AAAAAAADGJ}{\bkmkend AAAAAAADGJ}
00331 \par
{\bkmkstart AAAAAAADGK}{\bkmkend AAAAAAADGK}
00332 {\cf18 void} GlWindow :: draw( {\cf18 void} )\par
{\bkmkstart AAAAAAADGL}{\bkmkend AAAAAAADGL}
00333 \{\par
{\bkmkstart AAAAAAADGM}{\bkmkend AAAAAAADGM}
00334     glClearColor(1.0f, 1.0f, 1.0f, 1.0f);\par
{\bkmkstart AAAAAAADGN}{\bkmkend AAAAAAADGN}
00335     glClear(GL_COLOR_BUFFER_BIT);\par
{\bkmkstart AAAAAAADGO}{\bkmkend AAAAAAADGO}
00336 \par
{\bkmkstart AAAAAAADGP}{\bkmkend AAAAAAADGP}
00337     glViewport( 0, 0, w2(), h2() ); {\cf20 //resize glviewport}\par
{\bkmkstart AAAAAAADGQ}{\bkmkend AAAAAAADGQ}
00338     {\cf20 //glViewport( 0, 0, w(), h() ); //resize glviewport}\par
{\bkmkstart AAAAAAADGR}{\bkmkend AAAAAAADGR}
00339 \par
{\bkmkstart AAAAAAADGS}{\bkmkend AAAAAAADGS}
00340 {\cf20 //    glPushMatrix();}\par
{\bkmkstart AAAAAAADGT}{\bkmkend AAAAAAADGT}
00341 \par
{\bkmkstart AAAAAAADGU}{\bkmkend AAAAAAADGU}
00342     glLineWidth(3);\par
{\bkmkstart AAAAAAADGV}{\bkmkend AAAAAAADGV}
00343 \par
{\bkmkstart AAAAAAADGW}{\bkmkend AAAAAAADGW}
00344     glColor3f(0.0f, 0.0f, 0.0f);\par
{\bkmkstart AAAAAAADGX}{\bkmkend AAAAAAADGX}
00345     glBegin(GL_LINES);\par
{\bkmkstart AAAAAAADGY}{\bkmkend AAAAAAADGY}
00346 \par
{\bkmkstart AAAAAAADGZ}{\bkmkend AAAAAAADGZ}
00347     {\cf19 for}(drawlines_t::iterator iter_lines = CmdLines.begin(); iter_lines != CmdLines.end(); ++iter_lines)\par
{\bkmkstart AAAAAAADHA}{\bkmkend AAAAAAADHA}
00348     \{\par
{\bkmkstart AAAAAAADHB}{\bkmkend AAAAAAADHB}
00349         glVertex2f(iter_lines->x0 * 2.0f / 255.0f -1.0f, iter_lines->y0 * -2.0f / 255.0f +1.0f);\par
{\bkmkstart AAAAAAADHC}{\bkmkend AAAAAAADHC}
00350         glVertex2f(iter_lines->x1 * 2.0f / 255.0f -1.0f, iter_lines->y1 * -2.0f / 255.0f +1.0f);\par
{\bkmkstart AAAAAAADHD}{\bkmkend AAAAAAADHD}
00351     \}\par
{\bkmkstart AAAAAAADHE}{\bkmkend AAAAAAADHE}
00352 \par
{\bkmkstart AAAAAAADHF}{\bkmkend AAAAAAADHF}
00353     glVertex2f(x0 * 2.0f / 255.0f -1.0f, y0 * -2.0f / 255.0f +1.0f);\par
{\bkmkstart AAAAAAADHG}{\bkmkend AAAAAAADHG}
00354     glVertex2f(x1 * 2.0f / 255.0f -1.0f, y1 * -2.0f / 255.0f +1.0f);\par
{\bkmkstart AAAAAAADHH}{\bkmkend AAAAAAADHH}
00355 \par
{\bkmkstart AAAAAAADHI}{\bkmkend AAAAAAADHI}
00356     glEnd();\par
{\bkmkstart AAAAAAADHJ}{\bkmkend AAAAAAADHJ}
00357 \par
{\bkmkstart AAAAAAADHK}{\bkmkend AAAAAAADHK}
00358 \par
{\bkmkstart AAAAAAADHL}{\bkmkend AAAAAAADHL}
00359 {\cf20 //    glFlush();}\par
{\bkmkstart AAAAAAADHM}{\bkmkend AAAAAAADHM}
00360 \par
{\bkmkstart AAAAAAADHN}{\bkmkend AAAAAAADHN}
00361 {\cf20 //    glPopMatrix();}\par
{\bkmkstart AAAAAAADHO}{\bkmkend AAAAAAADHO}
00362 \}\par
{\bkmkstart AAAAAAADHP}{\bkmkend AAAAAAADHP}
00363 \par
{\bkmkstart AAAAAAADHQ}{\bkmkend AAAAAAADHQ}
00364 {\cf18 void} GlWindow :: LineClear()\{\par
{\bkmkstart AAAAAAADHR}{\bkmkend AAAAAAADHR}
00365 \par
{\bkmkstart AAAAAAADHS}{\bkmkend AAAAAAADHS}
00366     {\cf18 unsigned} {\cf18 char} msg[5] = \{255, 255, 255, 255, 0\};\par
{\bkmkstart AAAAAAADHT}{\bkmkend AAAAAAADHT}
00367     Buffer.clear();\par
{\bkmkstart AAAAAAADHU}{\bkmkend AAAAAAADHU}
00368     SV_insert_msg(msg);\par
{\bkmkstart AAAAAAADHV}{\bkmkend AAAAAAADHV}
00369     CmdLines.clear();\par
{\bkmkstart AAAAAAADHW}{\bkmkend AAAAAAADHW}
00370     redraw();\par
{\bkmkstart AAAAAAADHX}{\bkmkend AAAAAAADHX}
00371 \par
{\bkmkstart AAAAAAADHY}{\bkmkend AAAAAAADHY}
00372 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GlWindow.h\par \pard\plain 
{\bkmkstart AAAAAAADHZ}
{\bkmkend AAAAAAADHZ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAADIA}{\bkmkend AAAAAAADIA}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAADIB}{\bkmkend AAAAAAADIB}
00002 {\cf20 //}\par
{\bkmkstart AAAAAAADIC}{\bkmkend AAAAAAADIC}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAADID}{\bkmkend AAAAAAADID}
00004 {\cf20 //}\par
{\bkmkstart AAAAAAADIE}{\bkmkend AAAAAAADIE}
00005 {\cf20 // file: GlWindow.h}\par
{\bkmkstart AAAAAAADIF}{\bkmkend AAAAAAADIF}
00006 {\cf20 // last modified:}\par
{\bkmkstart AAAAAAADIG}{\bkmkend AAAAAAADIG}
00007 {\cf20 // copyright:}\par
{\bkmkstart AAAAAAADIH}{\bkmkend AAAAAAADIH}
00008 {\cf20 // version:}\par
{\bkmkstart AAAAAAADII}{\bkmkend AAAAAAADII}
00009 {\cf20 //}\par
{\bkmkstart AAAAAAADIJ}{\bkmkend AAAAAAADIJ}
00010 {\cf20 // email:}\par
{\bkmkstart AAAAAAADIK}{\bkmkend AAAAAAADIK}
00011 {\cf20 // web:}\par
{\bkmkstart AAAAAAADIL}{\bkmkend AAAAAAADIL}
00012 {\cf20 //}\par
{\bkmkstart AAAAAAADIM}{\bkmkend AAAAAAADIM}
00013 {\cf20 */}\par
{\bkmkstart AAAAAAADIN}{\bkmkend AAAAAAADIN}
00014 \par
{\bkmkstart AAAAAAADIO}{\bkmkend AAAAAAADIO}
00015 \par
{\bkmkstart AAAAAAADIP}{\bkmkend AAAAAAADIP}
00016 {\cf21 #ifndef INCLUDED_GLWINDOW}\par
{\bkmkstart AAAAAAADIQ}{\bkmkend AAAAAAADIQ}
00017 {\cf21 #define INCLUDED_GLWINDOW}\par
{\bkmkstart AAAAAAADIR}{\bkmkend AAAAAAADIR}
00018 \par
{\bkmkstart AAAAAAADIS}{\bkmkend AAAAAAADIS}
00019 \par
{\bkmkstart AAAAAAADIT}{\bkmkend AAAAAAADIT}
00020 \par
{\bkmkstart AAAAAAADIU}{\bkmkend AAAAAAADIU}
00021 {\cf21 #ifndef INCLUDED_MXGLWINDOW}\par
{\bkmkstart AAAAAAADIV}{\bkmkend AAAAAAADIV}
00022 {\cf21 #include <mx/mxGlWindow.h>}\par
{\bkmkstart AAAAAAADIW}{\bkmkend AAAAAAADIW}
00023 {\cf21 #endif}\par
{\bkmkstart AAAAAAADIX}{\bkmkend AAAAAAADIX}
00024 \par
{\bkmkstart AAAAAAADIY}{\bkmkend AAAAAAADIY}
00025 {\cf21 #include "CmdLine.h"}\par
{\bkmkstart AAAAAAADIZ}{\bkmkend AAAAAAADIZ}
00026 \par
{\bkmkstart AAAAAAADJA}{\bkmkend AAAAAAADJA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 00027}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 : {\cf17 public} mxGlWindow {\cf20 //should be replaced with QOpenGLWidget in Qt}\par
{\bkmkstart AAAAAAADJB}{\bkmkend AAAAAAADJB}
00028 \{\par
{\bkmkstart AAAAAAADJC}{\bkmkend AAAAAAADJC}
00029 {\cf17 public}:\par
{\bkmkstart AAAAAAADJD}{\bkmkend AAAAAAADJD}
00030         {\cf20 // CREATORS}\par
{\bkmkstart AAAAAAADJE}{\bkmkend AAAAAAADJE}
00031         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 (mxWindow *parent, {\cf18 int} x, {\cf18 int} y, {\cf18 int} w, {\cf18 int} h, {\cf17 const} {\cf18 char} *label, {\cf18 int} style);\par
{\bkmkstart AAAAAAADJF}{\bkmkend AAAAAAADJF}
00032         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 ~GlWindow}}}
 ();\par
{\bkmkstart AAAAAAADJG}{\bkmkend AAAAAAADJG}
00033 \par
{\bkmkstart AAAAAAADJH}{\bkmkend AAAAAAADJH}
00034         {\cf20 // MANIPULATORS}\par
{\bkmkstart AAAAAAADJI}{\bkmkend AAAAAAADJI}
00035         {\cf17 virtual} {\cf18 int} handleEvent (mxEvent *event);\par
{\bkmkstart AAAAAAADJJ}{\bkmkend AAAAAAADJJ}
00036         {\cf17 virtual} {\cf18 void} draw ();\par
{\bkmkstart AAAAAAADJK}{\bkmkend AAAAAAADJK}
00037 \par
{\bkmkstart AAAAAAADJL}{\bkmkend AAAAAAADJL}
00038         {\cf20 // ACCESSORS}\par
{\bkmkstart AAAAAAADJM}{\bkmkend AAAAAAADJM}
00039     {\cf18 void} InsertLine ({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACOZ" }{}}{\fldrslt {\cs37\ul\cf2 line_t}}}
 &newline) \{ CmdLines.push_back(newline); redraw(); \}\par
{\bkmkstart AAAAAAADJN}{\bkmkend AAAAAAADJN}
00040 {\cf20 //    line_t FetchLine ( void ) const \{ return PrevLine; \}}\par
{\bkmkstart AAAAAAADJO}{\bkmkend AAAAAAADJO}
00041     {\cf18 void} LineClear() ;\par
{\bkmkstart AAAAAAADJP}{\bkmkend AAAAAAADJP}
00042     {\cf18 void} LineUndo () \{ {\cf19 if}(!CmdLines.empty()) CmdLines.pop_back(); redraw(); \}\par
{\bkmkstart AAAAAAADJQ}{\bkmkend AAAAAAADJQ}
00043 {\cf17 private}:\par
{\bkmkstart AAAAAAADJR}{\bkmkend AAAAAAADJR}
00044     drawlines_t CmdLines;\par
{\bkmkstart AAAAAAADJS}{\bkmkend AAAAAAADJS}
00045     drawlines_t Buffer;\par
{\bkmkstart AAAAAAADJT}{\bkmkend AAAAAAADJT}
00046 {\cf20 //    line_t PrevLine;}\par
{\bkmkstart AAAAAAADJU}{\bkmkend AAAAAAADJU}
00047     {\cf18 unsigned} {\cf18 char} x0;\par
{\bkmkstart AAAAAAADJV}{\bkmkend AAAAAAADJV}
00048     {\cf18 unsigned} {\cf18 char} y0;\par
{\bkmkstart AAAAAAADJW}{\bkmkend AAAAAAADJW}
00049     {\cf18 unsigned} {\cf18 char} x1;\par
{\bkmkstart AAAAAAADJX}{\bkmkend AAAAAAADJX}
00050     {\cf18 unsigned} {\cf18 char} y1;\par
{\bkmkstart AAAAAAADJY}{\bkmkend AAAAAAADJY}
00051 \};\par
{\bkmkstart AAAAAAADJZ}{\bkmkend AAAAAAADJZ}
00052 \par
{\bkmkstart AAAAAAADKA}{\bkmkend AAAAAAADKA}
00053 \par
{\bkmkstart AAAAAAADKB}{\bkmkend AAAAAAADKB}
00054 \par
{\bkmkstart AAAAAAADKC}{\bkmkend AAAAAAADKC}
00055 {\cf17 extern} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 *g_GlWindow;\par
{\bkmkstart AAAAAAADKD}{\bkmkend AAAAAAADKD}
00056 \par
{\bkmkstart AAAAAAADKE}{\bkmkend AAAAAAADKE}
00057 \par
{\bkmkstart AAAAAAADKF}{\bkmkend AAAAAAADKF}
00058 \par
{\bkmkstart AAAAAAADKG}{\bkmkend AAAAAAADKG}
00059 {\cf21 #endif }{\cf20 // INCLUDED_GLWINDOW}\par
{\bkmkstart AAAAAAADKH}{\bkmkend AAAAAAADKH}
00060 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
painter.c\par \pard\plain 
{\bkmkstart AAAAAAADKI}
{\bkmkend AAAAAAADKI}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAADKJ}{\bkmkend AAAAAAADKJ}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAADKK}{\bkmkend AAAAAAADKK}
00002 {\cf20 //}\par
{\bkmkstart AAAAAAADKL}{\bkmkend AAAAAAADKL}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAADKM}{\bkmkend AAAAAAADKM}
00004 {\cf20 //}\par
{\bkmkstart AAAAAAADKN}{\bkmkend AAAAAAADKN}
00005 {\cf20 // file: painter.c}\par
{\bkmkstart AAAAAAADKO}{\bkmkend AAAAAAADKO}
00006 {\cf20 // last modified:}\par
{\bkmkstart AAAAAAADKP}{\bkmkend AAAAAAADKP}
00007 {\cf20 // copyright:}\par
{\bkmkstart AAAAAAADKQ}{\bkmkend AAAAAAADKQ}
00008 {\cf20 // version:}\par
{\bkmkstart AAAAAAADKR}{\bkmkend AAAAAAADKR}
00009 {\cf20 //}\par
{\bkmkstart AAAAAAADKS}{\bkmkend AAAAAAADKS}
00010 {\cf20 // email:}\par
{\bkmkstart AAAAAAADKT}{\bkmkend AAAAAAADKT}
00011 {\cf20 // web:}\par
{\bkmkstart AAAAAAADKU}{\bkmkend AAAAAAADKU}
00012 {\cf20 //}\par
{\bkmkstart AAAAAAADKV}{\bkmkend AAAAAAADKV}
00013 {\cf20 */}\par
{\bkmkstart AAAAAAADKW}{\bkmkend AAAAAAADKW}
00014 \par
{\bkmkstart AAAAAAADKX}{\bkmkend AAAAAAADKX}
00015 \par
{\bkmkstart AAAAAAADKY}{\bkmkend AAAAAAADKY}
00016 {\cf21 #include <stdio.h>}\par
{\bkmkstart AAAAAAADKZ}{\bkmkend AAAAAAADKZ}
00017 {\cf21 #include <string.h>}\par
{\bkmkstart AAAAAAADLA}{\bkmkend AAAAAAADLA}
00018 {\cf21 #include <stdlib.h>}\par
{\bkmkstart AAAAAAADLB}{\bkmkend AAAAAAADLB}
00019 \par
{\bkmkstart AAAAAAADLC}{\bkmkend AAAAAAADLC}
00020 {\cf21 #include "cmdlib.h"}\par
{\bkmkstart AAAAAAADLD}{\bkmkend AAAAAAADLD}
00021 {\cf21 #include "threads.h"}\par
{\bkmkstart AAAAAAADLE}{\bkmkend AAAAAAADLE}
00022 \par
{\bkmkstart AAAAAAADLF}{\bkmkend AAAAAAADLF}
00023 {\cf21 #include "GlPainter.h"}\par
{\bkmkstart AAAAAAADLG}{\bkmkend AAAAAAADLG}
00024 {\cf21 #include "shared.h"}\par
{\bkmkstart AAAAAAADLH}{\bkmkend AAAAAAADLH}
00025 {\cf21 #include "server.h"}\par
{\bkmkstart AAAAAAADLI}{\bkmkend AAAAAAADLI}
00026 {\cf21 #include "client.h"}\par
{\bkmkstart AAAAAAADLJ}{\bkmkend AAAAAAADLJ}
00027 {\cf21 #include "action.h"}\par
{\bkmkstart AAAAAAADLK}{\bkmkend AAAAAAADLK}
00028 \par
{\bkmkstart AAAAAAADLL}{\bkmkend AAAAAAADLL}
00029 {\cf20 //#include "painter.h"}\par
{\bkmkstart AAAAAAADLM}{\bkmkend AAAAAAADLM}
00030 \par
{\bkmkstart AAAAAAADLN}{\bkmkend AAAAAAADLN}
00031 {\cf18 int} mxargc;\par
{\bkmkstart AAAAAAADLO}{\bkmkend AAAAAAADLO}
00032 {\cf18 char} **mxargv;\par
{\bkmkstart AAAAAAADLP}{\bkmkend AAAAAAADLP}
00033 \par
{\bkmkstart AAAAAAADLQ}{\bkmkend AAAAAAADLQ}
00034 qboolean dumplog = {\cf17 false};\par
{\bkmkstart AAAAAAADLR}{\bkmkend AAAAAAADLR}
00035 {\cf18 void} WriteLog ({\cf18 char} *name)\par
{\bkmkstart AAAAAAADLS}{\bkmkend AAAAAAADLS}
00036 \{\par
{\bkmkstart AAAAAAADLT}{\bkmkend AAAAAAADLT}
00037         FILE            *out;\par
{\bkmkstart AAAAAAADLU}{\bkmkend AAAAAAADLU}
00038 \par
{\bkmkstart AAAAAAADLV}{\bkmkend AAAAAAADLV}
00039         out = fopen (name, {\cf22 "w"});\par
{\bkmkstart AAAAAAADLW}{\bkmkend AAAAAAADLW}
00040         {\cf19 if} (!out)\par
{\bkmkstart AAAAAAADLX}{\bkmkend AAAAAAADLX}
00041                 Error ({\cf22 "Couldn't open %s"}, name);\par
{\bkmkstart AAAAAAADLY}{\bkmkend AAAAAAADLY}
00042 \par
{\bkmkstart AAAAAAADLZ}{\bkmkend AAAAAAADLZ}
00043     fprintf (out, {\cf22 "\\n"});\par
{\bkmkstart AAAAAAADMA}{\bkmkend AAAAAAADMA}
00044 \par
{\bkmkstart AAAAAAADMB}{\bkmkend AAAAAAADMB}
00045 \par
{\bkmkstart AAAAAAADMC}{\bkmkend AAAAAAADMC}
00046         fclose (out);\par
{\bkmkstart AAAAAAADMD}{\bkmkend AAAAAAADMD}
00047 \}\par
{\bkmkstart AAAAAAADME}{\bkmkend AAAAAAADME}
00048 \par
{\bkmkstart AAAAAAADMF}{\bkmkend AAAAAAADMF}
00049 {\cf18 void} thread_glpainter()\par
{\bkmkstart AAAAAAADMG}{\bkmkend AAAAAAADMG}
00050 \{\par
{\bkmkstart AAAAAAADMH}{\bkmkend AAAAAAADMH}
00051 \par
{\bkmkstart AAAAAAADMI}{\bkmkend AAAAAAADMI}
00052 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADMJ}{\bkmkend AAAAAAADMJ}
00053     printf({\cf22 "start thread_glpainter\\n"});\par
{\bkmkstart AAAAAAADMK}{\bkmkend AAAAAAADMK}
00054 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADML}{\bkmkend AAAAAAADML}
00055 \par
{\bkmkstart AAAAAAADMM}{\bkmkend AAAAAAADMM}
00056     glpainter_main();\par
{\bkmkstart AAAAAAADMN}{\bkmkend AAAAAAADMN}
00057 \par
{\bkmkstart AAAAAAADMO}{\bkmkend AAAAAAADMO}
00058 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADMP}{\bkmkend AAAAAAADMP}
00059     printf({\cf22 "thread_glpainter terminated\\n"});\par
{\bkmkstart AAAAAAADMQ}{\bkmkend AAAAAAADMQ}
00060 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADMR}{\bkmkend AAAAAAADMR}
00061 \par
{\bkmkstart AAAAAAADMS}{\bkmkend AAAAAAADMS}
00062 \par
{\bkmkstart AAAAAAADMT}{\bkmkend AAAAAAADMT}
00063 \}\par
{\bkmkstart AAAAAAADMU}{\bkmkend AAAAAAADMU}
00064 \par
{\bkmkstart AAAAAAADMV}{\bkmkend AAAAAAADMV}
00065 {\cf18 void} thread_sender()\par
{\bkmkstart AAAAAAADMW}{\bkmkend AAAAAAADMW}
00066 \{\par
{\bkmkstart AAAAAAADMX}{\bkmkend AAAAAAADMX}
00067 \par
{\bkmkstart AAAAAAADMY}{\bkmkend AAAAAAADMY}
00068 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADMZ}{\bkmkend AAAAAAADMZ}
00069     printf({\cf22 "start thread_sender\\n"});\par
{\bkmkstart AAAAAAADNA}{\bkmkend AAAAAAADNA}
00070 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADNB}{\bkmkend AAAAAAADNB}
00071 \par
{\bkmkstart AAAAAAADNC}{\bkmkend AAAAAAADNC}
00072     sender_main();\par
{\bkmkstart AAAAAAADND}{\bkmkend AAAAAAADND}
00073 \par
{\bkmkstart AAAAAAADNE}{\bkmkend AAAAAAADNE}
00074 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADNF}{\bkmkend AAAAAAADNF}
00075     printf({\cf22 "thread_sender terminated\\n"});\par
{\bkmkstart AAAAAAADNG}{\bkmkend AAAAAAADNG}
00076 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADNH}{\bkmkend AAAAAAADNH}
00077 \par
{\bkmkstart AAAAAAADNI}{\bkmkend AAAAAAADNI}
00078 \}\par
{\bkmkstart AAAAAAADNJ}{\bkmkend AAAAAAADNJ}
00079 \par
{\bkmkstart AAAAAAADNK}{\bkmkend AAAAAAADNK}
00080 {\cf18 void} thread_receiver()\par
{\bkmkstart AAAAAAADNL}{\bkmkend AAAAAAADNL}
00081 \{\par
{\bkmkstart AAAAAAADNM}{\bkmkend AAAAAAADNM}
00082 \par
{\bkmkstart AAAAAAADNN}{\bkmkend AAAAAAADNN}
00083 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADNO}{\bkmkend AAAAAAADNO}
00084     printf({\cf22 "start thread_receiver\\n"});\par
{\bkmkstart AAAAAAADNP}{\bkmkend AAAAAAADNP}
00085 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADNQ}{\bkmkend AAAAAAADNQ}
00086 \par
{\bkmkstart AAAAAAADNR}{\bkmkend AAAAAAADNR}
00087     receiver_main();\par
{\bkmkstart AAAAAAADNS}{\bkmkend AAAAAAADNS}
00088 \par
{\bkmkstart AAAAAAADNT}{\bkmkend AAAAAAADNT}
00089 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADNU}{\bkmkend AAAAAAADNU}
00090     printf({\cf22 "thread_receiver terminated\\n"});\par
{\bkmkstart AAAAAAADNV}{\bkmkend AAAAAAADNV}
00091 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADNW}{\bkmkend AAAAAAADNW}
00092 \par
{\bkmkstart AAAAAAADNX}{\bkmkend AAAAAAADNX}
00093 \}\par
{\bkmkstart AAAAAAADNY}{\bkmkend AAAAAAADNY}
00094 \par
{\bkmkstart AAAAAAADNZ}{\bkmkend AAAAAAADNZ}
00095 {\cf18 void} thread_server()\par
{\bkmkstart AAAAAAADOA}{\bkmkend AAAAAAADOA}
00096 \{\par
{\bkmkstart AAAAAAADOB}{\bkmkend AAAAAAADOB}
00097 \par
{\bkmkstart AAAAAAADOC}{\bkmkend AAAAAAADOC}
00098 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADOD}{\bkmkend AAAAAAADOD}
00099     printf({\cf22 "start thread_server\\n"});\par
{\bkmkstart AAAAAAADOE}{\bkmkend AAAAAAADOE}
00100 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADOF}{\bkmkend AAAAAAADOF}
00101 \par
{\bkmkstart AAAAAAADOG}{\bkmkend AAAAAAADOG}
00102     server_main();\par
{\bkmkstart AAAAAAADOH}{\bkmkend AAAAAAADOH}
00103 \par
{\bkmkstart AAAAAAADOI}{\bkmkend AAAAAAADOI}
00104 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADOJ}{\bkmkend AAAAAAADOJ}
00105     printf({\cf22 "thread_server terminated\\n"});\par
{\bkmkstart AAAAAAADOK}{\bkmkend AAAAAAADOK}
00106 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADOL}{\bkmkend AAAAAAADOL}
00107 \par
{\bkmkstart AAAAAAADOM}{\bkmkend AAAAAAADOM}
00108 \}\par
{\bkmkstart AAAAAAADON}{\bkmkend AAAAAAADON}
00109 \par
{\bkmkstart AAAAAAADOO}{\bkmkend AAAAAAADOO}
00110 {\cf18 void} thread_client()\par
{\bkmkstart AAAAAAADOP}{\bkmkend AAAAAAADOP}
00111 \{\par
{\bkmkstart AAAAAAADOQ}{\bkmkend AAAAAAADOQ}
00112 \par
{\bkmkstart AAAAAAADOR}{\bkmkend AAAAAAADOR}
00113 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADOS}{\bkmkend AAAAAAADOS}
00114     printf({\cf22 "start thread_client\\n"});\par
{\bkmkstart AAAAAAADOT}{\bkmkend AAAAAAADOT}
00115 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADOU}{\bkmkend AAAAAAADOU}
00116 \par
{\bkmkstart AAAAAAADOV}{\bkmkend AAAAAAADOV}
00117     client_main();\par
{\bkmkstart AAAAAAADOW}{\bkmkend AAAAAAADOW}
00118 \par
{\bkmkstart AAAAAAADOX}{\bkmkend AAAAAAADOX}
00119 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADOY}{\bkmkend AAAAAAADOY}
00120     printf({\cf22 "thread_client terminated\\n"});\par
{\bkmkstart AAAAAAADOZ}{\bkmkend AAAAAAADOZ}
00121 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADPA}{\bkmkend AAAAAAADPA}
00122 \par
{\bkmkstart AAAAAAADPB}{\bkmkend AAAAAAADPB}
00123 \}\par
{\bkmkstart AAAAAAADPC}{\bkmkend AAAAAAADPC}
00124 \par
{\bkmkstart AAAAAAADPD}{\bkmkend AAAAAAADPD}
00125 {\cf18 void} thread_cmd()\par
{\bkmkstart AAAAAAADPE}{\bkmkend AAAAAAADPE}
00126 \{\par
{\bkmkstart AAAAAAADPF}{\bkmkend AAAAAAADPF}
00127 \par
{\bkmkstart AAAAAAADPG}{\bkmkend AAAAAAADPG}
00128 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADPH}{\bkmkend AAAAAAADPH}
00129     printf({\cf22 "start thread_cmd\\n"});\par
{\bkmkstart AAAAAAADPI}{\bkmkend AAAAAAADPI}
00130 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADPJ}{\bkmkend AAAAAAADPJ}
00131 \par
{\bkmkstart AAAAAAADPK}{\bkmkend AAAAAAADPK}
00132     action_main();\par
{\bkmkstart AAAAAAADPL}{\bkmkend AAAAAAADPL}
00133 \par
{\bkmkstart AAAAAAADPM}{\bkmkend AAAAAAADPM}
00134 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAADPN}{\bkmkend AAAAAAADPN}
00135     printf({\cf22 "thread_cmd terminated\\n"});\par
{\bkmkstart AAAAAAADPO}{\bkmkend AAAAAAADPO}
00136 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAADPP}{\bkmkend AAAAAAADPP}
00137 \par
{\bkmkstart AAAAAAADPQ}{\bkmkend AAAAAAADPQ}
00138 \}\par
{\bkmkstart AAAAAAADPR}{\bkmkend AAAAAAADPR}
00139 \par
{\bkmkstart AAAAAAADPS}{\bkmkend AAAAAAADPS}
00140 {\cf18 void} thread_create({\cf18 int} {\cf18 id})\par
{\bkmkstart AAAAAAADPT}{\bkmkend AAAAAAADPT}
00141 \{\par
{\bkmkstart AAAAAAADPU}{\bkmkend AAAAAAADPU}
00142     {\cf19 switch}({\cf18 id})\par
{\bkmkstart AAAAAAADPV}{\bkmkend AAAAAAADPV}
00143     \{\par
{\bkmkstart AAAAAAADPW}{\bkmkend AAAAAAADPW}
00144         {\cf19 case} 0 : thread_sender();{\cf19 break};\par
{\bkmkstart AAAAAAADPX}{\bkmkend AAAAAAADPX}
00145         {\cf19 case} 1 : thread_receiver();{\cf19 break};\par
{\bkmkstart AAAAAAADPY}{\bkmkend AAAAAAADPY}
00146         {\cf19 case} 2 : thread_server();{\cf19 break};\par
{\bkmkstart AAAAAAADPZ}{\bkmkend AAAAAAADPZ}
00147         {\cf19 case} 3 : thread_client();{\cf19 break};\par
{\bkmkstart AAAAAAADQA}{\bkmkend AAAAAAADQA}
00148         {\cf19 case} 4 : thread_cmd();{\cf19 break};\par
{\bkmkstart AAAAAAADQB}{\bkmkend AAAAAAADQB}
00149         {\cf19 case} 5 : thread_glpainter();{\cf19 break};\par
{\bkmkstart AAAAAAADQC}{\bkmkend AAAAAAADQC}
00150     \}\par
{\bkmkstart AAAAAAADQD}{\bkmkend AAAAAAADQD}
00151 \}\par
{\bkmkstart AAAAAAADQE}{\bkmkend AAAAAAADQE}
00152 \par
{\bkmkstart AAAAAAADQF}{\bkmkend AAAAAAADQF}
00153 {\cf18 int} main( {\cf18 int} argc, {\cf18 char} **argv )\par
{\bkmkstart AAAAAAADQG}{\bkmkend AAAAAAADQG}
00154 \{\par
{\bkmkstart AAAAAAADQH}{\bkmkend AAAAAAADQH}
00155     {\cf18 int} i;\par
{\bkmkstart AAAAAAADQI}{\bkmkend AAAAAAADQI}
00156         {\cf18 double}          start, end;\par
{\bkmkstart AAAAAAADQJ}{\bkmkend AAAAAAADQJ}
00157 \par
{\bkmkstart AAAAAAADQK}{\bkmkend AAAAAAADQK}
00158         printf( {\cf22 "painter.exe  (%s)\\n"}, __DATE__ );\par
{\bkmkstart AAAAAAADQL}{\bkmkend AAAAAAADQL}
00159         printf ({\cf22 "----- Painter ----\\n"});\par
{\bkmkstart AAAAAAADQM}{\bkmkend AAAAAAADQM}
00160 \par
{\bkmkstart AAAAAAADQN}{\bkmkend AAAAAAADQN}
00161         verbose = {\cf17 true};  {\cf20 /* Originally FALSE */}\par
{\bkmkstart AAAAAAADQO}{\bkmkend AAAAAAADQO}
00162 \par
{\bkmkstart AAAAAAADQP}{\bkmkend AAAAAAADQP}
00163         {\cf19 for} (i=0 ; i<argc ; i++)\par
{\bkmkstart AAAAAAADQQ}{\bkmkend AAAAAAADQQ}
00164         \{\par
{\bkmkstart AAAAAAADQR}{\bkmkend AAAAAAADQR}
00165                 {\cf19 if} (!strcmp(argv[i],{\cf22 "-log"}))\par
{\bkmkstart AAAAAAADQS}{\bkmkend AAAAAAADQS}
00166                         dumplog = {\cf17 true};\par
{\bkmkstart AAAAAAADQT}{\bkmkend AAAAAAADQT}
00167                 {\cf19 else} {\cf19 if} (!strcmp(argv[i],{\cf22 "-verbose"}))\par
{\bkmkstart AAAAAAADQU}{\bkmkend AAAAAAADQU}
00168                 \{\par
{\bkmkstart AAAAAAADQV}{\bkmkend AAAAAAADQV}
00169                         verbose = {\cf17 true};\par
{\bkmkstart AAAAAAADQW}{\bkmkend AAAAAAADQW}
00170                 \}\par
{\bkmkstart AAAAAAADQX}{\bkmkend AAAAAAADQX}
00171                 {\cf19 else} {\cf19 if} (!strcmp(argv[i],{\cf22 "-terse"}))\par
{\bkmkstart AAAAAAADQY}{\bkmkend AAAAAAADQY}
00172                 \{\par
{\bkmkstart AAAAAAADQZ}{\bkmkend AAAAAAADQZ}
00173                         verbose = {\cf17 false};\par
{\bkmkstart AAAAAAADRA}{\bkmkend AAAAAAADRA}
00174                 \}\par
{\bkmkstart AAAAAAADRB}{\bkmkend AAAAAAADRB}
00175                 {\cf19 else} {\cf19 if} (!strcmp(argv[i],{\cf22 "-threads"}))\par
{\bkmkstart AAAAAAADRC}{\bkmkend AAAAAAADRC}
00176                 \{\par
{\bkmkstart AAAAAAADRD}{\bkmkend AAAAAAADRD}
00177                         {\cf19 if} ( ++i < argc )\par
{\bkmkstart AAAAAAADRE}{\bkmkend AAAAAAADRE}
00178                         \{\par
{\bkmkstart AAAAAAADRF}{\bkmkend AAAAAAADRF}
00179                                 numthreads = atoi (argv[i]);\par
{\bkmkstart AAAAAAADRG}{\bkmkend AAAAAAADRG}
00180                                 {\cf19 if} ( numthreads <= 0 )\par
{\bkmkstart AAAAAAADRH}{\bkmkend AAAAAAADRH}
00181                                 \{\par
{\bkmkstart AAAAAAADRI}{\bkmkend AAAAAAADRI}
00182                                         fprintf(stderr, {\cf22 "Error: expected positive value after '-threads'\\n"} );\par
{\bkmkstart AAAAAAADRJ}{\bkmkend AAAAAAADRJ}
00183                                         {\cf19 return} 1;\par
{\bkmkstart AAAAAAADRK}{\bkmkend AAAAAAADRK}
00184                                 \}\par
{\bkmkstart AAAAAAADRL}{\bkmkend AAAAAAADRL}
00185                         \}\par
{\bkmkstart AAAAAAADRM}{\bkmkend AAAAAAADRM}
00186                         {\cf19 else}\par
{\bkmkstart AAAAAAADRN}{\bkmkend AAAAAAADRN}
00187                         \{\par
{\bkmkstart AAAAAAADRO}{\bkmkend AAAAAAADRO}
00188                                 fprintf( stderr, {\cf22 "Error: expected a value after '-threads'\\n"} );\par
{\bkmkstart AAAAAAADRP}{\bkmkend AAAAAAADRP}
00189                                 {\cf19 return} 1;\par
{\bkmkstart AAAAAAADRQ}{\bkmkend AAAAAAADRQ}
00190                         \}\par
{\bkmkstart AAAAAAADRR}{\bkmkend AAAAAAADRR}
00191                 \}\par
{\bkmkstart AAAAAAADRS}{\bkmkend AAAAAAADRS}
00192         \}\par
{\bkmkstart AAAAAAADRT}{\bkmkend AAAAAAADRT}
00193 \par
{\bkmkstart AAAAAAADRU}{\bkmkend AAAAAAADRU}
00194         {\cf19 if} (i != argc )\par
{\bkmkstart AAAAAAADRV}{\bkmkend AAAAAAADRV}
00195                 Error ({\cf22 "usage: painter [-log] [-threads n] [-verbose] [-terse]"});\par
{\bkmkstart AAAAAAADRW}{\bkmkend AAAAAAADRW}
00196 \par
{\bkmkstart AAAAAAADRX}{\bkmkend AAAAAAADRX}
00197     ThreadSetDefault ();\par
{\bkmkstart AAAAAAADRY}{\bkmkend AAAAAAADRY}
00198 \par
{\bkmkstart AAAAAAADRZ}{\bkmkend AAAAAAADRZ}
00199 {\cf21 #ifndef WIN32}\par
{\bkmkstart AAAAAAADSA}{\bkmkend AAAAAAADSA}
00200     numthreads = 6;\par
{\bkmkstart AAAAAAADSB}{\bkmkend AAAAAAADSB}
00201 {\cf21 #endif }{\cf20 /*// WIN32*/}{\cf21 }\par
{\bkmkstart AAAAAAADSC}{\bkmkend AAAAAAADSC}
00202 \par
{\bkmkstart AAAAAAADSD}{\bkmkend AAAAAAADSD}
00203     mxargc = argc;\par
{\bkmkstart AAAAAAADSE}{\bkmkend AAAAAAADSE}
00204     mxargv = argv;\par
{\bkmkstart AAAAAAADSF}{\bkmkend AAAAAAADSF}
00205     start = I_FloatTime ();\par
{\bkmkstart AAAAAAADSG}{\bkmkend AAAAAAADSG}
00206         RunThreadsOnIndividual(6, {\cf17 false}, thread_create);\par
{\bkmkstart AAAAAAADSH}{\bkmkend AAAAAAADSH}
00207 {\cf20 /*}\par
{\bkmkstart AAAAAAADSI}{\bkmkend AAAAAAADSI}
00208 {\cf20  //      RunThreadsOn (6, true, thread_create);}\par
{\bkmkstart AAAAAAADSJ}{\bkmkend AAAAAAADSJ}
00209 {\cf20  //      RunThreadsOn (6, true, thread_create);}\par
{\bkmkstart AAAAAAADSK}{\bkmkend AAAAAAADSK}
00210 {\cf20  */}\par
{\bkmkstart AAAAAAADSL}{\bkmkend AAAAAAADSL}
00211         end = I_FloatTime ();\par
{\bkmkstart AAAAAAADSM}{\bkmkend AAAAAAADSM}
00212     printf ({\cf22 "%5.0f seconds elapsed\\n"}, end-start);\par
{\bkmkstart AAAAAAADSN}{\bkmkend AAAAAAADSN}
00213 \par
{\bkmkstart AAAAAAADSO}{\bkmkend AAAAAAADSO}
00214     {\cf19 return} 0;\par
{\bkmkstart AAAAAAADSP}{\bkmkend AAAAAAADSP}
00215 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RCWindow.cpp\par \pard\plain 
{\bkmkstart AAAAAAADSQ}
{\bkmkend AAAAAAADSQ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAADSR}{\bkmkend AAAAAAADSR}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAADSS}{\bkmkend AAAAAAADSS}
00002 {\cf20 //}\par
{\bkmkstart AAAAAAADST}{\bkmkend AAAAAAADST}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAADSU}{\bkmkend AAAAAAADSU}
00004 {\cf20 //}\par
{\bkmkstart AAAAAAADSV}{\bkmkend AAAAAAADSV}
00005 {\cf20 // file: RCWindow.cpp}\par
{\bkmkstart AAAAAAADSW}{\bkmkend AAAAAAADSW}
00006 {\cf20 // last modified:}\par
{\bkmkstart AAAAAAADSX}{\bkmkend AAAAAAADSX}
00007 {\cf20 // copyright:}\par
{\bkmkstart AAAAAAADSY}{\bkmkend AAAAAAADSY}
00008 {\cf20 // version:}\par
{\bkmkstart AAAAAAADSZ}{\bkmkend AAAAAAADSZ}
00009 {\cf20 //}\par
{\bkmkstart AAAAAAADTA}{\bkmkend AAAAAAADTA}
00010 {\cf20 // email:}\par
{\bkmkstart AAAAAAADTB}{\bkmkend AAAAAAADTB}
00011 {\cf20 // web:}\par
{\bkmkstart AAAAAAADTC}{\bkmkend AAAAAAADTC}
00012 {\cf20 //}\par
{\bkmkstart AAAAAAADTD}{\bkmkend AAAAAAADTD}
00013 {\cf20 */}\par
{\bkmkstart AAAAAAADTE}{\bkmkend AAAAAAADTE}
00014 \par
{\bkmkstart AAAAAAADTF}{\bkmkend AAAAAAADTF}
00015 {\cf21 #include <cstdio>}\par
{\bkmkstart AAAAAAADTG}{\bkmkend AAAAAAADTG}
00016 {\cf21 #include <cstdlib>}\par
{\bkmkstart AAAAAAADTH}{\bkmkend AAAAAAADTH}
00017 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAADTI}{\bkmkend AAAAAAADTI}
00018 {\cf21 #include <mx/mx.h>}\par
{\bkmkstart AAAAAAADTJ}{\bkmkend AAAAAAADTJ}
00019 {\cf21 #include <mx/gl.h>}\par
{\bkmkstart AAAAAAADTK}{\bkmkend AAAAAAADTK}
00020 {\cf21 #include "GlWindow.h"}\par
{\bkmkstart AAAAAAADTL}{\bkmkend AAAAAAADTL}
00021 {\cf20 //#include "CmdLine.h"}\par
{\bkmkstart AAAAAAADTM}{\bkmkend AAAAAAADTM}
00022 {\cf20 //#include "shared.h"}\par
{\bkmkstart AAAAAAADTN}{\bkmkend AAAAAAADTN}
00023 {\cf20 //#include "server.h"}\par
{\bkmkstart AAAAAAADTO}{\bkmkend AAAAAAADTO}
00024 \par
{\bkmkstart AAAAAAADTP}{\bkmkend AAAAAAADTP}
00025 {\cf21 #include "RCWindow.h"}\par
{\bkmkstart AAAAAAADTQ}{\bkmkend AAAAAAADTQ}
00026 \par
{\bkmkstart AAAAAAADTR}{\bkmkend AAAAAAADTR}
00027 {\cf20 /*}\par
{\bkmkstart AAAAAAADTS}{\bkmkend AAAAAAADTS}
00028 {\cf20 #ifdef _SOFTGPIO}\par
{\bkmkstart AAAAAAADTT}{\bkmkend AAAAAAADTT}
00029 {\cf20 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAADTU}{\bkmkend AAAAAAADTU}
00030 {\cf20 extern "C"}\par
{\bkmkstart AAAAAAADTV}{\bkmkend AAAAAAADTV}
00031 {\cf20 \{}\par
{\bkmkstart AAAAAAADTW}{\bkmkend AAAAAAADTW}
00032 {\cf20     namespace \{}\par
{\bkmkstart AAAAAAADTX}{\bkmkend AAAAAAADTX}
00033 {\cf20 #endif}\par
{\bkmkstart AAAAAAADTY}{\bkmkend AAAAAAADTY}
00034 {\cf20 extern void delay(unsigned int howLong);}\par
{\bkmkstart AAAAAAADTZ}{\bkmkend AAAAAAADTZ}
00035 {\cf20 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAADUA}{\bkmkend AAAAAAADUA}
00036 {\cf20     \} //namespace}\par
{\bkmkstart AAAAAAADUB}{\bkmkend AAAAAAADUB}
00037 {\cf20 \}}\par
{\bkmkstart AAAAAAADUC}{\bkmkend AAAAAAADUC}
00038 {\cf20 #endif}\par
{\bkmkstart AAAAAAADUD}{\bkmkend AAAAAAADUD}
00039 {\cf20 #else}\par
{\bkmkstart AAAAAAADUE}{\bkmkend AAAAAAADUE}
00040 {\cf20 #include <wiringPi.h>}\par
{\bkmkstart AAAAAAADUF}{\bkmkend AAAAAAADUF}
00041 {\cf20 #endif //_SOFTGPIO}\par
{\bkmkstart AAAAAAADUG}{\bkmkend AAAAAAADUG}
00042 {\cf20 */}\par
{\bkmkstart AAAAAAADUH}{\bkmkend AAAAAAADUH}
00043 \par
{\bkmkstart AAAAAAADUI}{\bkmkend AAAAAAADUI}
00044 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRV" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow}}}
 *g_RCWindow = 0;\par
{\bkmkstart AAAAAAADUJ}{\bkmkend AAAAAAADUJ}
00045 {\cf20 //char g_appTitle[] = "Sender Window";}\par
{\bkmkstart AAAAAAADUK}{\bkmkend AAAAAAADUK}
00046 \par
{\bkmkstart AAAAAAADUL}{\bkmkend AAAAAAADUL}
00047 RCWindow :: RCWindow() : mxWindow( 0, 0, 0, 0, 0, {\cf22 "Receiver Window"}, mxWindow::Normal )\par
{\bkmkstart AAAAAAADUM}{\bkmkend AAAAAAADUM}
00048 \{\par
{\bkmkstart AAAAAAADUN}{\bkmkend AAAAAAADUN}
00049         {\cf20 // create menu stuff}\par
{\bkmkstart AAAAAAADUO}{\bkmkend AAAAAAADUO}
00050         mb = {\cf17 new} mxMenuBar ({\cf17 this});\par
{\bkmkstart AAAAAAADUP}{\bkmkend AAAAAAADUP}
00051         {\cf20 /*}\par
{\bkmkstart AAAAAAADUQ}{\bkmkend AAAAAAADUQ}
00052 {\cf20         mxMenu *menuFile = new mxMenu ();}\par
{\bkmkstart AAAAAAADUR}{\bkmkend AAAAAAADUR}
00053 {\cf20         mxMenu *menuAction = new mxMenu ();}\par
{\bkmkstart AAAAAAADUS}{\bkmkend AAAAAAADUS}
00054 {\cf20 //      mxMenu *menuTool = new mxMenu ();}\par
{\bkmkstart AAAAAAADUT}{\bkmkend AAAAAAADUT}
00055 {\cf20         mxMenu *menuHelp = new mxMenu ();}\par
{\bkmkstart AAAAAAADUU}{\bkmkend AAAAAAADUU}
00056 {\cf20 }\par
{\bkmkstart AAAAAAADUV}{\bkmkend AAAAAAADUV}
00057 {\cf20         mb->addMenu ("File", menuFile);}\par
{\bkmkstart AAAAAAADUW}{\bkmkend AAAAAAADUW}
00058 {\cf20         mb->addMenu ("Action", menuAction);}\par
{\bkmkstart AAAAAAADUX}{\bkmkend AAAAAAADUX}
00059 {\cf20 //      mb->addMenu ("Tools", menuTool);}\par
{\bkmkstart AAAAAAADUY}{\bkmkend AAAAAAADUY}
00060 {\cf20         mb->addMenu ("Help", menuHelp);}\par
{\bkmkstart AAAAAAADUZ}{\bkmkend AAAAAAADUZ}
00061 {\cf20 }\par
{\bkmkstart AAAAAAADVA}{\bkmkend AAAAAAADVA}
00062 {\cf20 //      menuFile->addSeparator ();}\par
{\bkmkstart AAAAAAADVB}{\bkmkend AAAAAAADVB}
00063 {\cf20         menuFile->add ("Exit", IDC_FILE_EXIT);}\par
{\bkmkstart AAAAAAADVC}{\bkmkend AAAAAAADVC}
00064 {\cf20 }\par
{\bkmkstart AAAAAAADVD}{\bkmkend AAAAAAADVD}
00065 {\cf20 //      menuAction->add ("Connect...", IDC_ACTION_CONNECT);}\par
{\bkmkstart AAAAAAADVE}{\bkmkend AAAAAAADVE}
00066 {\cf20 //      menuAction->add ("Disconnect...", IDC_ACTION_DISCONNECT);}\par
{\bkmkstart AAAAAAADVF}{\bkmkend AAAAAAADVF}
00067 {\cf20         menuAction->add ("Display Information", IDC_ACTION_INFO);}\par
{\bkmkstart AAAAAAADVG}{\bkmkend AAAAAAADVG}
00068 {\cf20         menuAction->addSeparator ();}\par
{\bkmkstart AAAAAAADVH}{\bkmkend AAAAAAADVH}
00069 {\cf20         menuAction->add ("Undo", IDC_ACTION_UNDO);}\par
{\bkmkstart AAAAAAADVI}{\bkmkend AAAAAAADVI}
00070 {\cf20 //      menuAction->add ("Redo", IDC_ACTION_REDO);}\par
{\bkmkstart AAAAAAADVJ}{\bkmkend AAAAAAADVJ}
00071 {\cf20         menuAction->addSeparator ();}\par
{\bkmkstart AAAAAAADVK}{\bkmkend AAAAAAADVK}
00072 {\cf20         menuAction->add ("Clear Sceen", IDC_ACTION_CLS);}\par
{\bkmkstart AAAAAAADVL}{\bkmkend AAAAAAADVL}
00073 {\cf20 //      menuAction->add ("Refresh", IDC_ACTION_REFRESH);}\par
{\bkmkstart AAAAAAADVM}{\bkmkend AAAAAAADVM}
00074 {\cf20 }\par
{\bkmkstart AAAAAAADVN}{\bkmkend AAAAAAADVN}
00075 {\cf20         menuHelp->add ("About...", IDC_HELP_ABOUT);}\par
{\bkmkstart AAAAAAADVO}{\bkmkend AAAAAAADVO}
00076 {\cf20     */}\par
{\bkmkstart AAAAAAADVP}{\bkmkend AAAAAAADVP}
00077         {\cf20 // create the OpenGL window}\par
{\bkmkstart AAAAAAADVQ}{\bkmkend AAAAAAADVQ}
00078         d_GlWindow = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 ({\cf17 this}, 0, 0, 0, 0, {\cf22 ""}, mxWindow::Normal);\par
{\bkmkstart AAAAAAADVR}{\bkmkend AAAAAAADVR}
00079 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAADVS}{\bkmkend AAAAAAADVS}
00080         SetWindowLong ((HWND) d_GlWindow->getHandle (), GWL_EXSTYLE, WS_EX_CLIENTEDGE);\par
{\bkmkstart AAAAAAADVT}{\bkmkend AAAAAAADVT}
00081 {\cf21 #endif}\par
{\bkmkstart AAAAAAADVU}{\bkmkend AAAAAAADVU}
00082 \par
{\bkmkstart AAAAAAADVV}{\bkmkend AAAAAAADVV}
00083         g_GlWindow = d_GlWindow;\par
{\bkmkstart AAAAAAADVW}{\bkmkend AAAAAAADVW}
00084 \par
{\bkmkstart AAAAAAADVX}{\bkmkend AAAAAAADVX}
00085 {\cf20 //      line_t emptyline = \{0,0,0,0\};}\par
{\bkmkstart AAAAAAADVY}{\bkmkend AAAAAAADVY}
00086 {\cf20 //      cmd_lines.assign(32, emptyline);}\par
{\bkmkstart AAAAAAADVZ}{\bkmkend AAAAAAADVZ}
00087 \par
{\bkmkstart AAAAAAADWA}{\bkmkend AAAAAAADWA}
00088         setBounds (20, 20, 640, 540);\par
{\bkmkstart AAAAAAADWB}{\bkmkend AAAAAAADWB}
00089         setVisible ({\cf17 true});\par
{\bkmkstart AAAAAAADWC}{\bkmkend AAAAAAADWC}
00090         g_GlWindow->setEnabled({\cf17 false});\par
{\bkmkstart AAAAAAADWD}{\bkmkend AAAAAAADWD}
00091 \}\par
{\bkmkstart AAAAAAADWE}{\bkmkend AAAAAAADWE}
00092 \par
{\bkmkstart AAAAAAADWF}{\bkmkend AAAAAAADWF}
00093 \par
{\bkmkstart AAAAAAADWG}{\bkmkend AAAAAAADWG}
00094 \par
{\bkmkstart AAAAAAADWH}{\bkmkend AAAAAAADWH}
00095 RCWindow::~RCWindow ()\par
{\bkmkstart AAAAAAADWI}{\bkmkend AAAAAAADWI}
00096 \{\par
{\bkmkstart AAAAAAADWJ}{\bkmkend AAAAAAADWJ}
00097         {\cf20 // grab some params in case that hasn't updates}\par
{\bkmkstart AAAAAAADWK}{\bkmkend AAAAAAADWK}
00098 \par
{\bkmkstart AAAAAAADWL}{\bkmkend AAAAAAADWL}
00099 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAADWM}{\bkmkend AAAAAAADWM}
00100         DeleteFile ({\cf22 "midump.txt"});\par
{\bkmkstart AAAAAAADWN}{\bkmkend AAAAAAADWN}
00101 {\cf21 #endif}\par
{\bkmkstart AAAAAAADWO}{\bkmkend AAAAAAADWO}
00102 \}\par
{\bkmkstart AAAAAAADWP}{\bkmkend AAAAAAADWP}
00103 {\cf20 /*}\par
{\bkmkstart AAAAAAADWQ}{\bkmkend AAAAAAADWQ}
00104 {\cf20 void RCWindow :: checkboxSet( int id, bool bState )}\par
{\bkmkstart AAAAAAADWR}{\bkmkend AAAAAAADWR}
00105 {\cf20 \{}\par
{\bkmkstart AAAAAAADWS}{\bkmkend AAAAAAADWS}
00106 {\cf20         mb->setChecked( id, bState );}\par
{\bkmkstart AAAAAAADWT}{\bkmkend AAAAAAADWT}
00107 {\cf20 \}}\par
{\bkmkstart AAAAAAADWU}{\bkmkend AAAAAAADWU}
00108 {\cf20 */}\par
{\bkmkstart AAAAAAADWV}{\bkmkend AAAAAAADWV}
00109 {\cf18 int}\par
{\bkmkstart AAAAAAADWW}{\bkmkend AAAAAAADWW}
00110 RCWindow::handleEvent (mxEvent *event)\par
{\bkmkstart AAAAAAADWX}{\bkmkend AAAAAAADWX}
00111 \{\par
{\bkmkstart AAAAAAADWY}{\bkmkend AAAAAAADWY}
00112         {\cf19 switch} (event->event)\par
{\bkmkstart AAAAAAADWZ}{\bkmkend AAAAAAADWZ}
00113         \{\par
{\bkmkstart AAAAAAADXA}{\bkmkend AAAAAAADXA}
00114 \par
{\bkmkstart AAAAAAADXB}{\bkmkend AAAAAAADXB}
00115         {\cf19 case} mxEvent::Action:\par
{\bkmkstart AAAAAAADXC}{\bkmkend AAAAAAADXC}
00116         \{\par
{\bkmkstart AAAAAAADXD}{\bkmkend AAAAAAADXD}
00117                 {\cf19 switch} (event->action)\par
{\bkmkstart AAAAAAADXE}{\bkmkend AAAAAAADXE}
00118                 \{\par
{\bkmkstart AAAAAAADXF}{\bkmkend AAAAAAADXF}
00119                 {\cf19 case} IDC_FILE_EXIT:\par
{\bkmkstart AAAAAAADXG}{\bkmkend AAAAAAADXG}
00120                 \{\par
{\bkmkstart AAAAAAADXH}{\bkmkend AAAAAAADXH}
00121                         redraw ();\par
{\bkmkstart AAAAAAADXI}{\bkmkend AAAAAAADXI}
00122                         mx::quit ();\par
{\bkmkstart AAAAAAADXJ}{\bkmkend AAAAAAADXJ}
00123                 \}\par
{\bkmkstart AAAAAAADXK}{\bkmkend AAAAAAADXK}
00124                 {\cf19 break};\par
{\bkmkstart AAAAAAADXL}{\bkmkend AAAAAAADXL}
00125 \par
{\bkmkstart AAAAAAADXM}{\bkmkend AAAAAAADXM}
00126                 {\cf19 case} IDC_ACTION_CLS:\par
{\bkmkstart AAAAAAADXN}{\bkmkend AAAAAAADXN}
00127             getGlWindow()->LineClear();\par
{\bkmkstart AAAAAAADXO}{\bkmkend AAAAAAADXO}
00128             {\cf19 break};\par
{\bkmkstart AAAAAAADXP}{\bkmkend AAAAAAADXP}
00129 \par
{\bkmkstart AAAAAAADXQ}{\bkmkend AAAAAAADXQ}
00130         {\cf19 case} IDC_ACTION_UNDO:\par
{\bkmkstart AAAAAAADXR}{\bkmkend AAAAAAADXR}
00131             getGlWindow()->LineUndo();\par
{\bkmkstart AAAAAAADXS}{\bkmkend AAAAAAADXS}
00132             {\cf19 break};\par
{\bkmkstart AAAAAAADXT}{\bkmkend AAAAAAADXT}
00133 \par
{\bkmkstart AAAAAAADXU}{\bkmkend AAAAAAADXU}
00134                 {\cf19 case} IDC_HELP_ABOUT:\par
{\bkmkstart AAAAAAADXV}{\bkmkend AAAAAAADXV}
00135                         mxMessageBox ({\cf17 this},\par
{\bkmkstart AAAAAAADXW}{\bkmkend AAAAAAADXW}
00136                                 {\cf22 "Painter P20\\n"}\par
{\bkmkstart AAAAAAADXX}{\bkmkend AAAAAAADXX}
00137                                 {\cf22 "Build:\\t"} __DATE__ {\cf22 ".\\n"}\par
{\bkmkstart AAAAAAADXY}{\bkmkend AAAAAAADXY}
00138                                 {\cf22 "Email:\\tjw26u22@soton.ac.uk\\n"}, {\cf22 "Painter"},\par
{\bkmkstart AAAAAAADXZ}{\bkmkend AAAAAAADXZ}
00139                                 MX_MB_OK | MX_MB_INFORMATION );\par
{\bkmkstart AAAAAAADYA}{\bkmkend AAAAAAADYA}
00140                         {\cf19 break};\par
{\bkmkstart AAAAAAADYB}{\bkmkend AAAAAAADYB}
00141 \par
{\bkmkstart AAAAAAADYC}{\bkmkend AAAAAAADYC}
00142                 \} {\cf20 //switch (event->action)}\par
{\bkmkstart AAAAAAADYD}{\bkmkend AAAAAAADYD}
00143 \par
{\bkmkstart AAAAAAADYE}{\bkmkend AAAAAAADYE}
00144         \} {\cf20 // mxEvent::Action}\par
{\bkmkstart AAAAAAADYF}{\bkmkend AAAAAAADYF}
00145         {\cf19 break};\par
{\bkmkstart AAAAAAADYG}{\bkmkend AAAAAAADYG}
00146 \par
{\bkmkstart AAAAAAADYH}{\bkmkend AAAAAAADYH}
00147         {\cf19 case} mxEvent::Size:\par
{\bkmkstart AAAAAAADYI}{\bkmkend AAAAAAADYI}
00148         \{\par
{\bkmkstart AAAAAAADYJ}{\bkmkend AAAAAAADYJ}
00149                 {\cf18 int} w = {\cf17 event}->width;\par
{\bkmkstart AAAAAAADYK}{\bkmkend AAAAAAADYK}
00150                 {\cf18 int} h = {\cf17 event}->height;\par
{\bkmkstart AAAAAAADYL}{\bkmkend AAAAAAADYL}
00151                 {\cf18 int} y = mb->getHeight ();\par
{\bkmkstart AAAAAAADYM}{\bkmkend AAAAAAADYM}
00152 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAADYN}{\bkmkend AAAAAAADYN}
00153 {\cf21 #define HEIGHT 120}\par
{\bkmkstart AAAAAAADYO}{\bkmkend AAAAAAADYO}
00154 {\cf21 #else}\par
{\bkmkstart AAAAAAADYP}{\bkmkend AAAAAAADYP}
00155 {\cf21 #define HEIGHT 140}\par
{\bkmkstart AAAAAAADYQ}{\bkmkend AAAAAAADYQ}
00156                 h -= 40;\par
{\bkmkstart AAAAAAADYR}{\bkmkend AAAAAAADYR}
00157 {\cf21 #endif}\par
{\bkmkstart AAAAAAADYS}{\bkmkend AAAAAAADYS}
00158 \par
{\bkmkstart AAAAAAADYT}{\bkmkend AAAAAAADYT}
00159 {\cf20 //              d_GlWindow->setBounds (0, y, w, h - HEIGHT);}\par
{\bkmkstart AAAAAAADYU}{\bkmkend AAAAAAADYU}
00160                 d_GlWindow->setBounds (0, y, w, h);\par
{\bkmkstart AAAAAAADYV}{\bkmkend AAAAAAADYV}
00161 {\cf20 //              d_cpl->setBounds (0, y + h - HEIGHT, w, HEIGHT);}\par
{\bkmkstart AAAAAAADYW}{\bkmkend AAAAAAADYW}
00162         \}\par
{\bkmkstart AAAAAAADYX}{\bkmkend AAAAAAADYX}
00163         {\cf19 break};\par
{\bkmkstart AAAAAAADYY}{\bkmkend AAAAAAADYY}
00164 \par
{\bkmkstart AAAAAAADYZ}{\bkmkend AAAAAAADYZ}
00165         {\cf19 break};\par
{\bkmkstart AAAAAAADZA}{\bkmkend AAAAAAADZA}
00166         \} {\cf20 // event->event}\par
{\bkmkstart AAAAAAADZB}{\bkmkend AAAAAAADZB}
00167 \par
{\bkmkstart AAAAAAADZC}{\bkmkend AAAAAAADZC}
00168         {\cf19 return} 1;\par
{\bkmkstart AAAAAAADZD}{\bkmkend AAAAAAADZD}
00169 \}\par
{\bkmkstart AAAAAAADZE}{\bkmkend AAAAAAADZE}
00170 \par
{\bkmkstart AAAAAAADZF}{\bkmkend AAAAAAADZF}
00171 \par
{\bkmkstart AAAAAAADZG}{\bkmkend AAAAAAADZG}
00172 \par
{\bkmkstart AAAAAAADZH}{\bkmkend AAAAAAADZH}
00173 {\cf18 void}\par
{\bkmkstart AAAAAAADZI}{\bkmkend AAAAAAADZI}
00174 RCWindow::redraw ()\par
{\bkmkstart AAAAAAADZJ}{\bkmkend AAAAAAADZJ}
00175 \{\par
{\bkmkstart AAAAAAADZK}{\bkmkend AAAAAAADZK}
00176         mxEvent event;\par
{\bkmkstart AAAAAAADZL}{\bkmkend AAAAAAADZL}
00177         {\cf17 event}.event = mxEvent::Size;\par
{\bkmkstart AAAAAAADZM}{\bkmkend AAAAAAADZM}
00178         {\cf17 event}.width = w2 ();\par
{\bkmkstart AAAAAAADZN}{\bkmkend AAAAAAADZN}
00179         {\cf17 event}.height = h2 ();\par
{\bkmkstart AAAAAAADZO}{\bkmkend AAAAAAADZO}
00180         handleEvent (&event);\par
{\bkmkstart AAAAAAADZP}{\bkmkend AAAAAAADZP}
00181 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RCWindow.h\par \pard\plain 
{\bkmkstart AAAAAAADZQ}
{\bkmkend AAAAAAADZQ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAADZR}{\bkmkend AAAAAAADZR}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAADZS}{\bkmkend AAAAAAADZS}
00002 {\cf20 //}\par
{\bkmkstart AAAAAAADZT}{\bkmkend AAAAAAADZT}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAADZU}{\bkmkend AAAAAAADZU}
00004 {\cf20 //}\par
{\bkmkstart AAAAAAADZV}{\bkmkend AAAAAAADZV}
00005 {\cf20 // file: RCWindow.h}\par
{\bkmkstart AAAAAAADZW}{\bkmkend AAAAAAADZW}
00006 {\cf20 // last modified:}\par
{\bkmkstart AAAAAAADZX}{\bkmkend AAAAAAADZX}
00007 {\cf20 // copyright:}\par
{\bkmkstart AAAAAAADZY}{\bkmkend AAAAAAADZY}
00008 {\cf20 // version:}\par
{\bkmkstart AAAAAAADZZ}{\bkmkend AAAAAAADZZ}
00009 {\cf20 //}\par
{\bkmkstart AAAAAAAEAA}{\bkmkend AAAAAAAEAA}
00010 {\cf20 // email:}\par
{\bkmkstart AAAAAAAEAB}{\bkmkend AAAAAAAEAB}
00011 {\cf20 // web:}\par
{\bkmkstart AAAAAAAEAC}{\bkmkend AAAAAAAEAC}
00012 {\cf20 //}\par
{\bkmkstart AAAAAAAEAD}{\bkmkend AAAAAAAEAD}
00013 {\cf20 */}\par
{\bkmkstart AAAAAAAEAE}{\bkmkend AAAAAAAEAE}
00014 \par
{\bkmkstart AAAAAAAEAF}{\bkmkend AAAAAAAEAF}
00015 {\cf21 #ifndef INCLUDED_RCWINDOW}\par
{\bkmkstart AAAAAAAEAG}{\bkmkend AAAAAAAEAG}
00016 {\cf21 #define INCLUDED_RCWINDOW}\par
{\bkmkstart AAAAAAAEAH}{\bkmkend AAAAAAAEAH}
00017 \par
{\bkmkstart AAAAAAAEAI}{\bkmkend AAAAAAAEAI}
00018 \par
{\bkmkstart AAAAAAAEAJ}{\bkmkend AAAAAAAEAJ}
00019 \par
{\bkmkstart AAAAAAAEAK}{\bkmkend AAAAAAAEAK}
00020 {\cf21 #ifndef INCLUDED_MXWINDOW}\par
{\bkmkstart AAAAAAAEAL}{\bkmkend AAAAAAAEAL}
00021 {\cf21 #include <mx/mxWindow.h>}\par
{\bkmkstart AAAAAAAEAM}{\bkmkend AAAAAAAEAM}
00022 {\cf21 #endif}\par
{\bkmkstart AAAAAAAEAN}{\bkmkend AAAAAAAEAN}
00023 \par
{\bkmkstart AAAAAAAEAO}{\bkmkend AAAAAAAEAO}
00024 {\cf20 //#include "CmdLine.h"}\par
{\bkmkstart AAAAAAAEAP}{\bkmkend AAAAAAAEAP}
00025 \par
{\bkmkstart AAAAAAAEAQ}{\bkmkend AAAAAAAEAQ}
00026 {\cf21 #define IDC_FILE_EXIT                   1017}\par
{\bkmkstart AAAAAAAEAR}{\bkmkend AAAAAAAEAR}
00027 \par
{\bkmkstart AAAAAAAEAS}{\bkmkend AAAAAAAEAS}
00028 {\cf21 #define IDC_ACTION_CONNECT              1101}\par
{\bkmkstart AAAAAAAEAT}{\bkmkend AAAAAAAEAT}
00029 {\cf21 #define IDC_ACTION_DISCONNECT   1102}\par
{\bkmkstart AAAAAAAEAU}{\bkmkend AAAAAAAEAU}
00030 {\cf21 #define IDC_ACTION_INFO         1103}\par
{\bkmkstart AAAAAAAEAV}{\bkmkend AAAAAAAEAV}
00031 {\cf21 #define IDC_ACTION_UNDO         1104}\par
{\bkmkstart AAAAAAAEAW}{\bkmkend AAAAAAAEAW}
00032 {\cf21 #define IDC_ACTION_REDO         1105}\par
{\bkmkstart AAAAAAAEAX}{\bkmkend AAAAAAAEAX}
00033 {\cf21 #define IDC_ACTION_CLS          1106}\par
{\bkmkstart AAAAAAAEAY}{\bkmkend AAAAAAAEAY}
00034 {\cf21 #define IDC_ACTION_REFRESH      1107}\par
{\bkmkstart AAAAAAAEAZ}{\bkmkend AAAAAAAEAZ}
00035 \par
{\bkmkstart AAAAAAAEBA}{\bkmkend AAAAAAAEBA}
00036 {\cf21 #define IDC_HELP_GOTOHOMEPAGE   1301}\par
{\bkmkstart AAAAAAAEBB}{\bkmkend AAAAAAAEBB}
00037 {\cf21 #define IDC_HELP_ABOUT                  1302}\par
{\bkmkstart AAAAAAAEBC}{\bkmkend AAAAAAAEBC}
00038 \par
{\bkmkstart AAAAAAAEBD}{\bkmkend AAAAAAAEBD}
00039 {\cf20 //for window}\par
{\bkmkstart AAAAAAAEBE}{\bkmkend AAAAAAAEBE}
00040 {\cf21 #define X_RESOLUTION 640}\par
{\bkmkstart AAAAAAAEBF}{\bkmkend AAAAAAAEBF}
00041 {\cf21 #define Y_RESOLUTION 540}\par
{\bkmkstart AAAAAAAEBG}{\bkmkend AAAAAAAEBG}
00042 \par
{\bkmkstart AAAAAAAEBH}{\bkmkend AAAAAAAEBH}
00043 \par
{\bkmkstart AAAAAAAEBI}{\bkmkend AAAAAAAEBI}
00044 {\cf17 class }mxMenuBar;\par
{\bkmkstart AAAAAAAEBJ}{\bkmkend AAAAAAAEBJ}
00045 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
;\par
{\bkmkstart AAAAAAAEBK}{\bkmkend AAAAAAAEBK}
00046 \par
{\bkmkstart AAAAAAAEBL}{\bkmkend AAAAAAAEBL}
00047 \par
{\bkmkstart AAAAAAAEBM}{\bkmkend AAAAAAAEBM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRV" }{}}{\fldrslt {\cs37\ul\cf2 00048}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRV" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow}}}
 : {\cf17 public} mxWindow\par
{\bkmkstart AAAAAAAEBN}{\bkmkend AAAAAAAEBN}
00049 \{\par
{\bkmkstart AAAAAAAEBO}{\bkmkend AAAAAAAEBO}
00050 {\cf17 public}:\par
{\bkmkstart AAAAAAAEBP}{\bkmkend AAAAAAAEBP}
00051         {\cf20 // CREATORS}\par
{\bkmkstart AAAAAAAEBQ}{\bkmkend AAAAAAAEBQ}
00052         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRV" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow}}}
 ();\par
{\bkmkstart AAAAAAAEBR}{\bkmkend AAAAAAAEBR}
00053         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRV" }{}}{\fldrslt {\cs37\ul\cf2 ~RCWindow}}}
 ();\par
{\bkmkstart AAAAAAAEBS}{\bkmkend AAAAAAAEBS}
00054 \par
{\bkmkstart AAAAAAAEBT}{\bkmkend AAAAAAAEBT}
00055         {\cf20 // MANIPULATORS}\par
{\bkmkstart AAAAAAAEBU}{\bkmkend AAAAAAAEBU}
00056         {\cf17 virtual} {\cf18 int} handleEvent (mxEvent *event);\par
{\bkmkstart AAAAAAAEBV}{\bkmkend AAAAAAAEBV}
00057 {\cf20 //      void checkboxSet( int id, bool bState );}\par
{\bkmkstart AAAAAAAEBW}{\bkmkend AAAAAAAEBW}
00058         {\cf18 void} redraw ();\par
{\bkmkstart AAAAAAAEBX}{\bkmkend AAAAAAAEBX}
00059 \par
{\bkmkstart AAAAAAAEBY}{\bkmkend AAAAAAAEBY}
00060         {\cf20 // ACCESSORS}\par
{\bkmkstart AAAAAAAEBZ}{\bkmkend AAAAAAAEBZ}
00061         mxMenuBar *getMenuBar (){\cf17  const }\{ {\cf19 return} mb; \}\par
{\bkmkstart AAAAAAAECA}{\bkmkend AAAAAAAECA}
00062         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 *getGlWindow (){\cf17  const }\{ {\cf19 return} d_GlWindow; \}\par
{\bkmkstart AAAAAAAECB}{\bkmkend AAAAAAAECB}
00063 \par
{\bkmkstart AAAAAAAECC}{\bkmkend AAAAAAAECC}
00064 {\cf17 private}:\par
{\bkmkstart AAAAAAAECD}{\bkmkend AAAAAAAECD}
00065     mxMenuBar *mb;\par
{\bkmkstart AAAAAAAECE}{\bkmkend AAAAAAAECE}
00066         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 *d_GlWindow;\par
{\bkmkstart AAAAAAAECF}{\bkmkend AAAAAAAECF}
00067 {\cf20 //    line_t PrevLine;}\par
{\bkmkstart AAAAAAAECG}{\bkmkend AAAAAAAECG}
00068 {\cf20 //    drawlines_t Buffer;}\par
{\bkmkstart AAAAAAAECH}{\bkmkend AAAAAAAECH}
00069 \};\par
{\bkmkstart AAAAAAAECI}{\bkmkend AAAAAAAECI}
00070 \par
{\bkmkstart AAAAAAAECJ}{\bkmkend AAAAAAAECJ}
00071 {\cf17 extern} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRV" }{}}{\fldrslt {\cs37\ul\cf2 RCWindow}}}
 *g_RCWindow;\par
{\bkmkstart AAAAAAAECK}{\bkmkend AAAAAAAECK}
00072 {\cf20 //extern char g_appTitle[];}\par
{\bkmkstart AAAAAAAECL}{\bkmkend AAAAAAAECL}
00073 \par
{\bkmkstart AAAAAAAECM}{\bkmkend AAAAAAAECM}
00074 {\cf21 #endif }{\cf20 // INCLUDED_MDLVIEWER}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
receiver.c\par \pard\plain 
{\bkmkstart AAAAAAAECN}
{\bkmkend AAAAAAAECN}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAECO}{\bkmkend AAAAAAAECO}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAECP}{\bkmkend AAAAAAAECP}
00002 {\cf20 }\par
{\bkmkstart AAAAAAAECQ}{\bkmkend AAAAAAAECQ}
00003 {\cf20 ===== receiver.c ========================================================}\par
{\bkmkstart AAAAAAAECR}{\bkmkend AAAAAAAECR}
00004 {\cf20 }\par
{\bkmkstart AAAAAAAECS}{\bkmkend AAAAAAAECS}
00005 {\cf20 */}\par
{\bkmkstart AAAAAAAECT}{\bkmkend AAAAAAAECT}
00006 \par
{\bkmkstart AAAAAAAECU}{\bkmkend AAAAAAAECU}
00007 \par
{\bkmkstart AAAAAAAECV}{\bkmkend AAAAAAAECV}
00008 {\cf21 #include <stdio.h>}\par
{\bkmkstart AAAAAAAECW}{\bkmkend AAAAAAAECW}
00009 \par
{\bkmkstart AAAAAAAECX}{\bkmkend AAAAAAAECX}
00010 {\cf21 #include "buffer.h"}\par
{\bkmkstart AAAAAAAECY}{\bkmkend AAAAAAAECY}
00011 \par
{\bkmkstart AAAAAAAECZ}{\bkmkend AAAAAAAECZ}
00012 {\cf21 #ifdef _SOFTGPIO}\par
{\bkmkstart AAAAAAAEDA}{\bkmkend AAAAAAAEDA}
00013 {\cf21 #include "softgpio.h"}\par
{\bkmkstart AAAAAAAEDB}{\bkmkend AAAAAAAEDB}
00014 {\cf21 #else}\par
{\bkmkstart AAAAAAAEDC}{\bkmkend AAAAAAAEDC}
00015 {\cf21 #include <wiringPi.h>}\par
{\bkmkstart AAAAAAAEDD}{\bkmkend AAAAAAAEDD}
00016 {\cf21 #endif}\par
{\bkmkstart AAAAAAAEDE}{\bkmkend AAAAAAAEDE}
00017 \par
{\bkmkstart AAAAAAAEDF}{\bkmkend AAAAAAAEDF}
00018 {\cf21 #include "shared.h"}\par
{\bkmkstart AAAAAAAEDG}{\bkmkend AAAAAAAEDG}
00019 \par
{\bkmkstart AAAAAAAEDH}{\bkmkend AAAAAAAEDH}
00020 \par
{\bkmkstart AAAAAAAEDI}{\bkmkend AAAAAAAEDI}
00021 {\cf18 int} flag_receiver_ready;\par
{\bkmkstart AAAAAAAEDJ}{\bkmkend AAAAAAAEDJ}
00022 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 receiver_buffer;\par
{\bkmkstart AAAAAAAEDK}{\bkmkend AAAAAAAEDK}
00023 {\cf17 static} {\cf18 byte} elem;\par
{\bkmkstart AAAAAAAEDL}{\bkmkend AAAAAAAEDL}
00024 \par
{\bkmkstart AAAAAAAEDM}{\bkmkend AAAAAAAEDM}
00025 \par
{\bkmkstart AAAAAAAEDN}{\bkmkend AAAAAAAEDN}
00026 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAEDO}{\bkmkend AAAAAAAEDO}
00027 {\cf18 byte} RC_buffer_get()    {\cf20 /*function may block process */}\par
{\bkmkstart AAAAAAAEDP}{\bkmkend AAAAAAAEDP}
00028 \{\par
{\bkmkstart AAAAAAAEDQ}{\bkmkend AAAAAAAEDQ}
00029     {\cf18 byte} elem;\par
{\bkmkstart AAAAAAAEDR}{\bkmkend AAAAAAAEDR}
00030     {\cf19 if}(!buffer_empty(&receiver_buffer))\par
{\bkmkstart AAAAAAAEDS}{\bkmkend AAAAAAAEDS}
00031         buffer_get(&receiver_buffer, &elem);\par
{\bkmkstart AAAAAAAEDT}{\bkmkend AAAAAAAEDT}
00032     {\cf19 else}\par
{\bkmkstart AAAAAAAEDU}{\bkmkend AAAAAAAEDU}
00033     \{\par
{\bkmkstart AAAAAAAEDV}{\bkmkend AAAAAAAEDV}
00034         printf({\cf22 "Receiver::buffer is empty, please wait...\\n"});\par
{\bkmkstart AAAAAAAEDW}{\bkmkend AAAAAAAEDW}
00035         {\cf19 for}(;buffer_empty(&receiver_buffer);)\par
{\bkmkstart AAAAAAAEDX}{\bkmkend AAAAAAAEDX}
00036             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEDY}{\bkmkend AAAAAAAEDY}
00037         buffer_get(&receiver_buffer, &elem);\par
{\bkmkstart AAAAAAAEDZ}{\bkmkend AAAAAAAEDZ}
00038     \}\par
{\bkmkstart AAAAAAAEEA}{\bkmkend AAAAAAAEEA}
00039     {\cf19 return} elem;\par
{\bkmkstart AAAAAAAEEB}{\bkmkend AAAAAAAEEB}
00040 \}\par
{\bkmkstart AAAAAAAEEC}{\bkmkend AAAAAAAEEC}
00041 {\cf21 #else}\par
{\bkmkstart AAAAAAAEED}{\bkmkend AAAAAAAEED}
00042 {\cf18 byte} RC_buffer_get()\par
{\bkmkstart AAAAAAAEEE}{\bkmkend AAAAAAAEEE}
00043 \{\par
{\bkmkstart AAAAAAAEEF}{\bkmkend AAAAAAAEEF}
00044     {\cf18 byte} elem;\par
{\bkmkstart AAAAAAAEEG}{\bkmkend AAAAAAAEEG}
00045     {\cf19 for}(;buffer_empty(&receiver_buffer);)\par
{\bkmkstart AAAAAAAEEH}{\bkmkend AAAAAAAEEH}
00046         delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEEI}{\bkmkend AAAAAAAEEI}
00047     buffer_get(&receiver_buffer, &elem);\par
{\bkmkstart AAAAAAAEEJ}{\bkmkend AAAAAAAEEJ}
00048     {\cf19 return} elem;\par
{\bkmkstart AAAAAAAEEK}{\bkmkend AAAAAAAEEK}
00049 \}\par
{\bkmkstart AAAAAAAEEL}{\bkmkend AAAAAAAEEL}
00050 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAEEM}{\bkmkend AAAAAAAEEM}
00051 \par
{\bkmkstart AAAAAAAEEN}{\bkmkend AAAAAAAEEN}
00052 {\cf18 void} RC_print_buffer()\par
{\bkmkstart AAAAAAAEEO}{\bkmkend AAAAAAAEEO}
00053 \{\par
{\bkmkstart AAAAAAAEEP}{\bkmkend AAAAAAAEEP}
00054     printf({\cf22 "------------------\\n"});\par
{\bkmkstart AAAAAAAEEQ}{\bkmkend AAAAAAAEEQ}
00055     buffer_print(&receiver_buffer);\par
{\bkmkstart AAAAAAAEER}{\bkmkend AAAAAAAEER}
00056     buffer_display(&receiver_buffer);\par
{\bkmkstart AAAAAAAEES}{\bkmkend AAAAAAAEES}
00057     printf({\cf22 "------------------\\n"});\par
{\bkmkstart AAAAAAAEET}{\bkmkend AAAAAAAEET}
00058 \}\par
{\bkmkstart AAAAAAAEEU}{\bkmkend AAAAAAAEEU}
00059 \par
{\bkmkstart AAAAAAAEEV}{\bkmkend AAAAAAAEEV}
00060 {\cf18 void} RC_flush_buffer()\par
{\bkmkstart AAAAAAAEEW}{\bkmkend AAAAAAAEEW}
00061 \{\par
{\bkmkstart AAAAAAAEEX}{\bkmkend AAAAAAAEEX}
00062     buffer_flush(&receiver_buffer);\par
{\bkmkstart AAAAAAAEEY}{\bkmkend AAAAAAAEEY}
00063 \}\par
{\bkmkstart AAAAAAAEEZ}{\bkmkend AAAAAAAEEZ}
00064 \par
{\bkmkstart AAAAAAAEFA}{\bkmkend AAAAAAAEFA}
00065 {\cf18 void} receiver_init()\par
{\bkmkstart AAAAAAAEFB}{\bkmkend AAAAAAAEFB}
00066 \{\par
{\bkmkstart AAAAAAAEFC}{\bkmkend AAAAAAAEFC}
00067     {\cf19 for}(; !flag_sender_ready;)\par
{\bkmkstart AAAAAAAEFD}{\bkmkend AAAAAAAEFD}
00068         delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEFE}{\bkmkend AAAAAAAEFE}
00069     {\cf20 /*wiringPiSetup();*/}\par
{\bkmkstart AAAAAAAEFF}{\bkmkend AAAAAAAEFF}
00070     pinMode(RX, INPUT);\par
{\bkmkstart AAAAAAAEFG}{\bkmkend AAAAAAAEFG}
00071 \par
{\bkmkstart AAAAAAAEFH}{\bkmkend AAAAAAAEFH}
00072 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAEFI}{\bkmkend AAAAAAAEFI}
00073     printf({\cf22 "Receiver::GPIO RX is ready\\n"});\par
{\bkmkstart AAAAAAAEFJ}{\bkmkend AAAAAAAEFJ}
00074 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAEFK}{\bkmkend AAAAAAAEFK}
00075 \par
{\bkmkstart AAAAAAAEFL}{\bkmkend AAAAAAAEFL}
00076     buffer_init(&receiver_buffer, BUFFER_SIZE);\par
{\bkmkstart AAAAAAAEFM}{\bkmkend AAAAAAAEFM}
00077     {\cf19 for}(; !digitalRead(RX);)\par
{\bkmkstart AAAAAAAEFN}{\bkmkend AAAAAAAEFN}
00078         delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEFO}{\bkmkend AAAAAAAEFO}
00079     flag_receiver_ready = 1;\par
{\bkmkstart AAAAAAAEFP}{\bkmkend AAAAAAAEFP}
00080 \par
{\bkmkstart AAAAAAAEFQ}{\bkmkend AAAAAAAEFQ}
00081 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAEFR}{\bkmkend AAAAAAAEFR}
00082     printf({\cf22 "Receiver::receiver is ready\\n"});\par
{\bkmkstart AAAAAAAEFS}{\bkmkend AAAAAAAEFS}
00083 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAEFT}{\bkmkend AAAAAAAEFT}
00084 \par
{\bkmkstart AAAAAAAEFU}{\bkmkend AAAAAAAEFU}
00085 \}\par
{\bkmkstart AAAAAAAEFV}{\bkmkend AAAAAAAEFV}
00086 \par
{\bkmkstart AAAAAAAEFW}{\bkmkend AAAAAAAEFW}
00087 {\cf18 void} receiver_main()\par
{\bkmkstart AAAAAAAEFX}{\bkmkend AAAAAAAEFX}
00088 \{\par
{\bkmkstart AAAAAAAEFY}{\bkmkend AAAAAAAEFY}
00089 \par
{\bkmkstart AAAAAAAEFZ}{\bkmkend AAAAAAAEFZ}
00090     receiver_init();\par
{\bkmkstart AAAAAAAEGA}{\bkmkend AAAAAAAEGA}
00091 \par
{\bkmkstart AAAAAAAEGB}{\bkmkend AAAAAAAEGB}
00092     {\cf19 for}(;;)\par
{\bkmkstart AAAAAAAEGC}{\bkmkend AAAAAAAEGC}
00093     \{\par
{\bkmkstart AAAAAAAEGD}{\bkmkend AAAAAAAEGD}
00094         {\cf19 if}(digitalRead(RX))     {\cf20 /* stop bit */}\par
{\bkmkstart AAAAAAAEGE}{\bkmkend AAAAAAAEGE}
00095         \{\par
{\bkmkstart AAAAAAAEGF}{\bkmkend AAAAAAAEGF}
00096             {\cf19 for}(; digitalRead(RX);)\par
{\bkmkstart AAAAAAAEGG}{\bkmkend AAAAAAAEGG}
00097                 delay(_SCAN_TIME_SPAN);\par
{\bkmkstart AAAAAAAEGH}{\bkmkend AAAAAAAEGH}
00098 \par
{\bkmkstart AAAAAAAEGI}{\bkmkend AAAAAAAEGI}
00099 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAEGJ}{\bkmkend AAAAAAAEGJ}
00100             printf({\cf22 "Receiver::receiving...\\n"});\par
{\bkmkstart AAAAAAAEGK}{\bkmkend AAAAAAAEGK}
00101 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAEGL}{\bkmkend AAAAAAAEGL}
00102 \par
{\bkmkstart AAAAAAAEGM}{\bkmkend AAAAAAAEGM}
00103             delay(BAUD_RATE + BAUD_RATE/2);\par
{\bkmkstart AAAAAAAEGN}{\bkmkend AAAAAAAEGN}
00104 \par
{\bkmkstart AAAAAAAEGO}{\bkmkend AAAAAAAEGO}
00105 {\cf21 #ifdef _MSB}\par
{\bkmkstart AAAAAAAEGP}{\bkmkend AAAAAAAEGP}
00106 \par
{\bkmkstart AAAAAAAEGQ}{\bkmkend AAAAAAAEGQ}
00107             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEGR}{\bkmkend AAAAAAAEGR}
00108                 elem |= 1 << 7;\par
{\bkmkstart AAAAAAAEGS}{\bkmkend AAAAAAAEGS}
00109             {\cf19 else}\par
{\bkmkstart AAAAAAAEGT}{\bkmkend AAAAAAAEGT}
00110                 elem |= 0 << 7;\par
{\bkmkstart AAAAAAAEGU}{\bkmkend AAAAAAAEGU}
00111             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEGV}{\bkmkend AAAAAAAEGV}
00112 \par
{\bkmkstart AAAAAAAEGW}{\bkmkend AAAAAAAEGW}
00113             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEGX}{\bkmkend AAAAAAAEGX}
00114                 elem |= 1 << 6;\par
{\bkmkstart AAAAAAAEGY}{\bkmkend AAAAAAAEGY}
00115             {\cf19 else}\par
{\bkmkstart AAAAAAAEGZ}{\bkmkend AAAAAAAEGZ}
00116                 elem |= 0 << 6;\par
{\bkmkstart AAAAAAAEHA}{\bkmkend AAAAAAAEHA}
00117             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEHB}{\bkmkend AAAAAAAEHB}
00118 \par
{\bkmkstart AAAAAAAEHC}{\bkmkend AAAAAAAEHC}
00119             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEHD}{\bkmkend AAAAAAAEHD}
00120                 elem |= 1 << 5;\par
{\bkmkstart AAAAAAAEHE}{\bkmkend AAAAAAAEHE}
00121             {\cf19 else}\par
{\bkmkstart AAAAAAAEHF}{\bkmkend AAAAAAAEHF}
00122                 elem |= 0 << 5;\par
{\bkmkstart AAAAAAAEHG}{\bkmkend AAAAAAAEHG}
00123             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEHH}{\bkmkend AAAAAAAEHH}
00124 \par
{\bkmkstart AAAAAAAEHI}{\bkmkend AAAAAAAEHI}
00125             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEHJ}{\bkmkend AAAAAAAEHJ}
00126                 elem |= 1 << 4;\par
{\bkmkstart AAAAAAAEHK}{\bkmkend AAAAAAAEHK}
00127             {\cf19 else}\par
{\bkmkstart AAAAAAAEHL}{\bkmkend AAAAAAAEHL}
00128                 elem |= 0 << 4;\par
{\bkmkstart AAAAAAAEHM}{\bkmkend AAAAAAAEHM}
00129             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEHN}{\bkmkend AAAAAAAEHN}
00130 \par
{\bkmkstart AAAAAAAEHO}{\bkmkend AAAAAAAEHO}
00131             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEHP}{\bkmkend AAAAAAAEHP}
00132                 elem |= 1 << 3;\par
{\bkmkstart AAAAAAAEHQ}{\bkmkend AAAAAAAEHQ}
00133             {\cf19 else}\par
{\bkmkstart AAAAAAAEHR}{\bkmkend AAAAAAAEHR}
00134                 elem |= 0 << 3;\par
{\bkmkstart AAAAAAAEHS}{\bkmkend AAAAAAAEHS}
00135             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEHT}{\bkmkend AAAAAAAEHT}
00136 \par
{\bkmkstart AAAAAAAEHU}{\bkmkend AAAAAAAEHU}
00137             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEHV}{\bkmkend AAAAAAAEHV}
00138                 elem |= 1 << 2;\par
{\bkmkstart AAAAAAAEHW}{\bkmkend AAAAAAAEHW}
00139             {\cf19 else}\par
{\bkmkstart AAAAAAAEHX}{\bkmkend AAAAAAAEHX}
00140                 elem |= 0 << 2;\par
{\bkmkstart AAAAAAAEHY}{\bkmkend AAAAAAAEHY}
00141             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEHZ}{\bkmkend AAAAAAAEHZ}
00142 \par
{\bkmkstart AAAAAAAEIA}{\bkmkend AAAAAAAEIA}
00143             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEIB}{\bkmkend AAAAAAAEIB}
00144                 elem |= 1 << 1;\par
{\bkmkstart AAAAAAAEIC}{\bkmkend AAAAAAAEIC}
00145             {\cf19 else}\par
{\bkmkstart AAAAAAAEID}{\bkmkend AAAAAAAEID}
00146                 elem |= 0 << 1;\par
{\bkmkstart AAAAAAAEIE}{\bkmkend AAAAAAAEIE}
00147             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEIF}{\bkmkend AAAAAAAEIF}
00148 \par
{\bkmkstart AAAAAAAEIG}{\bkmkend AAAAAAAEIG}
00149             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEIH}{\bkmkend AAAAAAAEIH}
00150                 elem |= 1;\par
{\bkmkstart AAAAAAAEII}{\bkmkend AAAAAAAEII}
00151             {\cf19 else}\par
{\bkmkstart AAAAAAAEIJ}{\bkmkend AAAAAAAEIJ}
00152                 elem |= 0;\par
{\bkmkstart AAAAAAAEIK}{\bkmkend AAAAAAAEIK}
00153             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEIL}{\bkmkend AAAAAAAEIL}
00154 {\cf21 #else}\par
{\bkmkstart AAAAAAAEIM}{\bkmkend AAAAAAAEIM}
00155             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEIN}{\bkmkend AAAAAAAEIN}
00156                 elem |= 1;\par
{\bkmkstart AAAAAAAEIO}{\bkmkend AAAAAAAEIO}
00157             {\cf19 else}\par
{\bkmkstart AAAAAAAEIP}{\bkmkend AAAAAAAEIP}
00158                 elem |= 0;\par
{\bkmkstart AAAAAAAEIQ}{\bkmkend AAAAAAAEIQ}
00159             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEIR}{\bkmkend AAAAAAAEIR}
00160 \par
{\bkmkstart AAAAAAAEIS}{\bkmkend AAAAAAAEIS}
00161             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEIT}{\bkmkend AAAAAAAEIT}
00162                 elem |= 1 << 1;\par
{\bkmkstart AAAAAAAEIU}{\bkmkend AAAAAAAEIU}
00163             {\cf19 else}\par
{\bkmkstart AAAAAAAEIV}{\bkmkend AAAAAAAEIV}
00164                 elem |= 0 << 1;\par
{\bkmkstart AAAAAAAEIW}{\bkmkend AAAAAAAEIW}
00165             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEIX}{\bkmkend AAAAAAAEIX}
00166 \par
{\bkmkstart AAAAAAAEIY}{\bkmkend AAAAAAAEIY}
00167             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEIZ}{\bkmkend AAAAAAAEIZ}
00168                 elem |= 1 << 2;\par
{\bkmkstart AAAAAAAEJA}{\bkmkend AAAAAAAEJA}
00169             {\cf19 else}\par
{\bkmkstart AAAAAAAEJB}{\bkmkend AAAAAAAEJB}
00170                 elem |= 0 << 2;\par
{\bkmkstart AAAAAAAEJC}{\bkmkend AAAAAAAEJC}
00171             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEJD}{\bkmkend AAAAAAAEJD}
00172 \par
{\bkmkstart AAAAAAAEJE}{\bkmkend AAAAAAAEJE}
00173             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEJF}{\bkmkend AAAAAAAEJF}
00174                 elem |= 1 << 3;\par
{\bkmkstart AAAAAAAEJG}{\bkmkend AAAAAAAEJG}
00175             {\cf19 else}\par
{\bkmkstart AAAAAAAEJH}{\bkmkend AAAAAAAEJH}
00176                 elem |= 0 << 3;\par
{\bkmkstart AAAAAAAEJI}{\bkmkend AAAAAAAEJI}
00177             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEJJ}{\bkmkend AAAAAAAEJJ}
00178 \par
{\bkmkstart AAAAAAAEJK}{\bkmkend AAAAAAAEJK}
00179             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEJL}{\bkmkend AAAAAAAEJL}
00180                 elem |= 1 << 4;\par
{\bkmkstart AAAAAAAEJM}{\bkmkend AAAAAAAEJM}
00181             {\cf19 else}\par
{\bkmkstart AAAAAAAEJN}{\bkmkend AAAAAAAEJN}
00182                 elem |= 0 << 4;\par
{\bkmkstart AAAAAAAEJO}{\bkmkend AAAAAAAEJO}
00183             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEJP}{\bkmkend AAAAAAAEJP}
00184 \par
{\bkmkstart AAAAAAAEJQ}{\bkmkend AAAAAAAEJQ}
00185             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEJR}{\bkmkend AAAAAAAEJR}
00186                 elem |= 1 << 5;\par
{\bkmkstart AAAAAAAEJS}{\bkmkend AAAAAAAEJS}
00187             {\cf19 else}\par
{\bkmkstart AAAAAAAEJT}{\bkmkend AAAAAAAEJT}
00188                 elem |= 0 << 5;\par
{\bkmkstart AAAAAAAEJU}{\bkmkend AAAAAAAEJU}
00189             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEJV}{\bkmkend AAAAAAAEJV}
00190 \par
{\bkmkstart AAAAAAAEJW}{\bkmkend AAAAAAAEJW}
00191             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEJX}{\bkmkend AAAAAAAEJX}
00192                 elem |= 1 << 6;\par
{\bkmkstart AAAAAAAEJY}{\bkmkend AAAAAAAEJY}
00193             {\cf19 else}\par
{\bkmkstart AAAAAAAEJZ}{\bkmkend AAAAAAAEJZ}
00194                 elem |= 0 << 6;\par
{\bkmkstart AAAAAAAEKA}{\bkmkend AAAAAAAEKA}
00195             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEKB}{\bkmkend AAAAAAAEKB}
00196 \par
{\bkmkstart AAAAAAAEKC}{\bkmkend AAAAAAAEKC}
00197             {\cf19 if}(digitalRead(RX))\par
{\bkmkstart AAAAAAAEKD}{\bkmkend AAAAAAAEKD}
00198                 elem |= 1 << 7;\par
{\bkmkstart AAAAAAAEKE}{\bkmkend AAAAAAAEKE}
00199             {\cf19 else}\par
{\bkmkstart AAAAAAAEKF}{\bkmkend AAAAAAAEKF}
00200                 elem |= 0 << 7;\par
{\bkmkstart AAAAAAAEKG}{\bkmkend AAAAAAAEKG}
00201             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEKH}{\bkmkend AAAAAAAEKH}
00202 {\cf21 #endif  }{\cf20 /* _MSB */}{\cf21 }\par
{\bkmkstart AAAAAAAEKI}{\bkmkend AAAAAAAEKI}
00203 \par
{\bkmkstart AAAAAAAEKJ}{\bkmkend AAAAAAAEKJ}
00204             buffer_put(&receiver_buffer, &elem);\par
{\bkmkstart AAAAAAAEKK}{\bkmkend AAAAAAAEKK}
00205             elem = 0;\par
{\bkmkstart AAAAAAAEKL}{\bkmkend AAAAAAAEKL}
00206         \}\par
{\bkmkstart AAAAAAAEKM}{\bkmkend AAAAAAAEKM}
00207         {\cf19 else}\par
{\bkmkstart AAAAAAAEKN}{\bkmkend AAAAAAAEKN}
00208             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEKO}{\bkmkend AAAAAAAEKO}
00209     \}\par
{\bkmkstart AAAAAAAEKP}{\bkmkend AAAAAAAEKP}
00210 \par
{\bkmkstart AAAAAAAEKQ}{\bkmkend AAAAAAAEKQ}
00211 \}\par
{\bkmkstart AAAAAAAEKR}{\bkmkend AAAAAAAEKR}
00212 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SDWindow.cpp\par \pard\plain 
{\bkmkstart AAAAAAAEKS}
{\bkmkend AAAAAAAEKS}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAEKT}{\bkmkend AAAAAAAEKT}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAEKU}{\bkmkend AAAAAAAEKU}
00002 {\cf20 //}\par
{\bkmkstart AAAAAAAEKV}{\bkmkend AAAAAAAEKV}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAAEKW}{\bkmkend AAAAAAAEKW}
00004 {\cf20 //}\par
{\bkmkstart AAAAAAAEKX}{\bkmkend AAAAAAAEKX}
00005 {\cf20 // file: SDWindow.cpp}\par
{\bkmkstart AAAAAAAEKY}{\bkmkend AAAAAAAEKY}
00006 {\cf20 // last modified:}\par
{\bkmkstart AAAAAAAEKZ}{\bkmkend AAAAAAAEKZ}
00007 {\cf20 // copyright:}\par
{\bkmkstart AAAAAAAELA}{\bkmkend AAAAAAAELA}
00008 {\cf20 // version:}\par
{\bkmkstart AAAAAAAELB}{\bkmkend AAAAAAAELB}
00009 {\cf20 //}\par
{\bkmkstart AAAAAAAELC}{\bkmkend AAAAAAAELC}
00010 {\cf20 // email:}\par
{\bkmkstart AAAAAAAELD}{\bkmkend AAAAAAAELD}
00011 {\cf20 // web:}\par
{\bkmkstart AAAAAAAELE}{\bkmkend AAAAAAAELE}
00012 {\cf20 //}\par
{\bkmkstart AAAAAAAELF}{\bkmkend AAAAAAAELF}
00013 {\cf20 */}\par
{\bkmkstart AAAAAAAELG}{\bkmkend AAAAAAAELG}
00014 \par
{\bkmkstart AAAAAAAELH}{\bkmkend AAAAAAAELH}
00015 {\cf21 #include <cstdio>}\par
{\bkmkstart AAAAAAAELI}{\bkmkend AAAAAAAELI}
00016 {\cf21 #include <cstdlib>}\par
{\bkmkstart AAAAAAAELJ}{\bkmkend AAAAAAAELJ}
00017 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAELK}{\bkmkend AAAAAAAELK}
00018 {\cf21 #include <mx/mx.h>}\par
{\bkmkstart AAAAAAAELL}{\bkmkend AAAAAAAELL}
00019 {\cf21 #include <mx/gl.h>}\par
{\bkmkstart AAAAAAAELM}{\bkmkend AAAAAAAELM}
00020 {\cf21 #include "GlWindow.h"}\par
{\bkmkstart AAAAAAAELN}{\bkmkend AAAAAAAELN}
00021 {\cf20 //#include "CmdLine.h"}\par
{\bkmkstart AAAAAAAELO}{\bkmkend AAAAAAAELO}
00022 {\cf20 //#include "shared.h"}\par
{\bkmkstart AAAAAAAELP}{\bkmkend AAAAAAAELP}
00023 {\cf20 //#include "server.h"}\par
{\bkmkstart AAAAAAAELQ}{\bkmkend AAAAAAAELQ}
00024 \par
{\bkmkstart AAAAAAAELR}{\bkmkend AAAAAAAELR}
00025 {\cf21 #include "SDWindow.h"}\par
{\bkmkstart AAAAAAAELS}{\bkmkend AAAAAAAELS}
00026 \par
{\bkmkstart AAAAAAAELT}{\bkmkend AAAAAAAELT}
00027 {\cf20 /*}\par
{\bkmkstart AAAAAAAELU}{\bkmkend AAAAAAAELU}
00028 {\cf20 #ifdef _SOFTGPIO}\par
{\bkmkstart AAAAAAAELV}{\bkmkend AAAAAAAELV}
00029 {\cf20 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAELW}{\bkmkend AAAAAAAELW}
00030 {\cf20 extern "C"}\par
{\bkmkstart AAAAAAAELX}{\bkmkend AAAAAAAELX}
00031 {\cf20 \{}\par
{\bkmkstart AAAAAAAELY}{\bkmkend AAAAAAAELY}
00032 {\cf20     namespace \{}\par
{\bkmkstart AAAAAAAELZ}{\bkmkend AAAAAAAELZ}
00033 {\cf20 #endif}\par
{\bkmkstart AAAAAAAEMA}{\bkmkend AAAAAAAEMA}
00034 {\cf20 extern void delay(unsigned int howLong);}\par
{\bkmkstart AAAAAAAEMB}{\bkmkend AAAAAAAEMB}
00035 {\cf20 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAEMC}{\bkmkend AAAAAAAEMC}
00036 {\cf20     \} //namespace}\par
{\bkmkstart AAAAAAAEMD}{\bkmkend AAAAAAAEMD}
00037 {\cf20 \}}\par
{\bkmkstart AAAAAAAEME}{\bkmkend AAAAAAAEME}
00038 {\cf20 #endif}\par
{\bkmkstart AAAAAAAEMF}{\bkmkend AAAAAAAEMF}
00039 {\cf20 #else}\par
{\bkmkstart AAAAAAAEMG}{\bkmkend AAAAAAAEMG}
00040 {\cf20 #include <wiringPi.h>}\par
{\bkmkstart AAAAAAAEMH}{\bkmkend AAAAAAAEMH}
00041 {\cf20 #endif //_SOFTGPIO}\par
{\bkmkstart AAAAAAAEMI}{\bkmkend AAAAAAAEMI}
00042 {\cf20 */}\par
{\bkmkstart AAAAAAAEMJ}{\bkmkend AAAAAAAEMJ}
00043 \par
{\bkmkstart AAAAAAAEMK}{\bkmkend AAAAAAAEMK}
00044 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRP" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow}}}
 *g_SDWindow = 0;\par
{\bkmkstart AAAAAAAEML}{\bkmkend AAAAAAAEML}
00045 {\cf20 //char g_appTitle[] = "Sender Window";}\par
{\bkmkstart AAAAAAAEMM}{\bkmkend AAAAAAAEMM}
00046 \par
{\bkmkstart AAAAAAAEMN}{\bkmkend AAAAAAAEMN}
00047 SDWindow :: SDWindow() : mxWindow( 0, 0, 0, 0, 0, {\cf22 "Sender Window"}, mxWindow::Normal )\par
{\bkmkstart AAAAAAAEMO}{\bkmkend AAAAAAAEMO}
00048 \{\par
{\bkmkstart AAAAAAAEMP}{\bkmkend AAAAAAAEMP}
00049         {\cf20 // create menu stuff}\par
{\bkmkstart AAAAAAAEMQ}{\bkmkend AAAAAAAEMQ}
00050         mb = {\cf17 new} mxMenuBar ({\cf17 this});\par
{\bkmkstart AAAAAAAEMR}{\bkmkend AAAAAAAEMR}
00051         mxMenu *menuFile = {\cf17 new} mxMenu ();\par
{\bkmkstart AAAAAAAEMS}{\bkmkend AAAAAAAEMS}
00052         mxMenu *menuAction = {\cf17 new} mxMenu ();\par
{\bkmkstart AAAAAAAEMT}{\bkmkend AAAAAAAEMT}
00053 {\cf20 //      mxMenu *menuTool = new mxMenu ();}\par
{\bkmkstart AAAAAAAEMU}{\bkmkend AAAAAAAEMU}
00054         mxMenu *menuHelp = {\cf17 new} mxMenu ();\par
{\bkmkstart AAAAAAAEMV}{\bkmkend AAAAAAAEMV}
00055 \par
{\bkmkstart AAAAAAAEMW}{\bkmkend AAAAAAAEMW}
00056         mb->addMenu ({\cf22 "File"}, menuFile);\par
{\bkmkstart AAAAAAAEMX}{\bkmkend AAAAAAAEMX}
00057         mb->addMenu ({\cf22 "Action"}, menuAction);\par
{\bkmkstart AAAAAAAEMY}{\bkmkend AAAAAAAEMY}
00058 {\cf20 //      mb->addMenu ("Tools", menuTool);}\par
{\bkmkstart AAAAAAAEMZ}{\bkmkend AAAAAAAEMZ}
00059         mb->addMenu ({\cf22 "Help"}, menuHelp);\par
{\bkmkstart AAAAAAAENA}{\bkmkend AAAAAAAENA}
00060 \par
{\bkmkstart AAAAAAAENB}{\bkmkend AAAAAAAENB}
00061 {\cf20 //      menuFile->addSeparator ();}\par
{\bkmkstart AAAAAAAENC}{\bkmkend AAAAAAAENC}
00062         menuFile->add ({\cf22 "Exit"}, IDC_FILE_EXIT);\par
{\bkmkstart AAAAAAAEND}{\bkmkend AAAAAAAEND}
00063 \par
{\bkmkstart AAAAAAAENE}{\bkmkend AAAAAAAENE}
00064 {\cf20 //      menuAction->add ("Connect...", IDC_ACTION_CONNECT);}\par
{\bkmkstart AAAAAAAENF}{\bkmkend AAAAAAAENF}
00065 {\cf20 //      menuAction->add ("Disconnect...", IDC_ACTION_DISCONNECT);}\par
{\bkmkstart AAAAAAAENG}{\bkmkend AAAAAAAENG}
00066         menuAction->add ({\cf22 "Display Information"}, IDC_ACTION_INFO);\par
{\bkmkstart AAAAAAAENH}{\bkmkend AAAAAAAENH}
00067         menuAction->addSeparator ();\par
{\bkmkstart AAAAAAAENI}{\bkmkend AAAAAAAENI}
00068         menuAction->add ({\cf22 "Undo"}, IDC_ACTION_UNDO);\par
{\bkmkstart AAAAAAAENJ}{\bkmkend AAAAAAAENJ}
00069 {\cf20 //      menuAction->add ("Redo", IDC_ACTION_REDO);}\par
{\bkmkstart AAAAAAAENK}{\bkmkend AAAAAAAENK}
00070         menuAction->addSeparator ();\par
{\bkmkstart AAAAAAAENL}{\bkmkend AAAAAAAENL}
00071         menuAction->add ({\cf22 "Clear Sceen"}, IDC_ACTION_CLS);\par
{\bkmkstart AAAAAAAENM}{\bkmkend AAAAAAAENM}
00072 {\cf20 //      menuAction->add ("Refresh", IDC_ACTION_REFRESH);}\par
{\bkmkstart AAAAAAAENN}{\bkmkend AAAAAAAENN}
00073 \par
{\bkmkstart AAAAAAAENO}{\bkmkend AAAAAAAENO}
00074         menuHelp->add ({\cf22 "About..."}, IDC_HELP_ABOUT);\par
{\bkmkstart AAAAAAAENP}{\bkmkend AAAAAAAENP}
00075 \par
{\bkmkstart AAAAAAAENQ}{\bkmkend AAAAAAAENQ}
00076         {\cf20 // create the OpenGL window}\par
{\bkmkstart AAAAAAAENR}{\bkmkend AAAAAAAENR}
00077         d_GlWindow = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 ({\cf17 this}, 0, 0, 0, 0, {\cf22 ""}, mxWindow::Normal);\par
{\bkmkstart AAAAAAAENS}{\bkmkend AAAAAAAENS}
00078 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAAENT}{\bkmkend AAAAAAAENT}
00079         SetWindowLong ((HWND) d_GlWindow->getHandle (), GWL_EXSTYLE, WS_EX_CLIENTEDGE);\par
{\bkmkstart AAAAAAAENU}{\bkmkend AAAAAAAENU}
00080 {\cf21 #endif}\par
{\bkmkstart AAAAAAAENV}{\bkmkend AAAAAAAENV}
00081 \par
{\bkmkstart AAAAAAAENW}{\bkmkend AAAAAAAENW}
00082         g_GlWindow = d_GlWindow;\par
{\bkmkstart AAAAAAAENX}{\bkmkend AAAAAAAENX}
00083 \par
{\bkmkstart AAAAAAAENY}{\bkmkend AAAAAAAENY}
00084 {\cf20 //      line_t emptyline = \{0,0,0,0\};}\par
{\bkmkstart AAAAAAAENZ}{\bkmkend AAAAAAAENZ}
00085 {\cf20 //      cmd_lines.assign(32, emptyline);}\par
{\bkmkstart AAAAAAAEOA}{\bkmkend AAAAAAAEOA}
00086 \par
{\bkmkstart AAAAAAAEOB}{\bkmkend AAAAAAAEOB}
00087         setBounds (20, 20, 640, 540);\par
{\bkmkstart AAAAAAAEOC}{\bkmkend AAAAAAAEOC}
00088         setVisible ({\cf17 true});\par
{\bkmkstart AAAAAAAEOD}{\bkmkend AAAAAAAEOD}
00089 \}\par
{\bkmkstart AAAAAAAEOE}{\bkmkend AAAAAAAEOE}
00090 \par
{\bkmkstart AAAAAAAEOF}{\bkmkend AAAAAAAEOF}
00091 \par
{\bkmkstart AAAAAAAEOG}{\bkmkend AAAAAAAEOG}
00092 \par
{\bkmkstart AAAAAAAEOH}{\bkmkend AAAAAAAEOH}
00093 SDWindow::~SDWindow ()\par
{\bkmkstart AAAAAAAEOI}{\bkmkend AAAAAAAEOI}
00094 \{\par
{\bkmkstart AAAAAAAEOJ}{\bkmkend AAAAAAAEOJ}
00095         {\cf20 // grab some params in case that hasn't updates}\par
{\bkmkstart AAAAAAAEOK}{\bkmkend AAAAAAAEOK}
00096 \par
{\bkmkstart AAAAAAAEOL}{\bkmkend AAAAAAAEOL}
00097 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAAEOM}{\bkmkend AAAAAAAEOM}
00098         DeleteFile ({\cf22 "midump.txt"});\par
{\bkmkstart AAAAAAAEON}{\bkmkend AAAAAAAEON}
00099 {\cf21 #endif}\par
{\bkmkstart AAAAAAAEOO}{\bkmkend AAAAAAAEOO}
00100 \}\par
{\bkmkstart AAAAAAAEOP}{\bkmkend AAAAAAAEOP}
00101 {\cf20 /*}\par
{\bkmkstart AAAAAAAEOQ}{\bkmkend AAAAAAAEOQ}
00102 {\cf20 void SDWindow :: checkboxSet( int id, bool bState )}\par
{\bkmkstart AAAAAAAEOR}{\bkmkend AAAAAAAEOR}
00103 {\cf20 \{}\par
{\bkmkstart AAAAAAAEOS}{\bkmkend AAAAAAAEOS}
00104 {\cf20         mb->setChecked( id, bState );}\par
{\bkmkstart AAAAAAAEOT}{\bkmkend AAAAAAAEOT}
00105 {\cf20 \}}\par
{\bkmkstart AAAAAAAEOU}{\bkmkend AAAAAAAEOU}
00106 {\cf20 */}\par
{\bkmkstart AAAAAAAEOV}{\bkmkend AAAAAAAEOV}
00107 {\cf18 int}\par
{\bkmkstart AAAAAAAEOW}{\bkmkend AAAAAAAEOW}
00108 SDWindow::handleEvent (mxEvent *event)\par
{\bkmkstart AAAAAAAEOX}{\bkmkend AAAAAAAEOX}
00109 \{\par
{\bkmkstart AAAAAAAEOY}{\bkmkend AAAAAAAEOY}
00110         {\cf19 switch} (event->event)\par
{\bkmkstart AAAAAAAEOZ}{\bkmkend AAAAAAAEOZ}
00111         \{\par
{\bkmkstart AAAAAAAEPA}{\bkmkend AAAAAAAEPA}
00112 \par
{\bkmkstart AAAAAAAEPB}{\bkmkend AAAAAAAEPB}
00113         {\cf19 case} mxEvent::Action:\par
{\bkmkstart AAAAAAAEPC}{\bkmkend AAAAAAAEPC}
00114         \{\par
{\bkmkstart AAAAAAAEPD}{\bkmkend AAAAAAAEPD}
00115                 {\cf19 switch} (event->action)\par
{\bkmkstart AAAAAAAEPE}{\bkmkend AAAAAAAEPE}
00116                 \{\par
{\bkmkstart AAAAAAAEPF}{\bkmkend AAAAAAAEPF}
00117                 {\cf19 case} IDC_FILE_EXIT:\par
{\bkmkstart AAAAAAAEPG}{\bkmkend AAAAAAAEPG}
00118                 \{\par
{\bkmkstart AAAAAAAEPH}{\bkmkend AAAAAAAEPH}
00119                         redraw ();\par
{\bkmkstart AAAAAAAEPI}{\bkmkend AAAAAAAEPI}
00120                         mx::quit ();\par
{\bkmkstart AAAAAAAEPJ}{\bkmkend AAAAAAAEPJ}
00121                 \}\par
{\bkmkstart AAAAAAAEPK}{\bkmkend AAAAAAAEPK}
00122                 {\cf19 break};\par
{\bkmkstart AAAAAAAEPL}{\bkmkend AAAAAAAEPL}
00123 \par
{\bkmkstart AAAAAAAEPM}{\bkmkend AAAAAAAEPM}
00124                 {\cf19 case} IDC_ACTION_CLS:\par
{\bkmkstart AAAAAAAEPN}{\bkmkend AAAAAAAEPN}
00125             getGlWindow()->LineClear();\par
{\bkmkstart AAAAAAAEPO}{\bkmkend AAAAAAAEPO}
00126             {\cf19 break};\par
{\bkmkstart AAAAAAAEPP}{\bkmkend AAAAAAAEPP}
00127 \par
{\bkmkstart AAAAAAAEPQ}{\bkmkend AAAAAAAEPQ}
00128         {\cf19 case} IDC_ACTION_UNDO:\par
{\bkmkstart AAAAAAAEPR}{\bkmkend AAAAAAAEPR}
00129             getGlWindow()->LineUndo();\par
{\bkmkstart AAAAAAAEPS}{\bkmkend AAAAAAAEPS}
00130             {\cf19 break};\par
{\bkmkstart AAAAAAAEPT}{\bkmkend AAAAAAAEPT}
00131 \par
{\bkmkstart AAAAAAAEPU}{\bkmkend AAAAAAAEPU}
00132                 {\cf19 case} IDC_HELP_ABOUT:\par
{\bkmkstart AAAAAAAEPV}{\bkmkend AAAAAAAEPV}
00133                         mxMessageBox ({\cf17 this},\par
{\bkmkstart AAAAAAAEPW}{\bkmkend AAAAAAAEPW}
00134                                 {\cf22 "Painter P20\\n"}\par
{\bkmkstart AAAAAAAEPX}{\bkmkend AAAAAAAEPX}
00135                                 {\cf22 "Build:\\t"} __DATE__ {\cf22 ".\\n"}\par
{\bkmkstart AAAAAAAEPY}{\bkmkend AAAAAAAEPY}
00136                                 {\cf22 "Email:\\tjw26u22@soton.ac.uk\\n"}, {\cf22 "Painter"},\par
{\bkmkstart AAAAAAAEPZ}{\bkmkend AAAAAAAEPZ}
00137                                 MX_MB_OK | MX_MB_INFORMATION );\par
{\bkmkstart AAAAAAAEQA}{\bkmkend AAAAAAAEQA}
00138                         {\cf19 break};\par
{\bkmkstart AAAAAAAEQB}{\bkmkend AAAAAAAEQB}
00139 \par
{\bkmkstart AAAAAAAEQC}{\bkmkend AAAAAAAEQC}
00140                 \} {\cf20 //switch (event->action)}\par
{\bkmkstart AAAAAAAEQD}{\bkmkend AAAAAAAEQD}
00141 \par
{\bkmkstart AAAAAAAEQE}{\bkmkend AAAAAAAEQE}
00142         \} {\cf20 // mxEvent::Action}\par
{\bkmkstart AAAAAAAEQF}{\bkmkend AAAAAAAEQF}
00143         {\cf19 break};\par
{\bkmkstart AAAAAAAEQG}{\bkmkend AAAAAAAEQG}
00144 \par
{\bkmkstart AAAAAAAEQH}{\bkmkend AAAAAAAEQH}
00145         {\cf19 case} mxEvent::Size:\par
{\bkmkstart AAAAAAAEQI}{\bkmkend AAAAAAAEQI}
00146         \{\par
{\bkmkstart AAAAAAAEQJ}{\bkmkend AAAAAAAEQJ}
00147                 {\cf18 int} w = {\cf17 event}->width;\par
{\bkmkstart AAAAAAAEQK}{\bkmkend AAAAAAAEQK}
00148                 {\cf18 int} h = {\cf17 event}->height;\par
{\bkmkstart AAAAAAAEQL}{\bkmkend AAAAAAAEQL}
00149                 {\cf18 int} y = mb->getHeight ();\par
{\bkmkstart AAAAAAAEQM}{\bkmkend AAAAAAAEQM}
00150 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAAEQN}{\bkmkend AAAAAAAEQN}
00151 {\cf21 #define HEIGHT 120}\par
{\bkmkstart AAAAAAAEQO}{\bkmkend AAAAAAAEQO}
00152 {\cf21 #else}\par
{\bkmkstart AAAAAAAEQP}{\bkmkend AAAAAAAEQP}
00153 {\cf21 #define HEIGHT 140}\par
{\bkmkstart AAAAAAAEQQ}{\bkmkend AAAAAAAEQQ}
00154                 h -= 40;\par
{\bkmkstart AAAAAAAEQR}{\bkmkend AAAAAAAEQR}
00155 {\cf21 #endif}\par
{\bkmkstart AAAAAAAEQS}{\bkmkend AAAAAAAEQS}
00156 \par
{\bkmkstart AAAAAAAEQT}{\bkmkend AAAAAAAEQT}
00157 {\cf20 //              d_GlWindow->setBounds (0, y, w, h - HEIGHT);}\par
{\bkmkstart AAAAAAAEQU}{\bkmkend AAAAAAAEQU}
00158                 d_GlWindow->setBounds (0, y, w, h);\par
{\bkmkstart AAAAAAAEQV}{\bkmkend AAAAAAAEQV}
00159 {\cf20 //              d_cpl->setBounds (0, y + h - HEIGHT, w, HEIGHT);}\par
{\bkmkstart AAAAAAAEQW}{\bkmkend AAAAAAAEQW}
00160         \}\par
{\bkmkstart AAAAAAAEQX}{\bkmkend AAAAAAAEQX}
00161         {\cf19 break};\par
{\bkmkstart AAAAAAAEQY}{\bkmkend AAAAAAAEQY}
00162 \par
{\bkmkstart AAAAAAAEQZ}{\bkmkend AAAAAAAEQZ}
00163         {\cf19 break};\par
{\bkmkstart AAAAAAAERA}{\bkmkend AAAAAAAERA}
00164         \} {\cf20 // event->event}\par
{\bkmkstart AAAAAAAERB}{\bkmkend AAAAAAAERB}
00165 \par
{\bkmkstart AAAAAAAERC}{\bkmkend AAAAAAAERC}
00166         {\cf19 return} 1;\par
{\bkmkstart AAAAAAAERD}{\bkmkend AAAAAAAERD}
00167 \}\par
{\bkmkstart AAAAAAAERE}{\bkmkend AAAAAAAERE}
00168 \par
{\bkmkstart AAAAAAAERF}{\bkmkend AAAAAAAERF}
00169 \par
{\bkmkstart AAAAAAAERG}{\bkmkend AAAAAAAERG}
00170 \par
{\bkmkstart AAAAAAAERH}{\bkmkend AAAAAAAERH}
00171 {\cf18 void}\par
{\bkmkstart AAAAAAAERI}{\bkmkend AAAAAAAERI}
00172 SDWindow::redraw ()\par
{\bkmkstart AAAAAAAERJ}{\bkmkend AAAAAAAERJ}
00173 \{\par
{\bkmkstart AAAAAAAERK}{\bkmkend AAAAAAAERK}
00174         mxEvent event;\par
{\bkmkstart AAAAAAAERL}{\bkmkend AAAAAAAERL}
00175         {\cf17 event}.event = mxEvent::Size;\par
{\bkmkstart AAAAAAAERM}{\bkmkend AAAAAAAERM}
00176         {\cf17 event}.width = w2 ();\par
{\bkmkstart AAAAAAAERN}{\bkmkend AAAAAAAERN}
00177         {\cf17 event}.height = h2 ();\par
{\bkmkstart AAAAAAAERO}{\bkmkend AAAAAAAERO}
00178         handleEvent (&event);\par
{\bkmkstart AAAAAAAERP}{\bkmkend AAAAAAAERP}
00179 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SDWindow.h\par \pard\plain 
{\bkmkstart AAAAAAAERQ}
{\bkmkend AAAAAAAERQ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAERR}{\bkmkend AAAAAAAERR}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAERS}{\bkmkend AAAAAAAERS}
00002 {\cf20 //}\par
{\bkmkstart AAAAAAAERT}{\bkmkend AAAAAAAERT}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAAERU}{\bkmkend AAAAAAAERU}
00004 {\cf20 //}\par
{\bkmkstart AAAAAAAERV}{\bkmkend AAAAAAAERV}
00005 {\cf20 // file: SDWindow.h}\par
{\bkmkstart AAAAAAAERW}{\bkmkend AAAAAAAERW}
00006 {\cf20 // last modified:}\par
{\bkmkstart AAAAAAAERX}{\bkmkend AAAAAAAERX}
00007 {\cf20 // copyright:}\par
{\bkmkstart AAAAAAAERY}{\bkmkend AAAAAAAERY}
00008 {\cf20 // version:}\par
{\bkmkstart AAAAAAAERZ}{\bkmkend AAAAAAAERZ}
00009 {\cf20 //}\par
{\bkmkstart AAAAAAAESA}{\bkmkend AAAAAAAESA}
00010 {\cf20 // email:}\par
{\bkmkstart AAAAAAAESB}{\bkmkend AAAAAAAESB}
00011 {\cf20 // web:}\par
{\bkmkstart AAAAAAAESC}{\bkmkend AAAAAAAESC}
00012 {\cf20 //}\par
{\bkmkstart AAAAAAAESD}{\bkmkend AAAAAAAESD}
00013 {\cf20 */}\par
{\bkmkstart AAAAAAAESE}{\bkmkend AAAAAAAESE}
00014 \par
{\bkmkstart AAAAAAAESF}{\bkmkend AAAAAAAESF}
00015 {\cf21 #ifndef INCLUDED_SDWINDOW}\par
{\bkmkstart AAAAAAAESG}{\bkmkend AAAAAAAESG}
00016 {\cf21 #define INCLUDED_SDWINDOW}\par
{\bkmkstart AAAAAAAESH}{\bkmkend AAAAAAAESH}
00017 \par
{\bkmkstart AAAAAAAESI}{\bkmkend AAAAAAAESI}
00018 \par
{\bkmkstart AAAAAAAESJ}{\bkmkend AAAAAAAESJ}
00019 \par
{\bkmkstart AAAAAAAESK}{\bkmkend AAAAAAAESK}
00020 {\cf21 #ifndef INCLUDED_MXWINDOW}\par
{\bkmkstart AAAAAAAESL}{\bkmkend AAAAAAAESL}
00021 {\cf21 #include <mx/mxWindow.h>}\par
{\bkmkstart AAAAAAAESM}{\bkmkend AAAAAAAESM}
00022 {\cf21 #endif}\par
{\bkmkstart AAAAAAAESN}{\bkmkend AAAAAAAESN}
00023 \par
{\bkmkstart AAAAAAAESO}{\bkmkend AAAAAAAESO}
00024 {\cf20 //#include "CmdLine.h"}\par
{\bkmkstart AAAAAAAESP}{\bkmkend AAAAAAAESP}
00025 \par
{\bkmkstart AAAAAAAESQ}{\bkmkend AAAAAAAESQ}
00026 {\cf21 #define IDC_FILE_EXIT                   1017}\par
{\bkmkstart AAAAAAAESR}{\bkmkend AAAAAAAESR}
00027 \par
{\bkmkstart AAAAAAAESS}{\bkmkend AAAAAAAESS}
00028 {\cf21 #define IDC_ACTION_CONNECT              1101}\par
{\bkmkstart AAAAAAAEST}{\bkmkend AAAAAAAEST}
00029 {\cf21 #define IDC_ACTION_DISCONNECT   1102}\par
{\bkmkstart AAAAAAAESU}{\bkmkend AAAAAAAESU}
00030 {\cf21 #define IDC_ACTION_INFO         1103}\par
{\bkmkstart AAAAAAAESV}{\bkmkend AAAAAAAESV}
00031 {\cf21 #define IDC_ACTION_UNDO         1104}\par
{\bkmkstart AAAAAAAESW}{\bkmkend AAAAAAAESW}
00032 {\cf21 #define IDC_ACTION_REDO         1105}\par
{\bkmkstart AAAAAAAESX}{\bkmkend AAAAAAAESX}
00033 {\cf21 #define IDC_ACTION_CLS          1106}\par
{\bkmkstart AAAAAAAESY}{\bkmkend AAAAAAAESY}
00034 {\cf21 #define IDC_ACTION_REFRESH      1107}\par
{\bkmkstart AAAAAAAESZ}{\bkmkend AAAAAAAESZ}
00035 \par
{\bkmkstart AAAAAAAETA}{\bkmkend AAAAAAAETA}
00036 {\cf21 #define IDC_HELP_GOTOHOMEPAGE   1301}\par
{\bkmkstart AAAAAAAETB}{\bkmkend AAAAAAAETB}
00037 {\cf21 #define IDC_HELP_ABOUT                  1302}\par
{\bkmkstart AAAAAAAETC}{\bkmkend AAAAAAAETC}
00038 \par
{\bkmkstart AAAAAAAETD}{\bkmkend AAAAAAAETD}
00039 {\cf20 //for window}\par
{\bkmkstart AAAAAAAETE}{\bkmkend AAAAAAAETE}
00040 {\cf21 #define X_RESOLUTION 640}\par
{\bkmkstart AAAAAAAETF}{\bkmkend AAAAAAAETF}
00041 {\cf21 #define Y_RESOLUTION 540}\par
{\bkmkstart AAAAAAAETG}{\bkmkend AAAAAAAETG}
00042 \par
{\bkmkstart AAAAAAAETH}{\bkmkend AAAAAAAETH}
00043 \par
{\bkmkstart AAAAAAAETI}{\bkmkend AAAAAAAETI}
00044 {\cf17 class }mxMenuBar;\par
{\bkmkstart AAAAAAAETJ}{\bkmkend AAAAAAAETJ}
00045 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
;\par
{\bkmkstart AAAAAAAETK}{\bkmkend AAAAAAAETK}
00046 \par
{\bkmkstart AAAAAAAETL}{\bkmkend AAAAAAAETL}
00047 \par
{\bkmkstart AAAAAAAETM}{\bkmkend AAAAAAAETM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRP" }{}}{\fldrslt {\cs37\ul\cf2 00048}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRP" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow}}}
 : {\cf17 public} mxWindow\par
{\bkmkstart AAAAAAAETN}{\bkmkend AAAAAAAETN}
00049 \{\par
{\bkmkstart AAAAAAAETO}{\bkmkend AAAAAAAETO}
00050 {\cf17 public}:\par
{\bkmkstart AAAAAAAETP}{\bkmkend AAAAAAAETP}
00051         {\cf20 // CREATORS}\par
{\bkmkstart AAAAAAAETQ}{\bkmkend AAAAAAAETQ}
00052         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRP" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow}}}
 ();\par
{\bkmkstart AAAAAAAETR}{\bkmkend AAAAAAAETR}
00053         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRP" }{}}{\fldrslt {\cs37\ul\cf2 ~SDWindow}}}
 ();\par
{\bkmkstart AAAAAAAETS}{\bkmkend AAAAAAAETS}
00054 \par
{\bkmkstart AAAAAAAETT}{\bkmkend AAAAAAAETT}
00055         {\cf20 // MANIPULATORS}\par
{\bkmkstart AAAAAAAETU}{\bkmkend AAAAAAAETU}
00056         {\cf17 virtual} {\cf18 int} handleEvent (mxEvent *event);\par
{\bkmkstart AAAAAAAETV}{\bkmkend AAAAAAAETV}
00057 {\cf20 //      void checkboxSet( int id, bool bState );}\par
{\bkmkstart AAAAAAAETW}{\bkmkend AAAAAAAETW}
00058         {\cf18 void} redraw ();\par
{\bkmkstart AAAAAAAETX}{\bkmkend AAAAAAAETX}
00059 \par
{\bkmkstart AAAAAAAETY}{\bkmkend AAAAAAAETY}
00060         {\cf20 // ACCESSORS}\par
{\bkmkstart AAAAAAAETZ}{\bkmkend AAAAAAAETZ}
00061         mxMenuBar *getMenuBar (){\cf17  const }\{ {\cf19 return} mb; \}\par
{\bkmkstart AAAAAAAEUA}{\bkmkend AAAAAAAEUA}
00062         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 *getGlWindow (){\cf17  const }\{ {\cf19 return} d_GlWindow; \}\par
{\bkmkstart AAAAAAAEUB}{\bkmkend AAAAAAAEUB}
00063 \par
{\bkmkstart AAAAAAAEUC}{\bkmkend AAAAAAAEUC}
00064 {\cf17 private}:\par
{\bkmkstart AAAAAAAEUD}{\bkmkend AAAAAAAEUD}
00065     mxMenuBar *mb;\par
{\bkmkstart AAAAAAAEUE}{\bkmkend AAAAAAAEUE}
00066         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVR" }{}}{\fldrslt {\cs37\ul\cf2 GlWindow}}}
 *d_GlWindow;\par
{\bkmkstart AAAAAAAEUF}{\bkmkend AAAAAAAEUF}
00067 {\cf20 //    line_t PrevLine;}\par
{\bkmkstart AAAAAAAEUG}{\bkmkend AAAAAAAEUG}
00068 {\cf20 //    drawlines_t Buffer;}\par
{\bkmkstart AAAAAAAEUH}{\bkmkend AAAAAAAEUH}
00069 \};\par
{\bkmkstart AAAAAAAEUI}{\bkmkend AAAAAAAEUI}
00070 \par
{\bkmkstart AAAAAAAEUJ}{\bkmkend AAAAAAAEUJ}
00071 {\cf17 extern} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACRP" }{}}{\fldrslt {\cs37\ul\cf2 SDWindow}}}
 *g_SDWindow;\par
{\bkmkstart AAAAAAAEUK}{\bkmkend AAAAAAAEUK}
00072 {\cf20 //extern char g_appTitle[];}\par
{\bkmkstart AAAAAAAEUL}{\bkmkend AAAAAAAEUL}
00073 \par
{\bkmkstart AAAAAAAEUM}{\bkmkend AAAAAAAEUM}
00074 {\cf21 #endif }{\cf20 // INCLUDED_MDLVIEWER}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
sender.c\par \pard\plain 
{\bkmkstart AAAAAAAEUN}
{\bkmkend AAAAAAAEUN}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAEUO}{\bkmkend AAAAAAAEUO}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAEUP}{\bkmkend AAAAAAAEUP}
00002 {\cf20 }\par
{\bkmkstart AAAAAAAEUQ}{\bkmkend AAAAAAAEUQ}
00003 {\cf20 ===== sender.c ========================================================}\par
{\bkmkstart AAAAAAAEUR}{\bkmkend AAAAAAAEUR}
00004 {\cf20 }\par
{\bkmkstart AAAAAAAEUS}{\bkmkend AAAAAAAEUS}
00005 {\cf20 */}\par
{\bkmkstart AAAAAAAEUT}{\bkmkend AAAAAAAEUT}
00006 \par
{\bkmkstart AAAAAAAEUU}{\bkmkend AAAAAAAEUU}
00007 \par
{\bkmkstart AAAAAAAEUV}{\bkmkend AAAAAAAEUV}
00008 {\cf21 #include <stdio.h>}\par
{\bkmkstart AAAAAAAEUW}{\bkmkend AAAAAAAEUW}
00009 \par
{\bkmkstart AAAAAAAEUX}{\bkmkend AAAAAAAEUX}
00010 {\cf21 #include "buffer.h"}\par
{\bkmkstart AAAAAAAEUY}{\bkmkend AAAAAAAEUY}
00011 \par
{\bkmkstart AAAAAAAEUZ}{\bkmkend AAAAAAAEUZ}
00012 {\cf21 #ifdef _SOFTGPIO}\par
{\bkmkstart AAAAAAAEVA}{\bkmkend AAAAAAAEVA}
00013 {\cf21 #include "softgpio.h"}\par
{\bkmkstart AAAAAAAEVB}{\bkmkend AAAAAAAEVB}
00014 {\cf21 #else}\par
{\bkmkstart AAAAAAAEVC}{\bkmkend AAAAAAAEVC}
00015 {\cf21 #include <wiringPi.h>}\par
{\bkmkstart AAAAAAAEVD}{\bkmkend AAAAAAAEVD}
00016 {\cf21 #endif}\par
{\bkmkstart AAAAAAAEVE}{\bkmkend AAAAAAAEVE}
00017 \par
{\bkmkstart AAAAAAAEVF}{\bkmkend AAAAAAAEVF}
00018 {\cf21 #include "shared.h"}\par
{\bkmkstart AAAAAAAEVG}{\bkmkend AAAAAAAEVG}
00019 \par
{\bkmkstart AAAAAAAEVH}{\bkmkend AAAAAAAEVH}
00020 \par
{\bkmkstart AAAAAAAEVI}{\bkmkend AAAAAAAEVI}
00021 {\cf18 int} flag_sender_ready;\par
{\bkmkstart AAAAAAAEVJ}{\bkmkend AAAAAAAEVJ}
00022 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 sender_buffer;\par
{\bkmkstart AAAAAAAEVK}{\bkmkend AAAAAAAEVK}
00023 {\cf17 static} {\cf18 byte} elem;\par
{\bkmkstart AAAAAAAEVL}{\bkmkend AAAAAAAEVL}
00024 \par
{\bkmkstart AAAAAAAEVM}{\bkmkend AAAAAAAEVM}
00025 \par
{\bkmkstart AAAAAAAEVN}{\bkmkend AAAAAAAEVN}
00026 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAEVO}{\bkmkend AAAAAAAEVO}
00027 {\cf18 void} SD_buffer_put({\cf18 byte} elem)   {\cf20 /*function may block process */}\par
{\bkmkstart AAAAAAAEVP}{\bkmkend AAAAAAAEVP}
00028 \{\par
{\bkmkstart AAAAAAAEVQ}{\bkmkend AAAAAAAEVQ}
00029     {\cf19 if}(!buffer_full(&sender_buffer))\par
{\bkmkstart AAAAAAAEVR}{\bkmkend AAAAAAAEVR}
00030         buffer_put(&sender_buffer, &elem);\par
{\bkmkstart AAAAAAAEVS}{\bkmkend AAAAAAAEVS}
00031     {\cf19 else}\par
{\bkmkstart AAAAAAAEVT}{\bkmkend AAAAAAAEVT}
00032     \{\par
{\bkmkstart AAAAAAAEVU}{\bkmkend AAAAAAAEVU}
00033         printf({\cf22 "Sender::buffer is full, please wait...\\n"});\par
{\bkmkstart AAAAAAAEVV}{\bkmkend AAAAAAAEVV}
00034         {\cf19 for}(;buffer_full(&sender_buffer);)\par
{\bkmkstart AAAAAAAEVW}{\bkmkend AAAAAAAEVW}
00035             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEVX}{\bkmkend AAAAAAAEVX}
00036         buffer_put(&sender_buffer, &elem);\par
{\bkmkstart AAAAAAAEVY}{\bkmkend AAAAAAAEVY}
00037     \}\par
{\bkmkstart AAAAAAAEVZ}{\bkmkend AAAAAAAEVZ}
00038 \}\par
{\bkmkstart AAAAAAAEWA}{\bkmkend AAAAAAAEWA}
00039 {\cf21 #else}\par
{\bkmkstart AAAAAAAEWB}{\bkmkend AAAAAAAEWB}
00040 {\cf18 void} SD_buffer_put({\cf18 byte} elem)\par
{\bkmkstart AAAAAAAEWC}{\bkmkend AAAAAAAEWC}
00041 \{\par
{\bkmkstart AAAAAAAEWD}{\bkmkend AAAAAAAEWD}
00042     {\cf19 for}(;buffer_full(&sender_buffer);)\par
{\bkmkstart AAAAAAAEWE}{\bkmkend AAAAAAAEWE}
00043         delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEWF}{\bkmkend AAAAAAAEWF}
00044     buffer_put(&sender_buffer, &elem);\par
{\bkmkstart AAAAAAAEWG}{\bkmkend AAAAAAAEWG}
00045 \}\par
{\bkmkstart AAAAAAAEWH}{\bkmkend AAAAAAAEWH}
00046 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAEWI}{\bkmkend AAAAAAAEWI}
00047 \par
{\bkmkstart AAAAAAAEWJ}{\bkmkend AAAAAAAEWJ}
00048 {\cf18 void} SD_print_buffer()\par
{\bkmkstart AAAAAAAEWK}{\bkmkend AAAAAAAEWK}
00049 \{\par
{\bkmkstart AAAAAAAEWL}{\bkmkend AAAAAAAEWL}
00050     printf({\cf22 "------------------\\n"});\par
{\bkmkstart AAAAAAAEWM}{\bkmkend AAAAAAAEWM}
00051     buffer_print(&sender_buffer);\par
{\bkmkstart AAAAAAAEWN}{\bkmkend AAAAAAAEWN}
00052     buffer_display(&sender_buffer);\par
{\bkmkstart AAAAAAAEWO}{\bkmkend AAAAAAAEWO}
00053     printf({\cf22 "------------------\\n"});\par
{\bkmkstart AAAAAAAEWP}{\bkmkend AAAAAAAEWP}
00054 \}\par
{\bkmkstart AAAAAAAEWQ}{\bkmkend AAAAAAAEWQ}
00055 \par
{\bkmkstart AAAAAAAEWR}{\bkmkend AAAAAAAEWR}
00056 {\cf18 void} SD_flush_buffer()\par
{\bkmkstart AAAAAAAEWS}{\bkmkend AAAAAAAEWS}
00057 \{\par
{\bkmkstart AAAAAAAEWT}{\bkmkend AAAAAAAEWT}
00058     buffer_flush(&sender_buffer);\par
{\bkmkstart AAAAAAAEWU}{\bkmkend AAAAAAAEWU}
00059 \}\par
{\bkmkstart AAAAAAAEWV}{\bkmkend AAAAAAAEWV}
00060 \par
{\bkmkstart AAAAAAAEWW}{\bkmkend AAAAAAAEWW}
00061 {\cf18 void} sender_init()\par
{\bkmkstart AAAAAAAEWX}{\bkmkend AAAAAAAEWX}
00062 \{\par
{\bkmkstart AAAAAAAEWY}{\bkmkend AAAAAAAEWY}
00063     {\cf20 /*wiringPiSetup();*/}\par
{\bkmkstart AAAAAAAEWZ}{\bkmkend AAAAAAAEWZ}
00064     wiringPiSetupGpio();\par
{\bkmkstart AAAAAAAEXA}{\bkmkend AAAAAAAEXA}
00065     pinMode(TX, OUTPUT);\par
{\bkmkstart AAAAAAAEXB}{\bkmkend AAAAAAAEXB}
00066 \par
{\bkmkstart AAAAAAAEXC}{\bkmkend AAAAAAAEXC}
00067 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAEXD}{\bkmkend AAAAAAAEXD}
00068     printf({\cf22 "Sender::GPIO TX is ready\\n"});\par
{\bkmkstart AAAAAAAEXE}{\bkmkend AAAAAAAEXE}
00069 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAEXF}{\bkmkend AAAAAAAEXF}
00070 \par
{\bkmkstart AAAAAAAEXG}{\bkmkend AAAAAAAEXG}
00071     buffer_init(&sender_buffer, BUFFER_SIZE);\par
{\bkmkstart AAAAAAAEXH}{\bkmkend AAAAAAAEXH}
00072     digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAEXI}{\bkmkend AAAAAAAEXI}
00073     delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEXJ}{\bkmkend AAAAAAAEXJ}
00074     delay(BAUD_RATE); {\cf20 /* sleep for 2 bit */}\par
{\bkmkstart AAAAAAAEXK}{\bkmkend AAAAAAAEXK}
00075     flag_sender_ready = 1;\par
{\bkmkstart AAAAAAAEXL}{\bkmkend AAAAAAAEXL}
00076 \par
{\bkmkstart AAAAAAAEXM}{\bkmkend AAAAAAAEXM}
00077 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAEXN}{\bkmkend AAAAAAAEXN}
00078     printf({\cf22 "Sender::sender is ready\\n"});\par
{\bkmkstart AAAAAAAEXO}{\bkmkend AAAAAAAEXO}
00079 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAEXP}{\bkmkend AAAAAAAEXP}
00080 \par
{\bkmkstart AAAAAAAEXQ}{\bkmkend AAAAAAAEXQ}
00081 \}\par
{\bkmkstart AAAAAAAEXR}{\bkmkend AAAAAAAEXR}
00082 \par
{\bkmkstart AAAAAAAEXS}{\bkmkend AAAAAAAEXS}
00083 {\cf18 void} sender_main()\par
{\bkmkstart AAAAAAAEXT}{\bkmkend AAAAAAAEXT}
00084 \{\par
{\bkmkstart AAAAAAAEXU}{\bkmkend AAAAAAAEXU}
00085 \par
{\bkmkstart AAAAAAAEXV}{\bkmkend AAAAAAAEXV}
00086     sender_init();\par
{\bkmkstart AAAAAAAEXW}{\bkmkend AAAAAAAEXW}
00087 \par
{\bkmkstart AAAAAAAEXX}{\bkmkend AAAAAAAEXX}
00088     {\cf19 for}(;;)\par
{\bkmkstart AAAAAAAEXY}{\bkmkend AAAAAAAEXY}
00089     \{\par
{\bkmkstart AAAAAAAEXZ}{\bkmkend AAAAAAAEXZ}
00090         {\cf19 if}(!buffer_empty(&sender_buffer))\par
{\bkmkstart AAAAAAAEYA}{\bkmkend AAAAAAAEYA}
00091         \{\par
{\bkmkstart AAAAAAAEYB}{\bkmkend AAAAAAAEYB}
00092 \par
{\bkmkstart AAAAAAAEYC}{\bkmkend AAAAAAAEYC}
00093 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAEYD}{\bkmkend AAAAAAAEYD}
00094             printf({\cf22 "Sender::sending...\\n"});\par
{\bkmkstart AAAAAAAEYE}{\bkmkend AAAAAAAEYE}
00095 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAEYF}{\bkmkend AAAAAAAEYF}
00096 \par
{\bkmkstart AAAAAAAEYG}{\bkmkend AAAAAAAEYG}
00097             digitalWrite(TX, LOW);  {\cf20 /* start bit */}\par
{\bkmkstart AAAAAAAEYH}{\bkmkend AAAAAAAEYH}
00098             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEYI}{\bkmkend AAAAAAAEYI}
00099 \par
{\bkmkstart AAAAAAAEYJ}{\bkmkend AAAAAAAEYJ}
00100             buffer_get(&sender_buffer, &elem);\par
{\bkmkstart AAAAAAAEYK}{\bkmkend AAAAAAAEYK}
00101 \par
{\bkmkstart AAAAAAAEYL}{\bkmkend AAAAAAAEYL}
00102 {\cf21 #ifdef _MSB}\par
{\bkmkstart AAAAAAAEYM}{\bkmkend AAAAAAAEYM}
00103             {\cf19 if}((elem >> 7) & 1)\par
{\bkmkstart AAAAAAAEYN}{\bkmkend AAAAAAAEYN}
00104                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAEYO}{\bkmkend AAAAAAAEYO}
00105             {\cf19 else}\par
{\bkmkstart AAAAAAAEYP}{\bkmkend AAAAAAAEYP}
00106                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAEYQ}{\bkmkend AAAAAAAEYQ}
00107             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEYR}{\bkmkend AAAAAAAEYR}
00108 \par
{\bkmkstart AAAAAAAEYS}{\bkmkend AAAAAAAEYS}
00109             {\cf19 if}((elem >> 6) & 1)\par
{\bkmkstart AAAAAAAEYT}{\bkmkend AAAAAAAEYT}
00110                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAEYU}{\bkmkend AAAAAAAEYU}
00111             {\cf19 else}\par
{\bkmkstart AAAAAAAEYV}{\bkmkend AAAAAAAEYV}
00112                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAEYW}{\bkmkend AAAAAAAEYW}
00113             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEYX}{\bkmkend AAAAAAAEYX}
00114 \par
{\bkmkstart AAAAAAAEYY}{\bkmkend AAAAAAAEYY}
00115             {\cf19 if}((elem >> 5) & 1)\par
{\bkmkstart AAAAAAAEYZ}{\bkmkend AAAAAAAEYZ}
00116                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAEZA}{\bkmkend AAAAAAAEZA}
00117             {\cf19 else}\par
{\bkmkstart AAAAAAAEZB}{\bkmkend AAAAAAAEZB}
00118                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAEZC}{\bkmkend AAAAAAAEZC}
00119             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEZD}{\bkmkend AAAAAAAEZD}
00120 \par
{\bkmkstart AAAAAAAEZE}{\bkmkend AAAAAAAEZE}
00121             {\cf19 if}((elem >> 4) & 1)\par
{\bkmkstart AAAAAAAEZF}{\bkmkend AAAAAAAEZF}
00122                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAEZG}{\bkmkend AAAAAAAEZG}
00123             {\cf19 else}\par
{\bkmkstart AAAAAAAEZH}{\bkmkend AAAAAAAEZH}
00124                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAEZI}{\bkmkend AAAAAAAEZI}
00125             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEZJ}{\bkmkend AAAAAAAEZJ}
00126 \par
{\bkmkstart AAAAAAAEZK}{\bkmkend AAAAAAAEZK}
00127             {\cf19 if}((elem >> 3) & 1)\par
{\bkmkstart AAAAAAAEZL}{\bkmkend AAAAAAAEZL}
00128                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAEZM}{\bkmkend AAAAAAAEZM}
00129             {\cf19 else}\par
{\bkmkstart AAAAAAAEZN}{\bkmkend AAAAAAAEZN}
00130                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAEZO}{\bkmkend AAAAAAAEZO}
00131             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEZP}{\bkmkend AAAAAAAEZP}
00132 \par
{\bkmkstart AAAAAAAEZQ}{\bkmkend AAAAAAAEZQ}
00133             {\cf19 if}((elem >> 2) & 1)\par
{\bkmkstart AAAAAAAEZR}{\bkmkend AAAAAAAEZR}
00134                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAEZS}{\bkmkend AAAAAAAEZS}
00135             {\cf19 else}\par
{\bkmkstart AAAAAAAEZT}{\bkmkend AAAAAAAEZT}
00136                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAEZU}{\bkmkend AAAAAAAEZU}
00137             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAEZV}{\bkmkend AAAAAAAEZV}
00138 \par
{\bkmkstart AAAAAAAEZW}{\bkmkend AAAAAAAEZW}
00139             {\cf19 if}((elem >> 1) & 1)\par
{\bkmkstart AAAAAAAEZX}{\bkmkend AAAAAAAEZX}
00140                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAEZY}{\bkmkend AAAAAAAEZY}
00141             {\cf19 else}\par
{\bkmkstart AAAAAAAEZZ}{\bkmkend AAAAAAAEZZ}
00142                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAFAA}{\bkmkend AAAAAAAFAA}
00143             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFAB}{\bkmkend AAAAAAAFAB}
00144 \par
{\bkmkstart AAAAAAAFAC}{\bkmkend AAAAAAAFAC}
00145             {\cf19 if}(elem & 1)\par
{\bkmkstart AAAAAAAFAD}{\bkmkend AAAAAAAFAD}
00146                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAFAE}{\bkmkend AAAAAAAFAE}
00147             {\cf19 else}\par
{\bkmkstart AAAAAAAFAF}{\bkmkend AAAAAAAFAF}
00148                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAFAG}{\bkmkend AAAAAAAFAG}
00149             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFAH}{\bkmkend AAAAAAAFAH}
00150 {\cf21 #else}\par
{\bkmkstart AAAAAAAFAI}{\bkmkend AAAAAAAFAI}
00151             {\cf19 if}(elem & 1)\par
{\bkmkstart AAAAAAAFAJ}{\bkmkend AAAAAAAFAJ}
00152                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAFAK}{\bkmkend AAAAAAAFAK}
00153             {\cf19 else}\par
{\bkmkstart AAAAAAAFAL}{\bkmkend AAAAAAAFAL}
00154                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAFAM}{\bkmkend AAAAAAAFAM}
00155             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFAN}{\bkmkend AAAAAAAFAN}
00156 \par
{\bkmkstart AAAAAAAFAO}{\bkmkend AAAAAAAFAO}
00157             {\cf19 if}((elem >> 1) & 1)\par
{\bkmkstart AAAAAAAFAP}{\bkmkend AAAAAAAFAP}
00158                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAFAQ}{\bkmkend AAAAAAAFAQ}
00159             {\cf19 else}\par
{\bkmkstart AAAAAAAFAR}{\bkmkend AAAAAAAFAR}
00160                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAFAS}{\bkmkend AAAAAAAFAS}
00161             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFAT}{\bkmkend AAAAAAAFAT}
00162 \par
{\bkmkstart AAAAAAAFAU}{\bkmkend AAAAAAAFAU}
00163             {\cf19 if}((elem >> 2) & 1)\par
{\bkmkstart AAAAAAAFAV}{\bkmkend AAAAAAAFAV}
00164                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAFAW}{\bkmkend AAAAAAAFAW}
00165             {\cf19 else}\par
{\bkmkstart AAAAAAAFAX}{\bkmkend AAAAAAAFAX}
00166                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAFAY}{\bkmkend AAAAAAAFAY}
00167             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFAZ}{\bkmkend AAAAAAAFAZ}
00168 \par
{\bkmkstart AAAAAAAFBA}{\bkmkend AAAAAAAFBA}
00169             {\cf19 if}((elem >> 3) & 1)\par
{\bkmkstart AAAAAAAFBB}{\bkmkend AAAAAAAFBB}
00170                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAFBC}{\bkmkend AAAAAAAFBC}
00171             {\cf19 else}\par
{\bkmkstart AAAAAAAFBD}{\bkmkend AAAAAAAFBD}
00172                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAFBE}{\bkmkend AAAAAAAFBE}
00173             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFBF}{\bkmkend AAAAAAAFBF}
00174 \par
{\bkmkstart AAAAAAAFBG}{\bkmkend AAAAAAAFBG}
00175             {\cf19 if}((elem >> 4) & 1)\par
{\bkmkstart AAAAAAAFBH}{\bkmkend AAAAAAAFBH}
00176                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAFBI}{\bkmkend AAAAAAAFBI}
00177             {\cf19 else}\par
{\bkmkstart AAAAAAAFBJ}{\bkmkend AAAAAAAFBJ}
00178                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAFBK}{\bkmkend AAAAAAAFBK}
00179             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFBL}{\bkmkend AAAAAAAFBL}
00180 \par
{\bkmkstart AAAAAAAFBM}{\bkmkend AAAAAAAFBM}
00181             {\cf19 if}((elem >> 5) & 1)\par
{\bkmkstart AAAAAAAFBN}{\bkmkend AAAAAAAFBN}
00182                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAFBO}{\bkmkend AAAAAAAFBO}
00183             {\cf19 else}\par
{\bkmkstart AAAAAAAFBP}{\bkmkend AAAAAAAFBP}
00184                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAFBQ}{\bkmkend AAAAAAAFBQ}
00185             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFBR}{\bkmkend AAAAAAAFBR}
00186 \par
{\bkmkstart AAAAAAAFBS}{\bkmkend AAAAAAAFBS}
00187             {\cf19 if}((elem >> 6) & 1)\par
{\bkmkstart AAAAAAAFBT}{\bkmkend AAAAAAAFBT}
00188                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAFBU}{\bkmkend AAAAAAAFBU}
00189             {\cf19 else}\par
{\bkmkstart AAAAAAAFBV}{\bkmkend AAAAAAAFBV}
00190                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAFBW}{\bkmkend AAAAAAAFBW}
00191             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFBX}{\bkmkend AAAAAAAFBX}
00192 \par
{\bkmkstart AAAAAAAFBY}{\bkmkend AAAAAAAFBY}
00193             {\cf19 if}((elem >> 7) & 1)\par
{\bkmkstart AAAAAAAFBZ}{\bkmkend AAAAAAAFBZ}
00194                 digitalWrite(TX, HIGH);\par
{\bkmkstart AAAAAAAFCA}{\bkmkend AAAAAAAFCA}
00195             {\cf19 else}\par
{\bkmkstart AAAAAAAFCB}{\bkmkend AAAAAAAFCB}
00196                 digitalWrite(TX, LOW);\par
{\bkmkstart AAAAAAAFCC}{\bkmkend AAAAAAAFCC}
00197             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFCD}{\bkmkend AAAAAAAFCD}
00198 {\cf21 #endif  }{\cf20 /* _MSB */}{\cf21 }\par
{\bkmkstart AAAAAAAFCE}{\bkmkend AAAAAAAFCE}
00199 \par
{\bkmkstart AAAAAAAFCF}{\bkmkend AAAAAAAFCF}
00200             digitalWrite(TX, HIGH); {\cf20 /*stop bit*/}\par
{\bkmkstart AAAAAAAFCG}{\bkmkend AAAAAAAFCG}
00201             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFCH}{\bkmkend AAAAAAAFCH}
00202 \par
{\bkmkstart AAAAAAAFCI}{\bkmkend AAAAAAAFCI}
00203             delay(BAUD_RATE);   {\cf20 /* optional */}\par
{\bkmkstart AAAAAAAFCJ}{\bkmkend AAAAAAAFCJ}
00204 \par
{\bkmkstart AAAAAAAFCK}{\bkmkend AAAAAAAFCK}
00205 {\cf21 #ifdef _SLOW}\par
{\bkmkstart AAAAAAAFCL}{\bkmkend AAAAAAAFCL}
00206             delay(BAUD_RATE * 11);\par
{\bkmkstart AAAAAAAFCM}{\bkmkend AAAAAAAFCM}
00207 {\cf21 #endif }{\cf20 /*// _SLOW*/}{\cf21 }\par
{\bkmkstart AAAAAAAFCN}{\bkmkend AAAAAAAFCN}
00208 \par
{\bkmkstart AAAAAAAFCO}{\bkmkend AAAAAAAFCO}
00209 {\cf21 #ifdef _SLOWX2}\par
{\bkmkstart AAAAAAAFCP}{\bkmkend AAAAAAAFCP}
00210             delay(BAUD_RATE * 22);\par
{\bkmkstart AAAAAAAFCQ}{\bkmkend AAAAAAAFCQ}
00211 {\cf21 #endif }{\cf20 /*// _SLOWX2*/}{\cf21 }\par
{\bkmkstart AAAAAAAFCR}{\bkmkend AAAAAAAFCR}
00212 \par
{\bkmkstart AAAAAAAFCS}{\bkmkend AAAAAAAFCS}
00213         \}\par
{\bkmkstart AAAAAAAFCT}{\bkmkend AAAAAAAFCT}
00214 \par
{\bkmkstart AAAAAAAFCU}{\bkmkend AAAAAAAFCU}
00215         delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFCV}{\bkmkend AAAAAAAFCV}
00216     \}\par
{\bkmkstart AAAAAAAFCW}{\bkmkend AAAAAAAFCW}
00217 \par
{\bkmkstart AAAAAAAFCX}{\bkmkend AAAAAAAFCX}
00218 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
server.c\par \pard\plain 
{\bkmkstart AAAAAAAFCY}
{\bkmkend AAAAAAAFCY}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFCZ}{\bkmkend AAAAAAAFCZ}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAFDA}{\bkmkend AAAAAAAFDA}
00002 {\cf20 }\par
{\bkmkstart AAAAAAAFDB}{\bkmkend AAAAAAAFDB}
00003 {\cf20 ===== server.c ========================================================}\par
{\bkmkstart AAAAAAAFDC}{\bkmkend AAAAAAAFDC}
00004 {\cf20 }\par
{\bkmkstart AAAAAAAFDD}{\bkmkend AAAAAAAFDD}
00005 {\cf20 */}\par
{\bkmkstart AAAAAAAFDE}{\bkmkend AAAAAAAFDE}
00006 \par
{\bkmkstart AAAAAAAFDF}{\bkmkend AAAAAAAFDF}
00007 \par
{\bkmkstart AAAAAAAFDG}{\bkmkend AAAAAAAFDG}
00008 {\cf21 #include <stdio.h>}\par
{\bkmkstart AAAAAAAFDH}{\bkmkend AAAAAAAFDH}
00009 {\cf21 #include <stdlib.h>}\par
{\bkmkstart AAAAAAAFDI}{\bkmkend AAAAAAAFDI}
00010 {\cf21 #include <string.h>}\par
{\bkmkstart AAAAAAAFDJ}{\bkmkend AAAAAAAFDJ}
00011 \par
{\bkmkstart AAAAAAAFDK}{\bkmkend AAAAAAAFDK}
00012 {\cf21 #ifdef _SOFTGPIO}\par
{\bkmkstart AAAAAAAFDL}{\bkmkend AAAAAAAFDL}
00013 {\cf21 #include "softgpio.h"}\par
{\bkmkstart AAAAAAAFDM}{\bkmkend AAAAAAAFDM}
00014 {\cf21 #else}\par
{\bkmkstart AAAAAAAFDN}{\bkmkend AAAAAAAFDN}
00015 {\cf21 #include <wiringPi.h>}\par
{\bkmkstart AAAAAAAFDO}{\bkmkend AAAAAAAFDO}
00016 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFDP}{\bkmkend AAAAAAAFDP}
00017 \par
{\bkmkstart AAAAAAAFDQ}{\bkmkend AAAAAAAFDQ}
00018 {\cf21 #include "shared.h"}\par
{\bkmkstart AAAAAAAFDR}{\bkmkend AAAAAAAFDR}
00019 {\cf21 #include "client.h"}\par
{\bkmkstart AAAAAAAFDS}{\bkmkend AAAAAAAFDS}
00020 \par
{\bkmkstart AAAAAAAFDT}{\bkmkend AAAAAAAFDT}
00021 {\cf21 #include "server.h"}\par
{\bkmkstart AAAAAAAFDU}{\bkmkend AAAAAAAFDU}
00022 \par
{\bkmkstart AAAAAAAFDV}{\bkmkend AAAAAAAFDV}
00023 \par
{\bkmkstart AAAAAAAFDW}{\bkmkend AAAAAAAFDW}
00024 {\cf18 int} flag_server_ready;\par
{\bkmkstart AAAAAAAFDX}{\bkmkend AAAAAAAFDX}
00025 {\cf18 int} flag_server_isdumping;\par
{\bkmkstart AAAAAAAFDY}{\bkmkend AAAAAAAFDY}
00026 {\cf17 static} {\cf18 int} server_resend_count;\par
{\bkmkstart AAAAAAAFDZ}{\bkmkend AAAAAAAFDZ}
00027 \par
{\bkmkstart AAAAAAAFEA}{\bkmkend AAAAAAAFEA}
00028 {\cf17 static} {\cf18 char} server_msg_buffer[MAX_MSG_LENGTH + 1];\par
{\bkmkstart AAAAAAAFEB}{\bkmkend AAAAAAAFEB}
00029 \par
{\bkmkstart AAAAAAAFEC}{\bkmkend AAAAAAAFEC}
00030 \par
{\bkmkstart AAAAAAAFED}{\bkmkend AAAAAAAFED}
00031 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAFEE}{\bkmkend AAAAAAAFEE}
00032 {\cf18 void} SV_insert_msg ( {\cf18 unsigned} {\cf18 char} *msg )   {\cf20 /*function may block process */}\par
{\bkmkstart AAAAAAAFEF}{\bkmkend AAAAAAAFEF}
00033 \{\par
{\bkmkstart AAAAAAAFEG}{\bkmkend AAAAAAAFEG}
00034     {\cf19 if}(strlen(msg) > MAX_MSG_LENGTH)\par
{\bkmkstart AAAAAAAFEH}{\bkmkend AAAAAAAFEH}
00035     \{\par
{\bkmkstart AAAAAAAFEI}{\bkmkend AAAAAAAFEI}
00036         printf({\cf22 "Server::max message length exceeded, aborted!\\n"});\par
{\bkmkstart AAAAAAAFEJ}{\bkmkend AAAAAAAFEJ}
00037         {\cf19 return};\par
{\bkmkstart AAAAAAAFEK}{\bkmkend AAAAAAAFEK}
00038     \}\par
{\bkmkstart AAAAAAAFEL}{\bkmkend AAAAAAAFEL}
00039     {\cf19 if}(flag_server_ready)\par
{\bkmkstart AAAAAAAFEM}{\bkmkend AAAAAAAFEM}
00040         strcpy(server_msg_buffer, msg);\par
{\bkmkstart AAAAAAAFEN}{\bkmkend AAAAAAAFEN}
00041     {\cf19 else}\par
{\bkmkstart AAAAAAAFEO}{\bkmkend AAAAAAAFEO}
00042     \{\par
{\bkmkstart AAAAAAAFEP}{\bkmkend AAAAAAAFEP}
00043         printf({\cf22 "Server::server is busy, please wait...\\n"});\par
{\bkmkstart AAAAAAAFEQ}{\bkmkend AAAAAAAFEQ}
00044         {\cf19 for}(; !flag_server_ready;)\par
{\bkmkstart AAAAAAAFER}{\bkmkend AAAAAAAFER}
00045             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFES}{\bkmkend AAAAAAAFES}
00046         strcpy(server_msg_buffer, msg);\par
{\bkmkstart AAAAAAAFET}{\bkmkend AAAAAAAFET}
00047     \}\par
{\bkmkstart AAAAAAAFEU}{\bkmkend AAAAAAAFEU}
00048 \}\par
{\bkmkstart AAAAAAAFEV}{\bkmkend AAAAAAAFEV}
00049 {\cf21 #else}\par
{\bkmkstart AAAAAAAFEW}{\bkmkend AAAAAAAFEW}
00050 {\cf18 void} SV_insert_msg ( {\cf18 unsigned} {\cf18 char} *msg )\par
{\bkmkstart AAAAAAAFEX}{\bkmkend AAAAAAAFEX}
00051 \{\par
{\bkmkstart AAAAAAAFEY}{\bkmkend AAAAAAAFEY}
00052     {\cf19 if}(strlen(msg) > MAX_MSG_LENGTH)\par
{\bkmkstart AAAAAAAFEZ}{\bkmkend AAAAAAAFEZ}
00053         {\cf19 return};\par
{\bkmkstart AAAAAAAFFA}{\bkmkend AAAAAAAFFA}
00054     {\cf19 for}(; !flag_server_ready;)\par
{\bkmkstart AAAAAAAFFB}{\bkmkend AAAAAAAFFB}
00055         delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFFC}{\bkmkend AAAAAAAFFC}
00056     strcpy(server_msg_buffer, msg);\par
{\bkmkstart AAAAAAAFFD}{\bkmkend AAAAAAAFFD}
00057 \}\par
{\bkmkstart AAAAAAAFFE}{\bkmkend AAAAAAAFFE}
00058 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAFFF}{\bkmkend AAAAAAAFFF}
00059 \par
{\bkmkstart AAAAAAAFFG}{\bkmkend AAAAAAAFFG}
00060 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAFFH}{\bkmkend AAAAAAAFFH}
00061 {\cf18 int} SV_insert_msg_nb ( {\cf18 unsigned} {\cf18 char} *msg )\par
{\bkmkstart AAAAAAAFFI}{\bkmkend AAAAAAAFFI}
00062 \{\par
{\bkmkstart AAAAAAAFFJ}{\bkmkend AAAAAAAFFJ}
00063     {\cf19 if}(strlen(msg) > MAX_MSG_LENGTH)\par
{\bkmkstart AAAAAAAFFK}{\bkmkend AAAAAAAFFK}
00064     \{\par
{\bkmkstart AAAAAAAFFL}{\bkmkend AAAAAAAFFL}
00065         printf({\cf22 "Server::max message length exceeded, aborted!\\n"});\par
{\bkmkstart AAAAAAAFFM}{\bkmkend AAAAAAAFFM}
00066         {\cf19 return} -2;\par
{\bkmkstart AAAAAAAFFN}{\bkmkend AAAAAAAFFN}
00067     \}\par
{\bkmkstart AAAAAAAFFO}{\bkmkend AAAAAAAFFO}
00068     {\cf19 if}(flag_server_ready)\par
{\bkmkstart AAAAAAAFFP}{\bkmkend AAAAAAAFFP}
00069     \{\par
{\bkmkstart AAAAAAAFFQ}{\bkmkend AAAAAAAFFQ}
00070         strcpy(server_msg_buffer, msg);\par
{\bkmkstart AAAAAAAFFR}{\bkmkend AAAAAAAFFR}
00071         {\cf19 return} 0;\par
{\bkmkstart AAAAAAAFFS}{\bkmkend AAAAAAAFFS}
00072     \}\par
{\bkmkstart AAAAAAAFFT}{\bkmkend AAAAAAAFFT}
00073     {\cf19 else}\par
{\bkmkstart AAAAAAAFFU}{\bkmkend AAAAAAAFFU}
00074     \{\par
{\bkmkstart AAAAAAAFFV}{\bkmkend AAAAAAAFFV}
00075         printf({\cf22 "Server::server is busy, please wait...\\n"});\par
{\bkmkstart AAAAAAAFFW}{\bkmkend AAAAAAAFFW}
00076         {\cf19 return} -1;\par
{\bkmkstart AAAAAAAFFX}{\bkmkend AAAAAAAFFX}
00077     \}\par
{\bkmkstart AAAAAAAFFY}{\bkmkend AAAAAAAFFY}
00078 \}\par
{\bkmkstart AAAAAAAFFZ}{\bkmkend AAAAAAAFFZ}
00079 {\cf21 #else}\par
{\bkmkstart AAAAAAAFGA}{\bkmkend AAAAAAAFGA}
00080 {\cf18 int} SV_insert_msg_nb ( {\cf18 unsigned} {\cf18 char} *msg )\par
{\bkmkstart AAAAAAAFGB}{\bkmkend AAAAAAAFGB}
00081 \{\par
{\bkmkstart AAAAAAAFGC}{\bkmkend AAAAAAAFGC}
00082     {\cf19 if}(strlen(msg) > MAX_MSG_LENGTH)\par
{\bkmkstart AAAAAAAFGD}{\bkmkend AAAAAAAFGD}
00083         {\cf19 return} -2;\par
{\bkmkstart AAAAAAAFGE}{\bkmkend AAAAAAAFGE}
00084     {\cf19 if}(flag_server_ready)\par
{\bkmkstart AAAAAAAFGF}{\bkmkend AAAAAAAFGF}
00085     \{\par
{\bkmkstart AAAAAAAFGG}{\bkmkend AAAAAAAFGG}
00086         strcpy(server_msg_buffer, msg);\par
{\bkmkstart AAAAAAAFGH}{\bkmkend AAAAAAAFGH}
00087         {\cf19 return} 0;\par
{\bkmkstart AAAAAAAFGI}{\bkmkend AAAAAAAFGI}
00088     \}\par
{\bkmkstart AAAAAAAFGJ}{\bkmkend AAAAAAAFGJ}
00089     {\cf19 else}\par
{\bkmkstart AAAAAAAFGK}{\bkmkend AAAAAAAFGK}
00090         {\cf19 return} -1;\par
{\bkmkstart AAAAAAAFGL}{\bkmkend AAAAAAAFGL}
00091 \}\par
{\bkmkstart AAAAAAAFGM}{\bkmkend AAAAAAAFGM}
00092 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAFGN}{\bkmkend AAAAAAAFGN}
00093 \par
{\bkmkstart AAAAAAAFGO}{\bkmkend AAAAAAAFGO}
00094 {\cf18 void} server_main ( {\cf18 void} )\par
{\bkmkstart AAAAAAAFGP}{\bkmkend AAAAAAAFGP}
00095 \{\par
{\bkmkstart AAAAAAAFGQ}{\bkmkend AAAAAAAFGQ}
00096 \par
{\bkmkstart AAAAAAAFGR}{\bkmkend AAAAAAAFGR}
00097     {\cf18 byte} server_pak[BUFFER_SIZE + 1];\par
{\bkmkstart AAAAAAAFGS}{\bkmkend AAAAAAAFGS}
00098 \par
{\bkmkstart AAAAAAAFGT}{\bkmkend AAAAAAAFGT}
00099     {\cf18 byte} *pak_data_length = &server_pak[1];\par
{\bkmkstart AAAAAAAFGU}{\bkmkend AAAAAAAFGU}
00100     {\cf18 byte} *pak_data = &server_pak[2];\par
{\bkmkstart AAAAAAAFGV}{\bkmkend AAAAAAAFGV}
00101     {\cf18 unsigned} {\cf18 short} *pak_crc;\par
{\bkmkstart AAAAAAAFGW}{\bkmkend AAAAAAAFGW}
00102     {\cf18 byte} *pak_crc_byte;\par
{\bkmkstart AAAAAAAFGX}{\bkmkend AAAAAAAFGX}
00103     {\cf18 byte} *pak_end;\par
{\bkmkstart AAAAAAAFGY}{\bkmkend AAAAAAAFGY}
00104 \par
{\bkmkstart AAAAAAAFGZ}{\bkmkend AAAAAAAFGZ}
00105     {\cf18 int} i;\par
{\bkmkstart AAAAAAAFHA}{\bkmkend AAAAAAAFHA}
00106     {\cf18 unsigned} {\cf18 short} crcvalue;\par
{\bkmkstart AAAAAAAFHB}{\bkmkend AAAAAAAFHB}
00107 \par
{\bkmkstart AAAAAAAFHC}{\bkmkend AAAAAAAFHC}
00108     server_pak[0] = 0;  {\cf20 /* start bit */}\par
{\bkmkstart AAAAAAAFHD}{\bkmkend AAAAAAAFHD}
00109 \par
{\bkmkstart AAAAAAAFHE}{\bkmkend AAAAAAAFHE}
00110 \par
{\bkmkstart AAAAAAAFHF}{\bkmkend AAAAAAAFHF}
00111     {\cf19 for}(; !flag_sender_ready || !flag_receiver_ready;)\par
{\bkmkstart AAAAAAAFHG}{\bkmkend AAAAAAAFHG}
00112         delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFHH}{\bkmkend AAAAAAAFHH}
00113     SD_flush_buffer();\par
{\bkmkstart AAAAAAAFHI}{\bkmkend AAAAAAAFHI}
00114     flag_server_ready = 1;\par
{\bkmkstart AAAAAAAFHJ}{\bkmkend AAAAAAAFHJ}
00115 \par
{\bkmkstart AAAAAAAFHK}{\bkmkend AAAAAAAFHK}
00116 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAFHL}{\bkmkend AAAAAAAFHL}
00117             printf({\cf22 "Server::server is ready\\n"});\par
{\bkmkstart AAAAAAAFHM}{\bkmkend AAAAAAAFHM}
00118 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAFHN}{\bkmkend AAAAAAAFHN}
00119 \par
{\bkmkstart AAAAAAAFHO}{\bkmkend AAAAAAAFHO}
00120     {\cf19 for}(;;)\par
{\bkmkstart AAAAAAAFHP}{\bkmkend AAAAAAAFHP}
00121     \{\par
{\bkmkstart AAAAAAAFHQ}{\bkmkend AAAAAAAFHQ}
00122         {\cf19 if}(server_msg_buffer[0]!={\cf23 '\\0'})\par
{\bkmkstart AAAAAAAFHR}{\bkmkend AAAAAAAFHR}
00123         \{\par
{\bkmkstart AAAAAAAFHS}{\bkmkend AAAAAAAFHS}
00124             flag_server_ready = 0;\par
{\bkmkstart AAAAAAAFHT}{\bkmkend AAAAAAAFHT}
00125 \par
{\bkmkstart AAAAAAAFHU}{\bkmkend AAAAAAAFHU}
00126             {\cf19 for}(i=0; server_msg_buffer[i]!={\cf23 '\\0'} && i<MAX_MSG_LENGTH + 1; i++)\par
{\bkmkstart AAAAAAAFHV}{\bkmkend AAAAAAAFHV}
00127                 pak_data[i] = server_msg_buffer[i];\par
{\bkmkstart AAAAAAAFHW}{\bkmkend AAAAAAAFHW}
00128 \par
{\bkmkstart AAAAAAAFHX}{\bkmkend AAAAAAAFHX}
00129             server_msg_buffer[0]={\cf23 '\\0'};\par
{\bkmkstart AAAAAAAFHY}{\bkmkend AAAAAAAFHY}
00130             *pak_data_length = i;\par
{\bkmkstart AAAAAAAFHZ}{\bkmkend AAAAAAAFHZ}
00131             pak_crc = ({\cf18 unsigned} {\cf18 short} *) &pak_data[i];\par
{\bkmkstart AAAAAAAFIA}{\bkmkend AAAAAAAFIA}
00132             pak_crc_byte = &pak_data[i];\par
{\bkmkstart AAAAAAAFIB}{\bkmkend AAAAAAAFIB}
00133             pak_end = &pak_data[i+2];\par
{\bkmkstart AAAAAAAFIC}{\bkmkend AAAAAAAFIC}
00134             pak_end[0] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAFID}{\bkmkend AAAAAAAFID}
00135 \par
{\bkmkstart AAAAAAAFIE}{\bkmkend AAAAAAAFIE}
00136             CRC_Init(&crcvalue);\par
{\bkmkstart AAAAAAAFIF}{\bkmkend AAAAAAAFIF}
00137             {\cf19 for}(i=0; i<*pak_data_length; i++) {\cf20 /* crc16 CCITT_FALSE */}\par
{\bkmkstart AAAAAAAFIG}{\bkmkend AAAAAAAFIG}
00138                 CRC_ProcessByte(&crcvalue, pak_data[i]);\par
{\bkmkstart AAAAAAAFIH}{\bkmkend AAAAAAAFIH}
00139             *pak_crc = CRC_Value(crcvalue);\par
{\bkmkstart AAAAAAAFII}{\bkmkend AAAAAAAFII}
00140 \par
{\bkmkstart AAAAAAAFIJ}{\bkmkend AAAAAAAFIJ}
00141 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAFIK}{\bkmkend AAAAAAAFIK}
00142             printf({\cf22 "Server::ready to send packet:"});\par
{\bkmkstart AAAAAAAFIL}{\bkmkend AAAAAAAFIL}
00143             {\cf19 for}(i=0; i<*pak_data_length + 4; i++)\par
{\bkmkstart AAAAAAAFIM}{\bkmkend AAAAAAAFIM}
00144             \{\par
{\bkmkstart AAAAAAAFIN}{\bkmkend AAAAAAAFIN}
00145                 printf({\cf22 "%d "}, server_pak[i]);\par
{\bkmkstart AAAAAAAFIO}{\bkmkend AAAAAAAFIO}
00146             \}\par
{\bkmkstart AAAAAAAFIP}{\bkmkend AAAAAAAFIP}
00147             printf({\cf22 "\\n"});\par
{\bkmkstart AAAAAAAFIQ}{\bkmkend AAAAAAAFIQ}
00148 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAFIR}{\bkmkend AAAAAAAFIR}
00149 \par
{\bkmkstart AAAAAAAFIS}{\bkmkend AAAAAAAFIS}
00150             {\cf19 for}(; flag_client_isdumping;)\par
{\bkmkstart AAAAAAAFIT}{\bkmkend AAAAAAAFIT}
00151                 delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFIU}{\bkmkend AAAAAAAFIU}
00152 \par
{\bkmkstart AAAAAAAFIV}{\bkmkend AAAAAAAFIV}
00153             flag_server_isdumping = 1;\par
{\bkmkstart AAAAAAAFIW}{\bkmkend AAAAAAAFIW}
00154             {\cf19 for}(i=0; i<*pak_data_length + 4; i++)\par
{\bkmkstart AAAAAAAFIX}{\bkmkend AAAAAAAFIX}
00155                 SD_buffer_put(server_pak[i]);\par
{\bkmkstart AAAAAAAFIY}{\bkmkend AAAAAAAFIY}
00156             flag_server_isdumping = 0;\par
{\bkmkstart AAAAAAAFIZ}{\bkmkend AAAAAAAFIZ}
00157 \par
{\bkmkstart AAAAAAAFJA}{\bkmkend AAAAAAAFJA}
00158 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAFJB}{\bkmkend AAAAAAAFJB}
00159             printf({\cf22 "Server::sending packet...\\n"});\par
{\bkmkstart AAAAAAAFJC}{\bkmkend AAAAAAAFJC}
00160 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAFJD}{\bkmkend AAAAAAAFJD}
00161 \par
{\bkmkstart AAAAAAAFJE}{\bkmkend AAAAAAAFJE}
00162             {\cf19 for}(; !flag_server_ready;)\par
{\bkmkstart AAAAAAAFJF}{\bkmkend AAAAAAAFJF}
00163             \{\par
{\bkmkstart AAAAAAAFJG}{\bkmkend AAAAAAAFJG}
00164                 {\cf19 for}(i=0; i<MAX_WAIT_TIMES; i++,delay(BAUD_RATE))  {\cf20 /* fix me */}\par
{\bkmkstart AAAAAAAFJH}{\bkmkend AAAAAAAFJH}
00165                     {\cf19 if}(flag_client_get_ack)\par
{\bkmkstart AAAAAAAFJI}{\bkmkend AAAAAAAFJI}
00166                     \{\par
{\bkmkstart AAAAAAAFJJ}{\bkmkend AAAAAAAFJJ}
00167                         {\cf19 if}((client_crc16[0] == pak_crc_byte[0] && client_crc16[1] == pak_crc_byte[1]) || (client_crc16[0] == pak_crc_byte[1] && client_crc16[1] == pak_crc_byte[0]))\par
{\bkmkstart AAAAAAAFJK}{\bkmkend AAAAAAAFJK}
00168                         \{\par
{\bkmkstart AAAAAAAFJL}{\bkmkend AAAAAAAFJL}
00169                             printf({\cf22 "Server::ACK packet received\\nServer::message sent successfully\\n"});\par
{\bkmkstart AAAAAAAFJM}{\bkmkend AAAAAAAFJM}
00170                             server_resend_count = 0;\par
{\bkmkstart AAAAAAAFJN}{\bkmkend AAAAAAAFJN}
00171                             flag_server_ready = 1;\par
{\bkmkstart AAAAAAAFJO}{\bkmkend AAAAAAAFJO}
00172                             {\cf19 break};\par
{\bkmkstart AAAAAAAFJP}{\bkmkend AAAAAAAFJP}
00173                         \}\par
{\bkmkstart AAAAAAAFJQ}{\bkmkend AAAAAAAFJQ}
00174                         {\cf19 else}\par
{\bkmkstart AAAAAAAFJR}{\bkmkend AAAAAAAFJR}
00175                         \{\par
{\bkmkstart AAAAAAAFJS}{\bkmkend AAAAAAAFJS}
00176                             printf({\cf22 "Server::ACK packet CRC16 failed, resending...\\n"});\par
{\bkmkstart AAAAAAAFJT}{\bkmkend AAAAAAAFJT}
00177                             {\cf19 if}(server_resend_count == 2)\par
{\bkmkstart AAAAAAAFJU}{\bkmkend AAAAAAAFJU}
00178                             \{\par
{\bkmkstart AAAAAAAFJV}{\bkmkend AAAAAAAFJV}
00179                                 printf({\cf22 "Server::second resend failed, aborted!\\n"});\par
{\bkmkstart AAAAAAAFJW}{\bkmkend AAAAAAAFJW}
00180                                 flag_server_ready = 1;\par
{\bkmkstart AAAAAAAFJX}{\bkmkend AAAAAAAFJX}
00181                                 server_resend_count = 0;\par
{\bkmkstart AAAAAAAFJY}{\bkmkend AAAAAAAFJY}
00182                                 {\cf19 break};\par
{\bkmkstart AAAAAAAFJZ}{\bkmkend AAAAAAAFJZ}
00183                             \}\par
{\bkmkstart AAAAAAAFKA}{\bkmkend AAAAAAAFKA}
00184                             server_resend_count++;\par
{\bkmkstart AAAAAAAFKB}{\bkmkend AAAAAAAFKB}
00185                             {\cf19 for}(; flag_client_isdumping;)\par
{\bkmkstart AAAAAAAFKC}{\bkmkend AAAAAAAFKC}
00186                                 delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFKD}{\bkmkend AAAAAAAFKD}
00187 \par
{\bkmkstart AAAAAAAFKE}{\bkmkend AAAAAAAFKE}
00188                             flag_server_isdumping = 1;\par
{\bkmkstart AAAAAAAFKF}{\bkmkend AAAAAAAFKF}
00189                             {\cf19 for}(i=0; i<*pak_data_length + 4; i++)\par
{\bkmkstart AAAAAAAFKG}{\bkmkend AAAAAAAFKG}
00190                                 SD_buffer_put(server_pak[i]);\par
{\bkmkstart AAAAAAAFKH}{\bkmkend AAAAAAAFKH}
00191                             flag_server_isdumping = 0;\par
{\bkmkstart AAAAAAAFKI}{\bkmkend AAAAAAAFKI}
00192 \par
{\bkmkstart AAAAAAAFKJ}{\bkmkend AAAAAAAFKJ}
00193                             {\cf19 break};\par
{\bkmkstart AAAAAAAFKK}{\bkmkend AAAAAAAFKK}
00194                         \}\par
{\bkmkstart AAAAAAAFKL}{\bkmkend AAAAAAAFKL}
00195                     \}\par
{\bkmkstart AAAAAAAFKM}{\bkmkend AAAAAAAFKM}
00196 \par
{\bkmkstart AAAAAAAFKN}{\bkmkend AAAAAAAFKN}
00197                 {\cf19 if}(!flag_client_get_ack)\par
{\bkmkstart AAAAAAAFKO}{\bkmkend AAAAAAAFKO}
00198                 \{\par
{\bkmkstart AAAAAAAFKP}{\bkmkend AAAAAAAFKP}
00199                         printf({\cf22 "Server::ACK timeout, resending...\\n"});\par
{\bkmkstart AAAAAAAFKQ}{\bkmkend AAAAAAAFKQ}
00200                         {\cf19 if}(server_resend_count == 2)\par
{\bkmkstart AAAAAAAFKR}{\bkmkend AAAAAAAFKR}
00201                         \{\par
{\bkmkstart AAAAAAAFKS}{\bkmkend AAAAAAAFKS}
00202                             printf({\cf22 "Server::second resend failed, aborted!\\n"});\par
{\bkmkstart AAAAAAAFKT}{\bkmkend AAAAAAAFKT}
00203                             flag_server_ready = 1;\par
{\bkmkstart AAAAAAAFKU}{\bkmkend AAAAAAAFKU}
00204                             server_resend_count = 0;\par
{\bkmkstart AAAAAAAFKV}{\bkmkend AAAAAAAFKV}
00205                             {\cf19 break};\par
{\bkmkstart AAAAAAAFKW}{\bkmkend AAAAAAAFKW}
00206                         \}\par
{\bkmkstart AAAAAAAFKX}{\bkmkend AAAAAAAFKX}
00207                         server_resend_count++;\par
{\bkmkstart AAAAAAAFKY}{\bkmkend AAAAAAAFKY}
00208                         {\cf19 for}(; flag_client_isdumping;)\par
{\bkmkstart AAAAAAAFKZ}{\bkmkend AAAAAAAFKZ}
00209                             delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFLA}{\bkmkend AAAAAAAFLA}
00210 \par
{\bkmkstart AAAAAAAFLB}{\bkmkend AAAAAAAFLB}
00211                         flag_server_isdumping = 1;\par
{\bkmkstart AAAAAAAFLC}{\bkmkend AAAAAAAFLC}
00212                         {\cf19 for}(i=0; i<*pak_data_length + 4; i++)\par
{\bkmkstart AAAAAAAFLD}{\bkmkend AAAAAAAFLD}
00213                             SD_buffer_put(server_pak[i]);\par
{\bkmkstart AAAAAAAFLE}{\bkmkend AAAAAAAFLE}
00214                         flag_server_isdumping = 0;\par
{\bkmkstart AAAAAAAFLF}{\bkmkend AAAAAAAFLF}
00215                 \}\par
{\bkmkstart AAAAAAAFLG}{\bkmkend AAAAAAAFLG}
00216 \par
{\bkmkstart AAAAAAAFLH}{\bkmkend AAAAAAAFLH}
00217                 flag_client_get_ack = 0;\par
{\bkmkstart AAAAAAAFLI}{\bkmkend AAAAAAAFLI}
00218             \}\par
{\bkmkstart AAAAAAAFLJ}{\bkmkend AAAAAAAFLJ}
00219 \par
{\bkmkstart AAAAAAAFLK}{\bkmkend AAAAAAAFLK}
00220 {\cf21 #ifdef _DEBUG}\par
{\bkmkstart AAAAAAAFLL}{\bkmkend AAAAAAAFLL}
00221             printf({\cf22 "Server::server is ready\\n"});\par
{\bkmkstart AAAAAAAFLM}{\bkmkend AAAAAAAFLM}
00222 {\cf21 #endif }{\cf20 /*// _DEBUG*/}{\cf21 }\par
{\bkmkstart AAAAAAAFLN}{\bkmkend AAAAAAAFLN}
00223 \par
{\bkmkstart AAAAAAAFLO}{\bkmkend AAAAAAAFLO}
00224         \}\par
{\bkmkstart AAAAAAAFLP}{\bkmkend AAAAAAAFLP}
00225         delay(BAUD_RATE);\par
{\bkmkstart AAAAAAAFLQ}{\bkmkend AAAAAAAFLQ}
00226     \}\par
{\bkmkstart AAAAAAAFLR}{\bkmkend AAAAAAAFLR}
00227 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
server.h\par \pard\plain 
{\bkmkstart AAAAAAAFLS}
{\bkmkend AAAAAAAFLS}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFLT}{\bkmkend AAAAAAAFLT}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAFLU}{\bkmkend AAAAAAAFLU}
00002 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAAFLV}{\bkmkend AAAAAAAFLV}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAAFLW}{\bkmkend AAAAAAAFLW}
00004 {\cf20 // Purpose:}\par
{\bkmkstart AAAAAAAFLX}{\bkmkend AAAAAAAFLX}
00005 {\cf20 //}\par
{\bkmkstart AAAAAAAFLY}{\bkmkend AAAAAAAFLY}
00006 {\cf20 // $NoKeywords: $}\par
{\bkmkstart AAAAAAAFLZ}{\bkmkend AAAAAAAFLZ}
00007 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAAFMA}{\bkmkend AAAAAAAFMA}
00008 {\cf20 */}\par
{\bkmkstart AAAAAAAFMB}{\bkmkend AAAAAAAFMB}
00009 \par
{\bkmkstart AAAAAAAFMC}{\bkmkend AAAAAAAFMC}
00010 {\cf20 /*}\par
{\bkmkstart AAAAAAAFMD}{\bkmkend AAAAAAAFMD}
00011 {\cf20 }\par
{\bkmkstart AAAAAAAFME}{\bkmkend AAAAAAAFME}
00012 {\cf20 frame structure}\par
{\bkmkstart AAAAAAAFMF}{\bkmkend AAAAAAAFMF}
00013 {\cf20 |0|D0|D1|D2|D3|D4|D5|D6|D7|1|1|}\par
{\bkmkstart AAAAAAAFMG}{\bkmkend AAAAAAAFMG}
00014 {\cf20 data packet structure}\par
{\bkmkstart AAAAAAAFMH}{\bkmkend AAAAAAAFMH}
00015 {\cf20 |0|length of data|-data-|-|crc16byte0|crc16byte1|}\par
{\bkmkstart AAAAAAAFMI}{\bkmkend AAAAAAAFMI}
00016 {\cf20 ACK (acknowledge) packet structure}\par
{\bkmkstart AAAAAAAFMJ}{\bkmkend AAAAAAAFMJ}
00017 {\cf20 |6|crc16byte0|crc16byte1|}\par
{\bkmkstart AAAAAAAFMK}{\bkmkend AAAAAAAFMK}
00018 {\cf20 }\par
{\bkmkstart AAAAAAAFML}{\bkmkend AAAAAAAFML}
00019 {\cf20 */}\par
{\bkmkstart AAAAAAAFMM}{\bkmkend AAAAAAAFMM}
00020 \par
{\bkmkstart AAAAAAAFMN}{\bkmkend AAAAAAAFMN}
00021 \par
{\bkmkstart AAAAAAAFMO}{\bkmkend AAAAAAAFMO}
00022 {\cf21 #ifndef __SERVER__}\par
{\bkmkstart AAAAAAAFMP}{\bkmkend AAAAAAAFMP}
00023 {\cf21 #define __SERVER__}\par
{\bkmkstart AAAAAAAFMQ}{\bkmkend AAAAAAAFMQ}
00024 \par
{\bkmkstart AAAAAAAFMR}{\bkmkend AAAAAAAFMR}
00025 \par
{\bkmkstart AAAAAAAFMS}{\bkmkend AAAAAAAFMS}
00026 {\cf20 /*}\par
{\bkmkstart AAAAAAAFMT}{\bkmkend AAAAAAAFMT}
00027 {\cf20 // server.h}\par
{\bkmkstart AAAAAAAFMU}{\bkmkend AAAAAAAFMU}
00028 {\cf20 */}\par
{\bkmkstart AAAAAAAFMV}{\bkmkend AAAAAAAFMV}
00029 \par
{\bkmkstart AAAAAAAFMW}{\bkmkend AAAAAAAFMW}
00030 \par
{\bkmkstart AAAAAAAFMX}{\bkmkend AAAAAAAFMX}
00031 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAFMY}{\bkmkend AAAAAAAFMY}
00032 {\cf17 extern} {\cf22 "C"}\par
{\bkmkstart AAAAAAAFMZ}{\bkmkend AAAAAAAFMZ}
00033 \{\par
{\bkmkstart AAAAAAAFNA}{\bkmkend AAAAAAAFNA}
00034 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFNB}{\bkmkend AAAAAAAFNB}
00035 \par
{\bkmkstart AAAAAAAFNC}{\bkmkend AAAAAAAFNC}
00036 {\cf17 extern} {\cf18 int} flag_server_ready;\par
{\bkmkstart AAAAAAAFND}{\bkmkend AAAAAAAFND}
00037 {\cf17 extern} {\cf18 int} flag_server_isdumping;\par
{\bkmkstart AAAAAAAFNE}{\bkmkend AAAAAAAFNE}
00038 \par
{\bkmkstart AAAAAAAFNF}{\bkmkend AAAAAAAFNF}
00039 {\cf18 void} SV_insert_msg({\cf18 unsigned} {\cf18 char} *msg);\par
{\bkmkstart AAAAAAAFNG}{\bkmkend AAAAAAAFNG}
00040 {\cf18 int} SV_insert_msg_nb({\cf18 unsigned} {\cf18 char} *msg);\par
{\bkmkstart AAAAAAAFNH}{\bkmkend AAAAAAAFNH}
00041 \par
{\bkmkstart AAAAAAAFNI}{\bkmkend AAAAAAAFNI}
00042 {\cf18 void} server_main();\par
{\bkmkstart AAAAAAAFNJ}{\bkmkend AAAAAAAFNJ}
00043 \par
{\bkmkstart AAAAAAAFNK}{\bkmkend AAAAAAAFNK}
00044 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAFNL}{\bkmkend AAAAAAAFNL}
00045 \}\par
{\bkmkstart AAAAAAAFNM}{\bkmkend AAAAAAAFNM}
00046 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFNN}{\bkmkend AAAAAAAFNN}
00047 \par
{\bkmkstart AAAAAAAFNO}{\bkmkend AAAAAAAFNO}
00048 \par
{\bkmkstart AAAAAAAFNP}{\bkmkend AAAAAAAFNP}
00049 {\cf21 #endif  }{\cf20 /*__SERVER__*/}{\cf21 }\par
{\bkmkstart AAAAAAAFNQ}{\bkmkend AAAAAAAFNQ}
00050 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
shared.h\par \pard\plain 
{\bkmkstart AAAAAAAFNR}
{\bkmkend AAAAAAAFNR}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFNS}{\bkmkend AAAAAAAFNS}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAFNT}{\bkmkend AAAAAAAFNT}
00002 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAAFNU}{\bkmkend AAAAAAAFNU}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAAFNV}{\bkmkend AAAAAAAFNV}
00004 {\cf20 // Purpose:}\par
{\bkmkstart AAAAAAAFNW}{\bkmkend AAAAAAAFNW}
00005 {\cf20 //}\par
{\bkmkstart AAAAAAAFNX}{\bkmkend AAAAAAAFNX}
00006 {\cf20 // $NoKeywords: $}\par
{\bkmkstart AAAAAAAFNY}{\bkmkend AAAAAAAFNY}
00007 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAAFNZ}{\bkmkend AAAAAAAFNZ}
00008 {\cf20 */}\par
{\bkmkstart AAAAAAAFOA}{\bkmkend AAAAAAAFOA}
00009 \par
{\bkmkstart AAAAAAAFOB}{\bkmkend AAAAAAAFOB}
00010 \par
{\bkmkstart AAAAAAAFOC}{\bkmkend AAAAAAAFOC}
00011 {\cf21 #ifndef __SHARED__}\par
{\bkmkstart AAAAAAAFOD}{\bkmkend AAAAAAAFOD}
00012 {\cf21 #define __SHARED__}\par
{\bkmkstart AAAAAAAFOE}{\bkmkend AAAAAAAFOE}
00013 \par
{\bkmkstart AAAAAAAFOF}{\bkmkend AAAAAAAFOF}
00014 \par
{\bkmkstart AAAAAAAFOG}{\bkmkend AAAAAAAFOG}
00015 {\cf20 /*}\par
{\bkmkstart AAAAAAAFOH}{\bkmkend AAAAAAAFOH}
00016 {\cf20 // shared.h}\par
{\bkmkstart AAAAAAAFOI}{\bkmkend AAAAAAAFOI}
00017 {\cf20 */}\par
{\bkmkstart AAAAAAAFOJ}{\bkmkend AAAAAAAFOJ}
00018 \par
{\bkmkstart AAAAAAAFOK}{\bkmkend AAAAAAAFOK}
00019 \par
{\bkmkstart AAAAAAAFOL}{\bkmkend AAAAAAAFOL}
00020 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAFOM}{\bkmkend AAAAAAAFOM}
00021 {\cf17 extern} {\cf22 "C"}\par
{\bkmkstart AAAAAAAFON}{\bkmkend AAAAAAAFON}
00022 \{\par
{\bkmkstart AAAAAAAFOO}{\bkmkend AAAAAAAFOO}
00023 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFOP}{\bkmkend AAAAAAAFOP}
00024 \par
{\bkmkstart AAAAAAAFOQ}{\bkmkend AAAAAAAFOQ}
00025 \par
{\bkmkstart AAAAAAAFOR}{\bkmkend AAAAAAAFOR}
00026 {\cf21 #ifndef __BUFFER__}\par
{\bkmkstart AAAAAAAFOS}{\bkmkend AAAAAAAFOS}
00027 {\cf21 #include "buffer.h"}\par
{\bkmkstart AAAAAAAFOT}{\bkmkend AAAAAAAFOT}
00028 {\cf21 #endif  }{\cf20 /*__BUFFER__*/}{\cf21 }\par
{\bkmkstart AAAAAAAFOU}{\bkmkend AAAAAAAFOU}
00029 \par
{\bkmkstart AAAAAAAFOV}{\bkmkend AAAAAAAFOV}
00030 {\cf21 #ifndef __CMDUTIL__}\par
{\bkmkstart AAAAAAAFOW}{\bkmkend AAAAAAAFOW}
00031 {\cf21 #include "cmdlib.h"}\par
{\bkmkstart AAAAAAAFOX}{\bkmkend AAAAAAAFOX}
00032 {\cf21 #endif  }{\cf20 /*__CMDUTIL__*/}{\cf21 }\par
{\bkmkstart AAAAAAAFOY}{\bkmkend AAAAAAAFOY}
00033 \par
{\bkmkstart AAAAAAAFOZ}{\bkmkend AAAAAAAFOZ}
00034 \par
{\bkmkstart AAAAAAAFPA}{\bkmkend AAAAAAAFPA}
00035 {\cf21 #define BUFFER_SIZE     32  }{\cf20 /* size must be 2 ^ n */}{\cf21 }\par
{\bkmkstart AAAAAAAFPB}{\bkmkend AAAAAAAFPB}
00036 {\cf21 #define BAUD_RATE       10 }{\cf20 /* This is timespan not rate */}{\cf21 }\par
{\bkmkstart AAAAAAAFPC}{\bkmkend AAAAAAAFPC}
00037 {\cf21 #define _SCAN_TIME_SPAN (BAUD_RATE / 10)}\par
{\bkmkstart AAAAAAAFPD}{\bkmkend AAAAAAAFPD}
00038 \par
{\bkmkstart AAAAAAAFPE}{\bkmkend AAAAAAAFPE}
00039 {\cf21 #define MAX_MSG_LENGTH  (BUFFER_SIZE - 4)  }{\cf20 /* BUFFER_SIZE - 4 */}{\cf21 }\par
{\bkmkstart AAAAAAAFPF}{\bkmkend AAAAAAAFPF}
00040 \par
{\bkmkstart AAAAAAAFPG}{\bkmkend AAAAAAAFPG}
00041 {\cf21 #ifdef _SLOW}\par
{\bkmkstart AAAAAAAFPH}{\bkmkend AAAAAAAFPH}
00042 {\cf21 #define MAX_WAIT_TIMES  (BUFFER_SIZE + 6) * 22}\par
{\bkmkstart AAAAAAAFPI}{\bkmkend AAAAAAAFPI}
00043 {\cf21 #elif defined _SLOWX2}\par
{\bkmkstart AAAAAAAFPJ}{\bkmkend AAAAAAAFPJ}
00044 {\cf21 #define MAX_WAIT_TIMES  (BUFFER_SIZE + 6) * 33}\par
{\bkmkstart AAAAAAAFPK}{\bkmkend AAAAAAAFPK}
00045 {\cf21 #else}\par
{\bkmkstart AAAAAAAFPL}{\bkmkend AAAAAAAFPL}
00046 {\cf21 #define MAX_WAIT_TIMES  (BUFFER_SIZE + 6) * 11}\par
{\bkmkstart AAAAAAAFPM}{\bkmkend AAAAAAAFPM}
00047 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFPN}{\bkmkend AAAAAAAFPN}
00048 \par
{\bkmkstart AAAAAAAFPO}{\bkmkend AAAAAAAFPO}
00049 {\cf21 #ifdef _SERVER}\par
{\bkmkstart AAAAAAAFPP}{\bkmkend AAAAAAAFPP}
00050 {\cf21 #define TX              4}\par
{\bkmkstart AAAAAAAFPQ}{\bkmkend AAAAAAAFPQ}
00051 {\cf21 #define RX              17}\par
{\bkmkstart AAAAAAAFPR}{\bkmkend AAAAAAAFPR}
00052 {\cf21 #else}\par
{\bkmkstart AAAAAAAFPS}{\bkmkend AAAAAAAFPS}
00053 {\cf21 #define TX              17}\par
{\bkmkstart AAAAAAAFPT}{\bkmkend AAAAAAAFPT}
00054 {\cf21 #define RX              4}\par
{\bkmkstart AAAAAAAFPU}{\bkmkend AAAAAAAFPU}
00055 {\cf21 #endif }{\cf20 /*// _SERVER*/}{\cf21 }\par
{\bkmkstart AAAAAAAFPV}{\bkmkend AAAAAAAFPV}
00056 \par
{\bkmkstart AAAAAAAFPW}{\bkmkend AAAAAAAFPW}
00057 {\cf17 extern} {\cf18 int} flag_sender_ready;\par
{\bkmkstart AAAAAAAFPX}{\bkmkend AAAAAAAFPX}
00058 \par
{\bkmkstart AAAAAAAFPY}{\bkmkend AAAAAAAFPY}
00059 {\cf17 extern} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 sender_buffer;\par
{\bkmkstart AAAAAAAFPZ}{\bkmkend AAAAAAAFPZ}
00060 \par
{\bkmkstart AAAAAAAFQA}{\bkmkend AAAAAAAFQA}
00061 {\cf18 void} SD_buffer_put({\cf18 byte} elem);\par
{\bkmkstart AAAAAAAFQB}{\bkmkend AAAAAAAFQB}
00062 {\cf18 void} SD_print_buffer();\par
{\bkmkstart AAAAAAAFQC}{\bkmkend AAAAAAAFQC}
00063 {\cf18 void} SD_flush_buffer();\par
{\bkmkstart AAAAAAAFQD}{\bkmkend AAAAAAAFQD}
00064 \par
{\bkmkstart AAAAAAAFQE}{\bkmkend AAAAAAAFQE}
00065 {\cf18 void} sender_main();\par
{\bkmkstart AAAAAAAFQF}{\bkmkend AAAAAAAFQF}
00066 \par
{\bkmkstart AAAAAAAFQG}{\bkmkend AAAAAAAFQG}
00067 {\cf20 /******************************/}\par
{\bkmkstart AAAAAAAFQH}{\bkmkend AAAAAAAFQH}
00068 \par
{\bkmkstart AAAAAAAFQI}{\bkmkend AAAAAAAFQI}
00069 {\cf17 extern} {\cf18 int} flag_receiver_ready;\par
{\bkmkstart AAAAAAAFQJ}{\bkmkend AAAAAAAFQJ}
00070 \par
{\bkmkstart AAAAAAAFQK}{\bkmkend AAAAAAAFQK}
00071 {\cf17 extern} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 ring_buffer}}}
 receiver_buffer;\par
{\bkmkstart AAAAAAAFQL}{\bkmkend AAAAAAAFQL}
00072 \par
{\bkmkstart AAAAAAAFQM}{\bkmkend AAAAAAAFQM}
00073 {\cf18 byte} RC_buffer_get();\par
{\bkmkstart AAAAAAAFQN}{\bkmkend AAAAAAAFQN}
00074 {\cf18 void} RC_print_buffer();\par
{\bkmkstart AAAAAAAFQO}{\bkmkend AAAAAAAFQO}
00075 {\cf18 void} RC_flush_buffer();\par
{\bkmkstart AAAAAAAFQP}{\bkmkend AAAAAAAFQP}
00076 \par
{\bkmkstart AAAAAAAFQQ}{\bkmkend AAAAAAAFQQ}
00077 {\cf18 void} receiver_main();\par
{\bkmkstart AAAAAAAFQR}{\bkmkend AAAAAAAFQR}
00078 \par
{\bkmkstart AAAAAAAFQS}{\bkmkend AAAAAAAFQS}
00079 {\cf20 /******************************/}\par
{\bkmkstart AAAAAAAFQT}{\bkmkend AAAAAAAFQT}
00080 \par
{\bkmkstart AAAAAAAFQU}{\bkmkend AAAAAAAFQU}
00081 {\cf17 extern} {\cf18 int} mxargc;\par
{\bkmkstart AAAAAAAFQV}{\bkmkend AAAAAAAFQV}
00082 {\cf17 extern} {\cf18 char} **mxargv;\par
{\bkmkstart AAAAAAAFQW}{\bkmkend AAAAAAAFQW}
00083 \par
{\bkmkstart AAAAAAAFQX}{\bkmkend AAAAAAAFQX}
00084 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAFQY}{\bkmkend AAAAAAAFQY}
00085 \}\par
{\bkmkstart AAAAAAAFQZ}{\bkmkend AAAAAAAFQZ}
00086 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFRA}{\bkmkend AAAAAAAFRA}
00087 \par
{\bkmkstart AAAAAAAFRB}{\bkmkend AAAAAAAFRB}
00088 \par
{\bkmkstart AAAAAAAFRC}{\bkmkend AAAAAAAFRC}
00089 {\cf21 #endif  }{\cf20 /*__SHARED__*/}{\cf21 }\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
softgpio.c\par \pard\plain 
{\bkmkstart AAAAAAAFRD}
{\bkmkend AAAAAAAFRD}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFRE}{\bkmkend AAAAAAAFRE}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAFRF}{\bkmkend AAAAAAAFRF}
00002 {\cf20 }\par
{\bkmkstart AAAAAAAFRG}{\bkmkend AAAAAAAFRG}
00003 {\cf20 ===== sotfgpio.c ========================================================}\par
{\bkmkstart AAAAAAAFRH}{\bkmkend AAAAAAAFRH}
00004 {\cf20 }\par
{\bkmkstart AAAAAAAFRI}{\bkmkend AAAAAAAFRI}
00005 {\cf20 */}\par
{\bkmkstart AAAAAAAFRJ}{\bkmkend AAAAAAAFRJ}
00006 \par
{\bkmkstart AAAAAAAFRK}{\bkmkend AAAAAAAFRK}
00007 {\cf21 #ifdef _SOFTGPIO}\par
{\bkmkstart AAAAAAAFRL}{\bkmkend AAAAAAAFRL}
00008 \par
{\bkmkstart AAAAAAAFRM}{\bkmkend AAAAAAAFRM}
00009 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAAFRN}{\bkmkend AAAAAAAFRN}
00010 {\cf21 #include <windows.h>}\par
{\bkmkstart AAAAAAAFRO}{\bkmkend AAAAAAAFRO}
00011 {\cf21 #else}\par
{\bkmkstart AAAAAAAFRP}{\bkmkend AAAAAAAFRP}
00012 {\cf21 #include <unistd.h>}\par
{\bkmkstart AAAAAAAFRQ}{\bkmkend AAAAAAAFRQ}
00013 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFRR}{\bkmkend AAAAAAAFRR}
00014 \par
{\bkmkstart AAAAAAAFRS}{\bkmkend AAAAAAAFRS}
00015 {\cf21 #include "cmdlib.h"}\par
{\bkmkstart AAAAAAAFRT}{\bkmkend AAAAAAAFRT}
00016 \par
{\bkmkstart AAAAAAAFRU}{\bkmkend AAAAAAAFRU}
00017 {\cf21 #include "softgpio.h"}\par
{\bkmkstart AAAAAAAFRV}{\bkmkend AAAAAAAFRV}
00018 \par
{\bkmkstart AAAAAAAFRW}{\bkmkend AAAAAAAFRW}
00019 \par
{\bkmkstart AAAAAAAFRX}{\bkmkend AAAAAAAFRX}
00020 {\cf17 typedef} {\cf17 struct}\par
{\bkmkstart AAAAAAAFRY}{\bkmkend AAAAAAAFRY}
00021 \{\par
{\bkmkstart AAAAAAAFRZ}{\bkmkend AAAAAAAFRZ}
00022     {\cf18 char} state;\par
{\bkmkstart AAAAAAAFSA}{\bkmkend AAAAAAAFSA}
00023 \} softgpio_t;\par
{\bkmkstart AAAAAAAFSB}{\bkmkend AAAAAAAFSB}
00024 \par
{\bkmkstart AAAAAAAFSC}{\bkmkend AAAAAAAFSC}
00025 \par
{\bkmkstart AAAAAAAFSD}{\bkmkend AAAAAAAFSD}
00026 {\cf20 /*static char filepath[14][128];*/}\par
{\bkmkstart AAAAAAAFSE}{\bkmkend AAAAAAAFSE}
00027 {\cf17 static} {\cf18 char} filepath[14][9];\par
{\bkmkstart AAAAAAAFSF}{\bkmkend AAAAAAAFSF}
00028 {\cf17 static} qboolean pinmode[14] = \{{\cf17 true}\};\par
{\bkmkstart AAAAAAAFSG}{\bkmkend AAAAAAAFSG}
00029 \par
{\bkmkstart AAAAAAAFSH}{\bkmkend AAAAAAAFSH}
00030 {\cf18 int} wiringPiSetup( {\cf18 void} )\par
{\bkmkstart AAAAAAAFSI}{\bkmkend AAAAAAAFSI}
00031 \{\par
{\bkmkstart AAAAAAAFSJ}{\bkmkend AAAAAAAFSJ}
00032     {\cf18 char} source[128];\par
{\bkmkstart AAAAAAAFSK}{\bkmkend AAAAAAAFSK}
00033     {\cf18 int} i;\par
{\bkmkstart AAAAAAAFSL}{\bkmkend AAAAAAAFSL}
00034     Q_getwd(source);\par
{\bkmkstart AAAAAAAFSM}{\bkmkend AAAAAAAFSM}
00035     {\cf19 for}(i=0; i<14; i++)\par
{\bkmkstart AAAAAAAFSN}{\bkmkend AAAAAAAFSN}
00036 \par
{\bkmkstart AAAAAAAFSO}{\bkmkend AAAAAAAFSO}
00037     \{\par
{\bkmkstart AAAAAAAFSP}{\bkmkend AAAAAAAFSP}
00038         {\cf20 /*}\par
{\bkmkstart AAAAAAAFSQ}{\bkmkend AAAAAAAFSQ}
00039 {\cf20         strcpy(filepath[i], source);}\par
{\bkmkstart AAAAAAAFSR}{\bkmkend AAAAAAAFSR}
00040 {\cf20         sprintf (filepath[i] + strlen(filepath[i]),"pin%d.bin", i);}\par
{\bkmkstart AAAAAAAFSS}{\bkmkend AAAAAAAFSS}
00041 {\cf20         */}\par
{\bkmkstart AAAAAAAFST}{\bkmkend AAAAAAAFST}
00042         sprintf (filepath[i],{\cf22 "pin%d.bin"}, i);\par
{\bkmkstart AAAAAAAFSU}{\bkmkend AAAAAAAFSU}
00043     \}\par
{\bkmkstart AAAAAAAFSV}{\bkmkend AAAAAAAFSV}
00044 \par
{\bkmkstart AAAAAAAFSW}{\bkmkend AAAAAAAFSW}
00045     {\cf19 return} 0;\par
{\bkmkstart AAAAAAAFSX}{\bkmkend AAAAAAAFSX}
00046 \}\par
{\bkmkstart AAAAAAAFSY}{\bkmkend AAAAAAAFSY}
00047 \par
{\bkmkstart AAAAAAAFSZ}{\bkmkend AAAAAAAFSZ}
00048 {\cf18 int} wiringPiSetupGpio( {\cf18 void} )\par
{\bkmkstart AAAAAAAFTA}{\bkmkend AAAAAAAFTA}
00049 \{\par
{\bkmkstart AAAAAAAFTB}{\bkmkend AAAAAAAFTB}
00050     {\cf18 char} source[128];\par
{\bkmkstart AAAAAAAFTC}{\bkmkend AAAAAAAFTC}
00051     {\cf18 int} i;\par
{\bkmkstart AAAAAAAFTD}{\bkmkend AAAAAAAFTD}
00052     Q_getwd(source);\par
{\bkmkstart AAAAAAAFTE}{\bkmkend AAAAAAAFTE}
00053     {\cf19 for}(i=0; i<14; i++)\par
{\bkmkstart AAAAAAAFTF}{\bkmkend AAAAAAAFTF}
00054 \par
{\bkmkstart AAAAAAAFTG}{\bkmkend AAAAAAAFTG}
00055     \{\par
{\bkmkstart AAAAAAAFTH}{\bkmkend AAAAAAAFTH}
00056         {\cf20 /*}\par
{\bkmkstart AAAAAAAFTI}{\bkmkend AAAAAAAFTI}
00057 {\cf20         strcpy(filepath[i], source);}\par
{\bkmkstart AAAAAAAFTJ}{\bkmkend AAAAAAAFTJ}
00058 {\cf20         sprintf (filepath[i] + strlen(filepath[i]),"pin%d.bin", i);}\par
{\bkmkstart AAAAAAAFTK}{\bkmkend AAAAAAAFTK}
00059 {\cf20         */}\par
{\bkmkstart AAAAAAAFTL}{\bkmkend AAAAAAAFTL}
00060         sprintf (filepath[i],{\cf22 "pin%d.bin"}, i);\par
{\bkmkstart AAAAAAAFTM}{\bkmkend AAAAAAAFTM}
00061     \}\par
{\bkmkstart AAAAAAAFTN}{\bkmkend AAAAAAAFTN}
00062 \par
{\bkmkstart AAAAAAAFTO}{\bkmkend AAAAAAAFTO}
00063     {\cf19 return} 0;\par
{\bkmkstart AAAAAAAFTP}{\bkmkend AAAAAAAFTP}
00064 \}\par
{\bkmkstart AAAAAAAFTQ}{\bkmkend AAAAAAAFTQ}
00065 \par
{\bkmkstart AAAAAAAFTR}{\bkmkend AAAAAAAFTR}
00066 {\cf18 void} pinMode({\cf18 int} pin, {\cf18 int} mode)\par
{\bkmkstart AAAAAAAFTS}{\bkmkend AAAAAAAFTS}
00067 \{\par
{\bkmkstart AAAAAAAFTT}{\bkmkend AAAAAAAFTT}
00068     softgpio_t default_value;\par
{\bkmkstart AAAAAAAFTU}{\bkmkend AAAAAAAFTU}
00069     default_value.state = 1;\par
{\bkmkstart AAAAAAAFTV}{\bkmkend AAAAAAAFTV}
00070     {\cf19 if}(mode == INPUT)\par
{\bkmkstart AAAAAAAFTW}{\bkmkend AAAAAAAFTW}
00071         pinmode[pin] = {\cf17 true};\par
{\bkmkstart AAAAAAAFTX}{\bkmkend AAAAAAAFTX}
00072     {\cf19 else} {\cf19 if}(mode == OUTPUT)\par
{\bkmkstart AAAAAAAFTY}{\bkmkend AAAAAAAFTY}
00073         pinmode[pin] = {\cf17 false};\par
{\bkmkstart AAAAAAAFTZ}{\bkmkend AAAAAAAFTZ}
00074     SaveFile (filepath[pin],&default_value,{\cf17 sizeof}(softgpio_t));\par
{\bkmkstart AAAAAAAFUA}{\bkmkend AAAAAAAFUA}
00075 \}\par
{\bkmkstart AAAAAAAFUB}{\bkmkend AAAAAAAFUB}
00076 \par
{\bkmkstart AAAAAAAFUC}{\bkmkend AAAAAAAFUC}
00077 {\cf18 int} digitalRead({\cf18 int} pin)\par
{\bkmkstart AAAAAAAFUD}{\bkmkend AAAAAAAFUD}
00078 \{\par
{\bkmkstart AAAAAAAFUE}{\bkmkend AAAAAAAFUE}
00079     {\cf19 if}(pinmode[pin])\par
{\bkmkstart AAAAAAAFUF}{\bkmkend AAAAAAAFUF}
00080 \par
{\bkmkstart AAAAAAAFUG}{\bkmkend AAAAAAAFUG}
00081     \{\par
{\bkmkstart AAAAAAAFUH}{\bkmkend AAAAAAAFUH}
00082         softgpio_t *buffer;\par
{\bkmkstart AAAAAAAFUI}{\bkmkend AAAAAAAFUI}
00083         {\cf18 int} ret;\par
{\bkmkstart AAAAAAAFUJ}{\bkmkend AAAAAAAFUJ}
00084         LoadFile (filepath[pin], ({\cf18 void} **)&buffer);\par
{\bkmkstart AAAAAAAFUK}{\bkmkend AAAAAAAFUK}
00085         ret = buffer->state;\par
{\bkmkstart AAAAAAAFUL}{\bkmkend AAAAAAAFUL}
00086         free(buffer);\par
{\bkmkstart AAAAAAAFUM}{\bkmkend AAAAAAAFUM}
00087         {\cf19 return} ret;\par
{\bkmkstart AAAAAAAFUN}{\bkmkend AAAAAAAFUN}
00088     \}\par
{\bkmkstart AAAAAAAFUO}{\bkmkend AAAAAAAFUO}
00089 \par
{\bkmkstart AAAAAAAFUP}{\bkmkend AAAAAAAFUP}
00090     {\cf19 else}\par
{\bkmkstart AAAAAAAFUQ}{\bkmkend AAAAAAAFUQ}
00091         Error({\cf22 "Write Only"});\par
{\bkmkstart AAAAAAAFUR}{\bkmkend AAAAAAAFUR}
00092     {\cf19 return} -1;\par
{\bkmkstart AAAAAAAFUS}{\bkmkend AAAAAAAFUS}
00093 \}\par
{\bkmkstart AAAAAAAFUT}{\bkmkend AAAAAAAFUT}
00094 \par
{\bkmkstart AAAAAAAFUU}{\bkmkend AAAAAAAFUU}
00095 {\cf18 void} digitalWrite({\cf18 int} pin, {\cf18 int} value)\par
{\bkmkstart AAAAAAAFUV}{\bkmkend AAAAAAAFUV}
00096 \{\par
{\bkmkstart AAAAAAAFUW}{\bkmkend AAAAAAAFUW}
00097     {\cf19 if}(!pinmode[pin])\par
{\bkmkstart AAAAAAAFUX}{\bkmkend AAAAAAAFUX}
00098 \par
{\bkmkstart AAAAAAAFUY}{\bkmkend AAAAAAAFUY}
00099     \{\par
{\bkmkstart AAAAAAAFUZ}{\bkmkend AAAAAAAFUZ}
00100         softgpio_t buffer;\par
{\bkmkstart AAAAAAAFVA}{\bkmkend AAAAAAAFVA}
00101         buffer.state = (char)value;\par
{\bkmkstart AAAAAAAFVB}{\bkmkend AAAAAAAFVB}
00102         SaveFile (filepath[pin], &buffer,{\cf17 sizeof}(softgpio_t));\par
{\bkmkstart AAAAAAAFVC}{\bkmkend AAAAAAAFVC}
00103     \}\par
{\bkmkstart AAAAAAAFVD}{\bkmkend AAAAAAAFVD}
00104 \par
{\bkmkstart AAAAAAAFVE}{\bkmkend AAAAAAAFVE}
00105     {\cf19 else}\par
{\bkmkstart AAAAAAAFVF}{\bkmkend AAAAAAAFVF}
00106         Error({\cf22 "Read Only"});\par
{\bkmkstart AAAAAAAFVG}{\bkmkend AAAAAAAFVG}
00107 \par
{\bkmkstart AAAAAAAFVH}{\bkmkend AAAAAAAFVH}
00108 \}\par
{\bkmkstart AAAAAAAFVI}{\bkmkend AAAAAAAFVI}
00109 \par
{\bkmkstart AAAAAAAFVJ}{\bkmkend AAAAAAAFVJ}
00110 {\cf18 void} delay({\cf18 unsigned} {\cf18 int} howLong)\par
{\bkmkstart AAAAAAAFVK}{\bkmkend AAAAAAAFVK}
00111 \{\par
{\bkmkstart AAAAAAAFVL}{\bkmkend AAAAAAAFVL}
00112 \par
{\bkmkstart AAAAAAAFVM}{\bkmkend AAAAAAAFVM}
00113 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAAFVN}{\bkmkend AAAAAAAFVN}
00114     Sleep(howLong);\par
{\bkmkstart AAAAAAAFVO}{\bkmkend AAAAAAAFVO}
00115 {\cf21 #else}\par
{\bkmkstart AAAAAAAFVP}{\bkmkend AAAAAAAFVP}
00116     usleep(howLong * 1000);\par
{\bkmkstart AAAAAAAFVQ}{\bkmkend AAAAAAAFVQ}
00117 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFVR}{\bkmkend AAAAAAAFVR}
00118 \par
{\bkmkstart AAAAAAAFVS}{\bkmkend AAAAAAAFVS}
00119 \}\par
{\bkmkstart AAAAAAAFVT}{\bkmkend AAAAAAAFVT}
00120 \par
{\bkmkstart AAAAAAAFVU}{\bkmkend AAAAAAAFVU}
00121 {\cf18 void} delayMicroseconds({\cf18 unsigned} {\cf18 int} howLong)\par
{\bkmkstart AAAAAAAFVV}{\bkmkend AAAAAAAFVV}
00122 \{\par
{\bkmkstart AAAAAAAFVW}{\bkmkend AAAAAAAFVW}
00123 \par
{\bkmkstart AAAAAAAFVX}{\bkmkend AAAAAAAFVX}
00124 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAAFVY}{\bkmkend AAAAAAAFVY}
00125 \par
{\bkmkstart AAAAAAAFVZ}{\bkmkend AAAAAAAFVZ}
00126 {\cf21 #else}\par
{\bkmkstart AAAAAAAFWA}{\bkmkend AAAAAAAFWA}
00127     usleep(howLong);\par
{\bkmkstart AAAAAAAFWB}{\bkmkend AAAAAAAFWB}
00128 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFWC}{\bkmkend AAAAAAAFWC}
00129 \par
{\bkmkstart AAAAAAAFWD}{\bkmkend AAAAAAAFWD}
00130 \}\par
{\bkmkstart AAAAAAAFWE}{\bkmkend AAAAAAAFWE}
00131 \par
{\bkmkstart AAAAAAAFWF}{\bkmkend AAAAAAAFWF}
00132 {\cf21 #endif }{\cf20 /* _SOFTGPIO */}{\cf21 }\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
softgpio.h\par \pard\plain 
{\bkmkstart AAAAAAAFWG}
{\bkmkend AAAAAAAFWG}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFWH}{\bkmkend AAAAAAAFWH}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAFWI}{\bkmkend AAAAAAAFWI}
00002 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAAFWJ}{\bkmkend AAAAAAAFWJ}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAAFWK}{\bkmkend AAAAAAAFWK}
00004 {\cf20 // Purpose:}\par
{\bkmkstart AAAAAAAFWL}{\bkmkend AAAAAAAFWL}
00005 {\cf20 //}\par
{\bkmkstart AAAAAAAFWM}{\bkmkend AAAAAAAFWM}
00006 {\cf20 // $NoKeywords: $}\par
{\bkmkstart AAAAAAAFWN}{\bkmkend AAAAAAAFWN}
00007 {\cf20 //=============================================================================}\par
{\bkmkstart AAAAAAAFWO}{\bkmkend AAAAAAAFWO}
00008 {\cf20 */}\par
{\bkmkstart AAAAAAAFWP}{\bkmkend AAAAAAAFWP}
00009 \par
{\bkmkstart AAAAAAAFWQ}{\bkmkend AAAAAAAFWQ}
00010 \par
{\bkmkstart AAAAAAAFWR}{\bkmkend AAAAAAAFWR}
00011 {\cf21 #ifndef __SOFTGPIO__}\par
{\bkmkstart AAAAAAAFWS}{\bkmkend AAAAAAAFWS}
00012 {\cf21 #define __SOFTGPIO__}\par
{\bkmkstart AAAAAAAFWT}{\bkmkend AAAAAAAFWT}
00013 \par
{\bkmkstart AAAAAAAFWU}{\bkmkend AAAAAAAFWU}
00014 \par
{\bkmkstart AAAAAAAFWV}{\bkmkend AAAAAAAFWV}
00015 {\cf20 /*}\par
{\bkmkstart AAAAAAAFWW}{\bkmkend AAAAAAAFWW}
00016 {\cf20 // softgpio.h}\par
{\bkmkstart AAAAAAAFWX}{\bkmkend AAAAAAAFWX}
00017 {\cf20 */}\par
{\bkmkstart AAAAAAAFWY}{\bkmkend AAAAAAAFWY}
00018 \par
{\bkmkstart AAAAAAAFWZ}{\bkmkend AAAAAAAFWZ}
00019 \par
{\bkmkstart AAAAAAAFXA}{\bkmkend AAAAAAAFXA}
00020 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAFXB}{\bkmkend AAAAAAAFXB}
00021 {\cf17 extern} {\cf22 "C"}\par
{\bkmkstart AAAAAAAFXC}{\bkmkend AAAAAAAFXC}
00022 \{\par
{\bkmkstart AAAAAAAFXD}{\bkmkend AAAAAAAFXD}
00023     {\cf17 namespace }softgpio \{\par
{\bkmkstart AAAAAAAFXE}{\bkmkend AAAAAAAFXE}
00024 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFXF}{\bkmkend AAAAAAAFXF}
00025 \par
{\bkmkstart AAAAAAAFXG}{\bkmkend AAAAAAAFXG}
00026 {\cf21 #ifdef _SOFTGPIO}\par
{\bkmkstart AAAAAAAFXH}{\bkmkend AAAAAAAFXH}
00027 \par
{\bkmkstart AAAAAAAFXI}{\bkmkend AAAAAAAFXI}
00028 \par
{\bkmkstart AAAAAAAFXJ}{\bkmkend AAAAAAAFXJ}
00029 {\cf21 #define INPUT                    0}\par
{\bkmkstart AAAAAAAFXK}{\bkmkend AAAAAAAFXK}
00030 {\cf21 #define OUTPUT                   1}\par
{\bkmkstart AAAAAAAFXL}{\bkmkend AAAAAAAFXL}
00031 {\cf21 #define PWM_OUTPUT               2}\par
{\bkmkstart AAAAAAAFXM}{\bkmkend AAAAAAAFXM}
00032 {\cf21 #define GPIO_CLOCK               3}\par
{\bkmkstart AAAAAAAFXN}{\bkmkend AAAAAAAFXN}
00033 {\cf21 #define SOFT_PWM_OUTPUT          4}\par
{\bkmkstart AAAAAAAFXO}{\bkmkend AAAAAAAFXO}
00034 {\cf21 #define SOFT_TONE_OUTPUT         5}\par
{\bkmkstart AAAAAAAFXP}{\bkmkend AAAAAAAFXP}
00035 {\cf21 #define PWM_TONE_OUTPUT          6}\par
{\bkmkstart AAAAAAAFXQ}{\bkmkend AAAAAAAFXQ}
00036 \par
{\bkmkstart AAAAAAAFXR}{\bkmkend AAAAAAAFXR}
00037 \par
{\bkmkstart AAAAAAAFXS}{\bkmkend AAAAAAAFXS}
00038 {\cf21 #define LOW                          0}\par
{\bkmkstart AAAAAAAFXT}{\bkmkend AAAAAAAFXT}
00039 {\cf21 #define HIGH                     1}\par
{\bkmkstart AAAAAAAFXU}{\bkmkend AAAAAAAFXU}
00040 \par
{\bkmkstart AAAAAAAFXV}{\bkmkend AAAAAAAFXV}
00041 \par
{\bkmkstart AAAAAAAFXW}{\bkmkend AAAAAAAFXW}
00042 {\cf18 int} wiringPiSetup( {\cf18 void} );\par
{\bkmkstart AAAAAAAFXX}{\bkmkend AAAAAAAFXX}
00043 {\cf18 int} wiringPiSetupGpio( {\cf18 void} );\par
{\bkmkstart AAAAAAAFXY}{\bkmkend AAAAAAAFXY}
00044 {\cf18 void} pinMode({\cf18 int} pin, {\cf18 int} mode);\par
{\bkmkstart AAAAAAAFXZ}{\bkmkend AAAAAAAFXZ}
00045 \par
{\bkmkstart AAAAAAAFYA}{\bkmkend AAAAAAAFYA}
00046 {\cf18 int} digitalRead({\cf18 int} pin);\par
{\bkmkstart AAAAAAAFYB}{\bkmkend AAAAAAAFYB}
00047 \par
{\bkmkstart AAAAAAAFYC}{\bkmkend AAAAAAAFYC}
00048 {\cf18 void} digitalWrite({\cf18 int} pin, {\cf18 int} value);\par
{\bkmkstart AAAAAAAFYD}{\bkmkend AAAAAAAFYD}
00049 \par
{\bkmkstart AAAAAAAFYE}{\bkmkend AAAAAAAFYE}
00050 {\cf18 void} delay({\cf18 unsigned} {\cf18 int} howLong);\par
{\bkmkstart AAAAAAAFYF}{\bkmkend AAAAAAAFYF}
00051 {\cf18 void} delayMicroseconds({\cf18 unsigned} {\cf18 int} howLong);\par
{\bkmkstart AAAAAAAFYG}{\bkmkend AAAAAAAFYG}
00052 \par
{\bkmkstart AAAAAAAFYH}{\bkmkend AAAAAAAFYH}
00053 \par
{\bkmkstart AAAAAAAFYI}{\bkmkend AAAAAAAFYI}
00054 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAFYJ}{\bkmkend AAAAAAAFYJ}
00055     \} {\cf20 //namespace softgpio}\par
{\bkmkstart AAAAAAAFYK}{\bkmkend AAAAAAAFYK}
00056 \}\par
{\bkmkstart AAAAAAAFYL}{\bkmkend AAAAAAAFYL}
00057 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFYM}{\bkmkend AAAAAAAFYM}
00058 \par
{\bkmkstart AAAAAAAFYN}{\bkmkend AAAAAAAFYN}
00059 {\cf21 #endif }{\cf20 /* _SOFTGPIO */}{\cf21 }\par
{\bkmkstart AAAAAAAFYO}{\bkmkend AAAAAAAFYO}
00060 \par
{\bkmkstart AAAAAAAFYP}{\bkmkend AAAAAAAFYP}
00061 \par
{\bkmkstart AAAAAAAFYQ}{\bkmkend AAAAAAAFYQ}
00062 {\cf21 #endif  }{\cf20 /*__SOFTGPIO__*/}{\cf21 }\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
threads.c\par \pard\plain 
{\bkmkstart AAAAAAAFYR}
{\bkmkend AAAAAAAFYR}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFYS}{\bkmkend AAAAAAAFYS}
00001 {\cf20 /***}\par
{\bkmkstart AAAAAAAFYT}{\bkmkend AAAAAAAFYT}
00002 {\cf20 *}\par
{\bkmkstart AAAAAAAFYU}{\bkmkend AAAAAAAFYU}
00003 {\cf20 *       Copyright (c) 1996-2002, Valve LLC. All rights reserved.}\par
{\bkmkstart AAAAAAAFYV}{\bkmkend AAAAAAAFYV}
00004 {\cf20 *}\par
{\bkmkstart AAAAAAAFYW}{\bkmkend AAAAAAAFYW}
00005 {\cf20 *       This product contains software technology licensed from Id}\par
{\bkmkstart AAAAAAAFYX}{\bkmkend AAAAAAAFYX}
00006 {\cf20 *       Software, Inc. ("Id Technology").  Id Technology (c) 1996 Id Software, Inc.}\par
{\bkmkstart AAAAAAAFYY}{\bkmkend AAAAAAAFYY}
00007 {\cf20 *       All Rights Reserved.}\par
{\bkmkstart AAAAAAAFYZ}{\bkmkend AAAAAAAFYZ}
00008 {\cf20 *}\par
{\bkmkstart AAAAAAAFZA}{\bkmkend AAAAAAAFZA}
00009 {\cf20 ****/}\par
{\bkmkstart AAAAAAAFZB}{\bkmkend AAAAAAAFZB}
00010 \par
{\bkmkstart AAAAAAAFZC}{\bkmkend AAAAAAAFZC}
00011 {\cf20 /*}\par
{\bkmkstart AAAAAAAFZD}{\bkmkend AAAAAAAFZD}
00012 {\cf20 =================}\par
{\bkmkstart AAAAAAAFZE}{\bkmkend AAAAAAAFZE}
00013 {\cf20 last modified:}\par
{\bkmkstart AAAAAAAFZF}{\bkmkend AAAAAAAFZF}
00014 {\cf20 =================}\par
{\bkmkstart AAAAAAAFZG}{\bkmkend AAAAAAAFZG}
00015 {\cf20 */}\par
{\bkmkstart AAAAAAAFZH}{\bkmkend AAAAAAAFZH}
00016 \par
{\bkmkstart AAAAAAAFZI}{\bkmkend AAAAAAAFZI}
00017 {\cf21 #include "cmdlib.h"}\par
{\bkmkstart AAAAAAAFZJ}{\bkmkend AAAAAAAFZJ}
00018 {\cf21 #define NO_THREAD_NAMES}\par
{\bkmkstart AAAAAAAFZK}{\bkmkend AAAAAAAFZK}
00019 {\cf21 #include "threads.h"}\par
{\bkmkstart AAAAAAAFZL}{\bkmkend AAAAAAAFZL}
00020 \par
{\bkmkstart AAAAAAAFZM}{\bkmkend AAAAAAAFZM}
00021 {\cf21 #define MAX_THREADS     64}\par
{\bkmkstart AAAAAAAFZN}{\bkmkend AAAAAAAFZN}
00022 \par
{\bkmkstart AAAAAAAFZO}{\bkmkend AAAAAAAFZO}
00023 {\cf18 int}             dispatch;\par
{\bkmkstart AAAAAAAFZP}{\bkmkend AAAAAAAFZP}
00024 {\cf18 int}             workcount;\par
{\bkmkstart AAAAAAAFZQ}{\bkmkend AAAAAAAFZQ}
00025 {\cf18 int}             oldf;\par
{\bkmkstart AAAAAAAFZR}{\bkmkend AAAAAAAFZR}
00026 qboolean                pacifier;\par
{\bkmkstart AAAAAAAFZS}{\bkmkend AAAAAAAFZS}
00027 \par
{\bkmkstart AAAAAAAFZT}{\bkmkend AAAAAAAFZT}
00028 qboolean        threaded;\par
{\bkmkstart AAAAAAAFZU}{\bkmkend AAAAAAAFZU}
00029 \par
{\bkmkstart AAAAAAAFZV}{\bkmkend AAAAAAAFZV}
00030 {\cf20 /*}\par
{\bkmkstart AAAAAAAFZW}{\bkmkend AAAAAAAFZW}
00031 {\cf20 =============}\par
{\bkmkstart AAAAAAAFZX}{\bkmkend AAAAAAAFZX}
00032 {\cf20 GetThreadWork}\par
{\bkmkstart AAAAAAAFZY}{\bkmkend AAAAAAAFZY}
00033 {\cf20 }\par
{\bkmkstart AAAAAAAFZZ}{\bkmkend AAAAAAAFZZ}
00034 {\cf20 =============}\par
{\bkmkstart AAAAAAAGAA}{\bkmkend AAAAAAAGAA}
00035 {\cf20 */}\par
{\bkmkstart AAAAAAAGAB}{\bkmkend AAAAAAAGAB}
00036 {\cf18 int}     GetThreadWork ({\cf18 void})\par
{\bkmkstart AAAAAAAGAC}{\bkmkend AAAAAAAGAC}
00037 \{\par
{\bkmkstart AAAAAAAGAD}{\bkmkend AAAAAAAGAD}
00038     {\cf18 int} r;\par
{\bkmkstart AAAAAAAGAE}{\bkmkend AAAAAAAGAE}
00039     {\cf18 int} f;\par
{\bkmkstart AAAAAAAGAF}{\bkmkend AAAAAAAGAF}
00040 \par
{\bkmkstart AAAAAAAGAG}{\bkmkend AAAAAAAGAG}
00041     ThreadLock ();\par
{\bkmkstart AAAAAAAGAH}{\bkmkend AAAAAAAGAH}
00042 \par
{\bkmkstart AAAAAAAGAI}{\bkmkend AAAAAAAGAI}
00043     {\cf19 if} (dispatch == workcount)\par
{\bkmkstart AAAAAAAGAJ}{\bkmkend AAAAAAAGAJ}
00044     \{\par
{\bkmkstart AAAAAAAGAK}{\bkmkend AAAAAAAGAK}
00045         ThreadUnlock ();\par
{\bkmkstart AAAAAAAGAL}{\bkmkend AAAAAAAGAL}
00046         {\cf19 return} -1;\par
{\bkmkstart AAAAAAAGAM}{\bkmkend AAAAAAAGAM}
00047     \}\par
{\bkmkstart AAAAAAAGAN}{\bkmkend AAAAAAAGAN}
00048 \par
{\bkmkstart AAAAAAAGAO}{\bkmkend AAAAAAAGAO}
00049     f = 10*dispatch / workcount;\par
{\bkmkstart AAAAAAAGAP}{\bkmkend AAAAAAAGAP}
00050     {\cf19 if} (f != oldf)\par
{\bkmkstart AAAAAAAGAQ}{\bkmkend AAAAAAAGAQ}
00051     \{\par
{\bkmkstart AAAAAAAGAR}{\bkmkend AAAAAAAGAR}
00052         oldf = f;\par
{\bkmkstart AAAAAAAGAS}{\bkmkend AAAAAAAGAS}
00053         {\cf19 if} (pacifier)\par
{\bkmkstart AAAAAAAGAT}{\bkmkend AAAAAAAGAT}
00054             printf ({\cf22 "%i..."}, f);\par
{\bkmkstart AAAAAAAGAU}{\bkmkend AAAAAAAGAU}
00055     \}\par
{\bkmkstart AAAAAAAGAV}{\bkmkend AAAAAAAGAV}
00056 \par
{\bkmkstart AAAAAAAGAW}{\bkmkend AAAAAAAGAW}
00057     r = dispatch;\par
{\bkmkstart AAAAAAAGAX}{\bkmkend AAAAAAAGAX}
00058     dispatch++;\par
{\bkmkstart AAAAAAAGAY}{\bkmkend AAAAAAAGAY}
00059     ThreadUnlock ();\par
{\bkmkstart AAAAAAAGAZ}{\bkmkend AAAAAAAGAZ}
00060 \par
{\bkmkstart AAAAAAAGBA}{\bkmkend AAAAAAAGBA}
00061     {\cf19 return} r;\par
{\bkmkstart AAAAAAAGBB}{\bkmkend AAAAAAAGBB}
00062 \}\par
{\bkmkstart AAAAAAAGBC}{\bkmkend AAAAAAAGBC}
00063 \par
{\bkmkstart AAAAAAAGBD}{\bkmkend AAAAAAAGBD}
00064 \par
{\bkmkstart AAAAAAAGBE}{\bkmkend AAAAAAAGBE}
00065 void (*workfunction) (int);\par
{\bkmkstart AAAAAAAGBF}{\bkmkend AAAAAAAGBF}
00066 \par
{\bkmkstart AAAAAAAGBG}{\bkmkend AAAAAAAGBG}
00067 {\cf18 void} ThreadWorkerFunction ({\cf18 int} threadnum)\par
{\bkmkstart AAAAAAAGBH}{\bkmkend AAAAAAAGBH}
00068 \{\par
{\bkmkstart AAAAAAAGBI}{\bkmkend AAAAAAAGBI}
00069     {\cf18 int}         work;\par
{\bkmkstart AAAAAAAGBJ}{\bkmkend AAAAAAAGBJ}
00070 \par
{\bkmkstart AAAAAAAGBK}{\bkmkend AAAAAAAGBK}
00071     {\cf19 while} (1)\par
{\bkmkstart AAAAAAAGBL}{\bkmkend AAAAAAAGBL}
00072     \{\par
{\bkmkstart AAAAAAAGBM}{\bkmkend AAAAAAAGBM}
00073         work = GetThreadWork ();\par
{\bkmkstart AAAAAAAGBN}{\bkmkend AAAAAAAGBN}
00074         {\cf19 if} (work == -1)\par
{\bkmkstart AAAAAAAGBO}{\bkmkend AAAAAAAGBO}
00075             {\cf19 break};\par
{\bkmkstart AAAAAAAGBP}{\bkmkend AAAAAAAGBP}
00076         workfunction(work);\par
{\bkmkstart AAAAAAAGBQ}{\bkmkend AAAAAAAGBQ}
00077     \}\par
{\bkmkstart AAAAAAAGBR}{\bkmkend AAAAAAAGBR}
00078 \}\par
{\bkmkstart AAAAAAAGBS}{\bkmkend AAAAAAAGBS}
00079 \par
{\bkmkstart AAAAAAAGBT}{\bkmkend AAAAAAAGBT}
00080 {\cf18 void} RunThreadsOnIndividual ({\cf18 int} workcnt, qboolean showpacifier, {\cf18 void}(*func)({\cf18 int}))\par
{\bkmkstart AAAAAAAGBU}{\bkmkend AAAAAAAGBU}
00081 \{\par
{\bkmkstart AAAAAAAGBV}{\bkmkend AAAAAAAGBV}
00082     workfunction = func;\par
{\bkmkstart AAAAAAAGBW}{\bkmkend AAAAAAAGBW}
00083     RunThreadsOn (workcnt, showpacifier, ThreadWorkerFunction);\par
{\bkmkstart AAAAAAAGBX}{\bkmkend AAAAAAAGBX}
00084 \}\par
{\bkmkstart AAAAAAAGBY}{\bkmkend AAAAAAAGBY}
00085 \par
{\bkmkstart AAAAAAAGBZ}{\bkmkend AAAAAAAGBZ}
00086 \par
{\bkmkstart AAAAAAAGCA}{\bkmkend AAAAAAAGCA}
00087 {\cf20 /*}\par
{\bkmkstart AAAAAAAGCB}{\bkmkend AAAAAAAGCB}
00088 {\cf20 ===================================================================}\par
{\bkmkstart AAAAAAAGCC}{\bkmkend AAAAAAAGCC}
00089 {\cf20 }\par
{\bkmkstart AAAAAAAGCD}{\bkmkend AAAAAAAGCD}
00090 {\cf20 WIN32}\par
{\bkmkstart AAAAAAAGCE}{\bkmkend AAAAAAAGCE}
00091 {\cf20 }\par
{\bkmkstart AAAAAAAGCF}{\bkmkend AAAAAAAGCF}
00092 {\cf20 ===================================================================}\par
{\bkmkstart AAAAAAAGCG}{\bkmkend AAAAAAAGCG}
00093 {\cf20 */}\par
{\bkmkstart AAAAAAAGCH}{\bkmkend AAAAAAAGCH}
00094 {\cf21 #ifdef WIN32}\par
{\bkmkstart AAAAAAAGCI}{\bkmkend AAAAAAAGCI}
00095 \par
{\bkmkstart AAAAAAAGCJ}{\bkmkend AAAAAAAGCJ}
00096 {\cf21 #define USED}\par
{\bkmkstart AAAAAAAGCK}{\bkmkend AAAAAAAGCK}
00097 \par
{\bkmkstart AAAAAAAGCL}{\bkmkend AAAAAAAGCL}
00098 {\cf21 #include <windows.h>}\par
{\bkmkstart AAAAAAAGCM}{\bkmkend AAAAAAAGCM}
00099 \par
{\bkmkstart AAAAAAAGCN}{\bkmkend AAAAAAAGCN}
00100 {\cf18 int}             numthreads = -1;\par
{\bkmkstart AAAAAAAGCO}{\bkmkend AAAAAAAGCO}
00101 CRITICAL_SECTION                crit;\par
{\bkmkstart AAAAAAAGCP}{\bkmkend AAAAAAAGCP}
00102 {\cf17 static} {\cf18 int} enter;\par
{\bkmkstart AAAAAAAGCQ}{\bkmkend AAAAAAAGCQ}
00103 \par
{\bkmkstart AAAAAAAGCR}{\bkmkend AAAAAAAGCR}
00104 {\cf18 void} ThreadSetDefault ({\cf18 void})\par
{\bkmkstart AAAAAAAGCS}{\bkmkend AAAAAAAGCS}
00105 \{\par
{\bkmkstart AAAAAAAGCT}{\bkmkend AAAAAAAGCT}
00106     SYSTEM_INFO info;\par
{\bkmkstart AAAAAAAGCU}{\bkmkend AAAAAAAGCU}
00107 \par
{\bkmkstart AAAAAAAGCV}{\bkmkend AAAAAAAGCV}
00108     {\cf19 if} (numthreads == -1)       {\cf20 /* not set manually */}\par
{\bkmkstart AAAAAAAGCW}{\bkmkend AAAAAAAGCW}
00109     \{\par
{\bkmkstart AAAAAAAGCX}{\bkmkend AAAAAAAGCX}
00110         GetSystemInfo (&info);\par
{\bkmkstart AAAAAAAGCY}{\bkmkend AAAAAAAGCY}
00111         numthreads = info.dwNumberOfProcessors;\par
{\bkmkstart AAAAAAAGCZ}{\bkmkend AAAAAAAGCZ}
00112         {\cf19 if} (numthreads < 1 || numthreads > 32)\par
{\bkmkstart AAAAAAAGDA}{\bkmkend AAAAAAAGDA}
00113             numthreads = 1;\par
{\bkmkstart AAAAAAAGDB}{\bkmkend AAAAAAAGDB}
00114     \}\par
{\bkmkstart AAAAAAAGDC}{\bkmkend AAAAAAAGDC}
00115 \par
{\bkmkstart AAAAAAAGDD}{\bkmkend AAAAAAAGDD}
00116     qprintf ({\cf22 "%i threads\\n"}, numthreads);\par
{\bkmkstart AAAAAAAGDE}{\bkmkend AAAAAAAGDE}
00117 \}\par
{\bkmkstart AAAAAAAGDF}{\bkmkend AAAAAAAGDF}
00118 \par
{\bkmkstart AAAAAAAGDG}{\bkmkend AAAAAAAGDG}
00119 \par
{\bkmkstart AAAAAAAGDH}{\bkmkend AAAAAAAGDH}
00120 {\cf18 void} ThreadLock ({\cf18 void})\par
{\bkmkstart AAAAAAAGDI}{\bkmkend AAAAAAAGDI}
00121 \{\par
{\bkmkstart AAAAAAAGDJ}{\bkmkend AAAAAAAGDJ}
00122     {\cf19 if} (!threaded)\par
{\bkmkstart AAAAAAAGDK}{\bkmkend AAAAAAAGDK}
00123         {\cf19 return};\par
{\bkmkstart AAAAAAAGDL}{\bkmkend AAAAAAAGDL}
00124     EnterCriticalSection (&crit);\par
{\bkmkstart AAAAAAAGDM}{\bkmkend AAAAAAAGDM}
00125     {\cf19 if} (enter)\par
{\bkmkstart AAAAAAAGDN}{\bkmkend AAAAAAAGDN}
00126         Error ({\cf22 "Recursive ThreadLock\\n"});\par
{\bkmkstart AAAAAAAGDO}{\bkmkend AAAAAAAGDO}
00127     enter = 1;\par
{\bkmkstart AAAAAAAGDP}{\bkmkend AAAAAAAGDP}
00128 \}\par
{\bkmkstart AAAAAAAGDQ}{\bkmkend AAAAAAAGDQ}
00129 \par
{\bkmkstart AAAAAAAGDR}{\bkmkend AAAAAAAGDR}
00130 {\cf18 void} ThreadUnlock ({\cf18 void})\par
{\bkmkstart AAAAAAAGDS}{\bkmkend AAAAAAAGDS}
00131 \{\par
{\bkmkstart AAAAAAAGDT}{\bkmkend AAAAAAAGDT}
00132     {\cf19 if} (!threaded)\par
{\bkmkstart AAAAAAAGDU}{\bkmkend AAAAAAAGDU}
00133         {\cf19 return};\par
{\bkmkstart AAAAAAAGDV}{\bkmkend AAAAAAAGDV}
00134     {\cf19 if} (!enter)\par
{\bkmkstart AAAAAAAGDW}{\bkmkend AAAAAAAGDW}
00135         Error ({\cf22 "ThreadUnlock without lock\\n"});\par
{\bkmkstart AAAAAAAGDX}{\bkmkend AAAAAAAGDX}
00136     enter = 0;\par
{\bkmkstart AAAAAAAGDY}{\bkmkend AAAAAAAGDY}
00137     LeaveCriticalSection (&crit);\par
{\bkmkstart AAAAAAAGDZ}{\bkmkend AAAAAAAGDZ}
00138 \}\par
{\bkmkstart AAAAAAAGEA}{\bkmkend AAAAAAAGEA}
00139 \par
{\bkmkstart AAAAAAAGEB}{\bkmkend AAAAAAAGEB}
00140 {\cf20 /*}\par
{\bkmkstart AAAAAAAGEC}{\bkmkend AAAAAAAGEC}
00141 {\cf20 =============}\par
{\bkmkstart AAAAAAAGED}{\bkmkend AAAAAAAGED}
00142 {\cf20 RunThreadsOn}\par
{\bkmkstart AAAAAAAGEE}{\bkmkend AAAAAAAGEE}
00143 {\cf20 =============}\par
{\bkmkstart AAAAAAAGEF}{\bkmkend AAAAAAAGEF}
00144 {\cf20 */}\par
{\bkmkstart AAAAAAAGEG}{\bkmkend AAAAAAAGEG}
00145 {\cf18 void} RunThreadsOn ({\cf18 int} workcnt, qboolean showpacifier, {\cf18 void}(*func)({\cf18 int}))\par
{\bkmkstart AAAAAAAGEH}{\bkmkend AAAAAAAGEH}
00146 \{\par
{\bkmkstart AAAAAAAGEI}{\bkmkend AAAAAAAGEI}
00147     {\cf18 int}         threadid[MAX_THREADS];\par
{\bkmkstart AAAAAAAGEJ}{\bkmkend AAAAAAAGEJ}
00148     HANDLE      threadhandle[MAX_THREADS];\par
{\bkmkstart AAAAAAAGEK}{\bkmkend AAAAAAAGEK}
00149     {\cf18 int}         i;\par
{\bkmkstart AAAAAAAGEL}{\bkmkend AAAAAAAGEL}
00150     {\cf18 int}         start, end;\par
{\bkmkstart AAAAAAAGEM}{\bkmkend AAAAAAAGEM}
00151 \par
{\bkmkstart AAAAAAAGEN}{\bkmkend AAAAAAAGEN}
00152     start = I_FloatTime ();\par
{\bkmkstart AAAAAAAGEO}{\bkmkend AAAAAAAGEO}
00153     dispatch = 0;\par
{\bkmkstart AAAAAAAGEP}{\bkmkend AAAAAAAGEP}
00154     workcount = workcnt;\par
{\bkmkstart AAAAAAAGEQ}{\bkmkend AAAAAAAGEQ}
00155     oldf = -1;\par
{\bkmkstart AAAAAAAGER}{\bkmkend AAAAAAAGER}
00156     pacifier = showpacifier;\par
{\bkmkstart AAAAAAAGES}{\bkmkend AAAAAAAGES}
00157     threaded = {\cf17 true};\par
{\bkmkstart AAAAAAAGET}{\bkmkend AAAAAAAGET}
00158     {\cf20 /*}\par
{\bkmkstart AAAAAAAGEU}{\bkmkend AAAAAAAGEU}
00159 {\cf20     // run threads in parallel}\par
{\bkmkstart AAAAAAAGEV}{\bkmkend AAAAAAAGEV}
00160 {\cf20     */}\par
{\bkmkstart AAAAAAAGEW}{\bkmkend AAAAAAAGEW}
00161     InitializeCriticalSection (&crit);\par
{\bkmkstart AAAAAAAGEX}{\bkmkend AAAAAAAGEX}
00162     {\cf19 for} (i=0 ; i<numthreads ; i++)\par
{\bkmkstart AAAAAAAGEY}{\bkmkend AAAAAAAGEY}
00163     \{\par
{\bkmkstart AAAAAAAGEZ}{\bkmkend AAAAAAAGEZ}
00164         threadhandle[i] = CreateThread(\par
{\bkmkstart AAAAAAAGFA}{\bkmkend AAAAAAAGFA}
00165                               NULL,     {\cf20 /* LPSECURITY_ATTRIBUTES lpsa, */}\par
{\bkmkstart AAAAAAAGFB}{\bkmkend AAAAAAAGFB}
00166                               0,                {\cf20 /* DWORD cbStack, */}\par
{\bkmkstart AAAAAAAGFC}{\bkmkend AAAAAAAGFC}
00167                               (LPTHREAD_START_ROUTINE)func,     {\cf20 /* LPTHREAD_START_ROUTINE lpStartAddr, */}\par
{\bkmkstart AAAAAAAGFD}{\bkmkend AAAAAAAGFD}
00168                               (LPVOID)i,        {\cf20 /* LPVOID lpvThreadParm, */}\par
{\bkmkstart AAAAAAAGFE}{\bkmkend AAAAAAAGFE}
00169                               0,                        {\cf20 /*   DWORD fdwCreate, */}\par
{\bkmkstart AAAAAAAGFF}{\bkmkend AAAAAAAGFF}
00170                               (LPDWORD)&threadid[i]);              {\cf20 /* jw26u22 */}\par
{\bkmkstart AAAAAAAGFG}{\bkmkend AAAAAAAGFG}
00171         {\cf20 /*   (LPDWORD)&threadid[i]); */}\par
{\bkmkstart AAAAAAAGFH}{\bkmkend AAAAAAAGFH}
00172     \}\par
{\bkmkstart AAAAAAAGFI}{\bkmkend AAAAAAAGFI}
00173 \par
{\bkmkstart AAAAAAAGFJ}{\bkmkend AAAAAAAGFJ}
00174     {\cf19 for} (i=0 ; i<numthreads ; i++)\par
{\bkmkstart AAAAAAAGFK}{\bkmkend AAAAAAAGFK}
00175         WaitForSingleObject (threadhandle[i], INFINITE);\par
{\bkmkstart AAAAAAAGFL}{\bkmkend AAAAAAAGFL}
00176     DeleteCriticalSection (&crit);\par
{\bkmkstart AAAAAAAGFM}{\bkmkend AAAAAAAGFM}
00177 \par
{\bkmkstart AAAAAAAGFN}{\bkmkend AAAAAAAGFN}
00178     threaded = {\cf17 false};\par
{\bkmkstart AAAAAAAGFO}{\bkmkend AAAAAAAGFO}
00179     end = I_FloatTime ();\par
{\bkmkstart AAAAAAAGFP}{\bkmkend AAAAAAAGFP}
00180     {\cf19 if} (pacifier)\par
{\bkmkstart AAAAAAAGFQ}{\bkmkend AAAAAAAGFQ}
00181         printf ({\cf22 " (%i)\\n"}, end-start);\par
{\bkmkstart AAAAAAAGFR}{\bkmkend AAAAAAAGFR}
00182 \}\par
{\bkmkstart AAAAAAAGFS}{\bkmkend AAAAAAAGFS}
00183 \par
{\bkmkstart AAAAAAAGFT}{\bkmkend AAAAAAAGFT}
00184 \par
{\bkmkstart AAAAAAAGFU}{\bkmkend AAAAAAAGFU}
00185 {\cf21 #endif}\par
{\bkmkstart AAAAAAAGFV}{\bkmkend AAAAAAAGFV}
00186 \par
{\bkmkstart AAAAAAAGFW}{\bkmkend AAAAAAAGFW}
00187 {\cf20 /*}\par
{\bkmkstart AAAAAAAGFX}{\bkmkend AAAAAAAGFX}
00188 {\cf20 ===================================================================}\par
{\bkmkstart AAAAAAAGFY}{\bkmkend AAAAAAAGFY}
00189 {\cf20 }\par
{\bkmkstart AAAAAAAGFZ}{\bkmkend AAAAAAAGFZ}
00190 {\cf20 OSF1}\par
{\bkmkstart AAAAAAAGGA}{\bkmkend AAAAAAAGGA}
00191 {\cf20 }\par
{\bkmkstart AAAAAAAGGB}{\bkmkend AAAAAAAGGB}
00192 {\cf20 ===================================================================}\par
{\bkmkstart AAAAAAAGGC}{\bkmkend AAAAAAAGGC}
00193 {\cf20 */}\par
{\bkmkstart AAAAAAAGGD}{\bkmkend AAAAAAAGGD}
00194 \par
{\bkmkstart AAAAAAAGGE}{\bkmkend AAAAAAAGGE}
00195 {\cf21 #ifdef __osf__}\par
{\bkmkstart AAAAAAAGGF}{\bkmkend AAAAAAAGGF}
00196 {\cf21 #define USED}\par
{\bkmkstart AAAAAAAGGG}{\bkmkend AAAAAAAGGG}
00197 \par
{\bkmkstart AAAAAAAGGH}{\bkmkend AAAAAAAGGH}
00198 {\cf18 int}             numthreads = 4;\par
{\bkmkstart AAAAAAAGGI}{\bkmkend AAAAAAAGGI}
00199 \par
{\bkmkstart AAAAAAAGGJ}{\bkmkend AAAAAAAGGJ}
00200 {\cf18 void} ThreadSetDefault ({\cf18 void})\par
{\bkmkstart AAAAAAAGGK}{\bkmkend AAAAAAAGGK}
00201 \{\par
{\bkmkstart AAAAAAAGGL}{\bkmkend AAAAAAAGGL}
00202     numthreads = 4;\par
{\bkmkstart AAAAAAAGGM}{\bkmkend AAAAAAAGGM}
00203 \}\par
{\bkmkstart AAAAAAAGGN}{\bkmkend AAAAAAAGGN}
00204 \par
{\bkmkstart AAAAAAAGGO}{\bkmkend AAAAAAAGGO}
00205 {\cf21 #include <stdlib.h>}\par
{\bkmkstart AAAAAAAGGP}{\bkmkend AAAAAAAGGP}
00206 {\cf21 #include <pthread.h>}\par
{\bkmkstart AAAAAAAGGQ}{\bkmkend AAAAAAAGGQ}
00207 \par
{\bkmkstart AAAAAAAGGR}{\bkmkend AAAAAAAGGR}
00208 pthread_mutex_t *my_mutex;\par
{\bkmkstart AAAAAAAGGS}{\bkmkend AAAAAAAGGS}
00209 \par
{\bkmkstart AAAAAAAGGT}{\bkmkend AAAAAAAGGT}
00210 {\cf18 void} ThreadLock ({\cf18 void})\par
{\bkmkstart AAAAAAAGGU}{\bkmkend AAAAAAAGGU}
00211 \{\par
{\bkmkstart AAAAAAAGGV}{\bkmkend AAAAAAAGGV}
00212     {\cf19 if} (my_mutex)\par
{\bkmkstart AAAAAAAGGW}{\bkmkend AAAAAAAGGW}
00213         pthread_mutex_lock (my_mutex);\par
{\bkmkstart AAAAAAAGGX}{\bkmkend AAAAAAAGGX}
00214 \}\par
{\bkmkstart AAAAAAAGGY}{\bkmkend AAAAAAAGGY}
00215 \par
{\bkmkstart AAAAAAAGGZ}{\bkmkend AAAAAAAGGZ}
00216 {\cf18 void} ThreadUnlock ({\cf18 void})\par
{\bkmkstart AAAAAAAGHA}{\bkmkend AAAAAAAGHA}
00217 \{\par
{\bkmkstart AAAAAAAGHB}{\bkmkend AAAAAAAGHB}
00218     {\cf19 if} (my_mutex)\par
{\bkmkstart AAAAAAAGHC}{\bkmkend AAAAAAAGHC}
00219         pthread_mutex_unlock (my_mutex);\par
{\bkmkstart AAAAAAAGHD}{\bkmkend AAAAAAAGHD}
00220 \}\par
{\bkmkstart AAAAAAAGHE}{\bkmkend AAAAAAAGHE}
00221 \par
{\bkmkstart AAAAAAAGHF}{\bkmkend AAAAAAAGHF}
00222 \par
{\bkmkstart AAAAAAAGHG}{\bkmkend AAAAAAAGHG}
00223 {\cf20 /*}\par
{\bkmkstart AAAAAAAGHH}{\bkmkend AAAAAAAGHH}
00224 {\cf20 =============}\par
{\bkmkstart AAAAAAAGHI}{\bkmkend AAAAAAAGHI}
00225 {\cf20 RunThreadsOn}\par
{\bkmkstart AAAAAAAGHJ}{\bkmkend AAAAAAAGHJ}
00226 {\cf20 =============}\par
{\bkmkstart AAAAAAAGHK}{\bkmkend AAAAAAAGHK}
00227 {\cf20 */}\par
{\bkmkstart AAAAAAAGHL}{\bkmkend AAAAAAAGHL}
00228 {\cf18 void} RunThreadsOn ({\cf18 int} workcnt, qboolean showpacifier, {\cf18 void}(*func)({\cf18 int}))\par
{\bkmkstart AAAAAAAGHM}{\bkmkend AAAAAAAGHM}
00229 \{\par
{\bkmkstart AAAAAAAGHN}{\bkmkend AAAAAAAGHN}
00230     {\cf18 int}         i;\par
{\bkmkstart AAAAAAAGHO}{\bkmkend AAAAAAAGHO}
00231     pthread_t   work_threads[MAX_THREADS];\par
{\bkmkstart AAAAAAAGHP}{\bkmkend AAAAAAAGHP}
00232     {\cf20 /*pthread_addr_t    status; */}  {\cf20 /* fix me */}\par
{\bkmkstart AAAAAAAGHQ}{\bkmkend AAAAAAAGHQ}
00233     pthread_attr_t      attrib;\par
{\bkmkstart AAAAAAAGHR}{\bkmkend AAAAAAAGHR}
00234     pthread_mutexattr_t mattrib;\par
{\bkmkstart AAAAAAAGHS}{\bkmkend AAAAAAAGHS}
00235     {\cf18 int}         start, end;\par
{\bkmkstart AAAAAAAGHT}{\bkmkend AAAAAAAGHT}
00236 \par
{\bkmkstart AAAAAAAGHU}{\bkmkend AAAAAAAGHU}
00237     start = I_FloatTime ();\par
{\bkmkstart AAAAAAAGHV}{\bkmkend AAAAAAAGHV}
00238     dispatch = 0;\par
{\bkmkstart AAAAAAAGHW}{\bkmkend AAAAAAAGHW}
00239     workcount = workcnt;\par
{\bkmkstart AAAAAAAGHX}{\bkmkend AAAAAAAGHX}
00240     oldf = -1;\par
{\bkmkstart AAAAAAAGHY}{\bkmkend AAAAAAAGHY}
00241     pacifier = showpacifier;\par
{\bkmkstart AAAAAAAGHZ}{\bkmkend AAAAAAAGHZ}
00242     threaded = {\cf17 true};\par
{\bkmkstart AAAAAAAGIA}{\bkmkend AAAAAAAGIA}
00243 \par
{\bkmkstart AAAAAAAGIB}{\bkmkend AAAAAAAGIB}
00244     {\cf19 if} (pacifier)\par
{\bkmkstart AAAAAAAGIC}{\bkmkend AAAAAAAGIC}
00245         setbuf (stdout, NULL);\par
{\bkmkstart AAAAAAAGID}{\bkmkend AAAAAAAGID}
00246 \par
{\bkmkstart AAAAAAAGIE}{\bkmkend AAAAAAAGIE}
00247     {\cf19 if} (!my_mutex)\par
{\bkmkstart AAAAAAAGIF}{\bkmkend AAAAAAAGIF}
00248     \{\par
{\bkmkstart AAAAAAAGIG}{\bkmkend AAAAAAAGIG}
00249         my_mutex = malloc ({\cf17 sizeof}(*my_mutex));\par
{\bkmkstart AAAAAAAGIH}{\bkmkend AAAAAAAGIH}
00250         {\cf20 /*if (pthread_mutexattr_create (&mattrib) == -1)*/}\par
{\bkmkstart AAAAAAAGII}{\bkmkend AAAAAAAGII}
00251         {\cf19 if} (pthread_mutexattr_init (&mattrib) == -1)\par
{\bkmkstart AAAAAAAGIJ}{\bkmkend AAAAAAAGIJ}
00252             Error ({\cf22 "pthread_mutex_attr_create failed"});\par
{\bkmkstart AAAAAAAGIK}{\bkmkend AAAAAAAGIK}
00253         {\cf20 /*if (pthread_mutexattr_setkind_np (&mattrib, MUTEX_FAST_NP) == -1) */}\par
{\bkmkstart AAAAAAAGIL}{\bkmkend AAAAAAAGIL}
00254         {\cf19 if} (pthread_mutexattr_settype (&mattrib, PTHREAD_MUTEX_TIMED_NP) == -1)   {\cf20 /* fix me */}\par
{\bkmkstart AAAAAAAGIM}{\bkmkend AAAAAAAGIM}
00255             Error ({\cf22 "pthread_mutexattr_setkind_np failed"});\par
{\bkmkstart AAAAAAAGIN}{\bkmkend AAAAAAAGIN}
00256         {\cf20 /*if (pthread_mutex_init (my_mutex, mattrib) == -1)*/}\par
{\bkmkstart AAAAAAAGIO}{\bkmkend AAAAAAAGIO}
00257         {\cf19 if} (pthread_mutex_init (my_mutex, &mattrib) == -1) {\cf20 /* fix me */}\par
{\bkmkstart AAAAAAAGIP}{\bkmkend AAAAAAAGIP}
00258             Error ({\cf22 "pthread_mutex_init failed"});\par
{\bkmkstart AAAAAAAGIQ}{\bkmkend AAAAAAAGIQ}
00259     \}\par
{\bkmkstart AAAAAAAGIR}{\bkmkend AAAAAAAGIR}
00260 \par
{\bkmkstart AAAAAAAGIS}{\bkmkend AAAAAAAGIS}
00261     {\cf20 /*if (pthread_attr_create (&attrib) == -1)*/}\par
{\bkmkstart AAAAAAAGIT}{\bkmkend AAAAAAAGIT}
00262     {\cf19 if} (pthread_attr_init (&attrib) == -1)\par
{\bkmkstart AAAAAAAGIU}{\bkmkend AAAAAAAGIU}
00263         Error ({\cf22 "pthread_attr_create failed"});\par
{\bkmkstart AAAAAAAGIV}{\bkmkend AAAAAAAGIV}
00264     {\cf19 if} (pthread_attr_setstacksize (&attrib, 0x100000) == -1)\par
{\bkmkstart AAAAAAAGIW}{\bkmkend AAAAAAAGIW}
00265         Error ({\cf22 "pthread_attr_setstacksize failed"});\par
{\bkmkstart AAAAAAAGIX}{\bkmkend AAAAAAAGIX}
00266 \par
{\bkmkstart AAAAAAAGIY}{\bkmkend AAAAAAAGIY}
00267     {\cf19 for} (i=0 ; i<numthreads ; i++)\par
{\bkmkstart AAAAAAAGIZ}{\bkmkend AAAAAAAGIZ}
00268     \{\par
{\bkmkstart AAAAAAAGJA}{\bkmkend AAAAAAAGJA}
00269         {\cf20 /*if (pthread_create(&work_threads[i], attrib}\par
{\bkmkstart AAAAAAAGJB}{\bkmkend AAAAAAAGJB}
00270 {\cf20                 , (pthread_startroutine_t)func, (pthread_addr_t)i) == -1)*/}\par
{\bkmkstart AAAAAAAGJC}{\bkmkend AAAAAAAGJC}
00271         {\cf19 if} (pthread_create(&work_threads[i], &attrib\par
{\bkmkstart AAAAAAAGJD}{\bkmkend AAAAAAAGJD}
00272                            , ({\cf18 void} * (*)({\cf18 void} *))func, ({\cf18 void} *)i) == -1)\par
{\bkmkstart AAAAAAAGJE}{\bkmkend AAAAAAAGJE}
00273             Error ({\cf22 "pthread_create failed"});\par
{\bkmkstart AAAAAAAGJF}{\bkmkend AAAAAAAGJF}
00274     \}\par
{\bkmkstart AAAAAAAGJG}{\bkmkend AAAAAAAGJG}
00275 \par
{\bkmkstart AAAAAAAGJH}{\bkmkend AAAAAAAGJH}
00276     {\cf19 for} (i=0 ; i<numthreads ; i++)\par
{\bkmkstart AAAAAAAGJI}{\bkmkend AAAAAAAGJI}
00277     \{\par
{\bkmkstart AAAAAAAGJJ}{\bkmkend AAAAAAAGJJ}
00278         {\cf19 if} (pthread_join (work_threads[i], NULL) == -1) {\cf20 /* fix me */}\par
{\bkmkstart AAAAAAAGJK}{\bkmkend AAAAAAAGJK}
00279             Error ({\cf22 "pthread_join failed"});\par
{\bkmkstart AAAAAAAGJL}{\bkmkend AAAAAAAGJL}
00280     \}\par
{\bkmkstart AAAAAAAGJM}{\bkmkend AAAAAAAGJM}
00281 \par
{\bkmkstart AAAAAAAGJN}{\bkmkend AAAAAAAGJN}
00282     threaded = {\cf17 false};\par
{\bkmkstart AAAAAAAGJO}{\bkmkend AAAAAAAGJO}
00283 \par
{\bkmkstart AAAAAAAGJP}{\bkmkend AAAAAAAGJP}
00284     end = I_FloatTime ();\par
{\bkmkstart AAAAAAAGJQ}{\bkmkend AAAAAAAGJQ}
00285     {\cf19 if} (pacifier)\par
{\bkmkstart AAAAAAAGJR}{\bkmkend AAAAAAAGJR}
00286         printf ({\cf22 " (%i)\\n"}, end-start);\par
{\bkmkstart AAAAAAAGJS}{\bkmkend AAAAAAAGJS}
00287 \}\par
{\bkmkstart AAAAAAAGJT}{\bkmkend AAAAAAAGJT}
00288 \par
{\bkmkstart AAAAAAAGJU}{\bkmkend AAAAAAAGJU}
00289 \par
{\bkmkstart AAAAAAAGJV}{\bkmkend AAAAAAAGJV}
00290 {\cf21 #endif}\par
{\bkmkstart AAAAAAAGJW}{\bkmkend AAAAAAAGJW}
00291 \par
{\bkmkstart AAAAAAAGJX}{\bkmkend AAAAAAAGJX}
00292 {\cf20 /*}\par
{\bkmkstart AAAAAAAGJY}{\bkmkend AAAAAAAGJY}
00293 {\cf20 =======================================================================}\par
{\bkmkstart AAAAAAAGJZ}{\bkmkend AAAAAAAGJZ}
00294 {\cf20 }\par
{\bkmkstart AAAAAAAGKA}{\bkmkend AAAAAAAGKA}
00295 {\cf20   SINGLE THREAD}\par
{\bkmkstart AAAAAAAGKB}{\bkmkend AAAAAAAGKB}
00296 {\cf20 }\par
{\bkmkstart AAAAAAAGKC}{\bkmkend AAAAAAAGKC}
00297 {\cf20 =======================================================================}\par
{\bkmkstart AAAAAAAGKD}{\bkmkend AAAAAAAGKD}
00298 {\cf20 */}\par
{\bkmkstart AAAAAAAGKE}{\bkmkend AAAAAAAGKE}
00299 \par
{\bkmkstart AAAAAAAGKF}{\bkmkend AAAAAAAGKF}
00300 {\cf21 #ifndef USED}\par
{\bkmkstart AAAAAAAGKG}{\bkmkend AAAAAAAGKG}
00301 \par
{\bkmkstart AAAAAAAGKH}{\bkmkend AAAAAAAGKH}
00302 {\cf18 int}             numthreads = 1;\par
{\bkmkstart AAAAAAAGKI}{\bkmkend AAAAAAAGKI}
00303 \par
{\bkmkstart AAAAAAAGKJ}{\bkmkend AAAAAAAGKJ}
00304 {\cf18 void} ThreadSetDefault ({\cf18 void})\par
{\bkmkstart AAAAAAAGKK}{\bkmkend AAAAAAAGKK}
00305 \{\par
{\bkmkstart AAAAAAAGKL}{\bkmkend AAAAAAAGKL}
00306     numthreads = 1;\par
{\bkmkstart AAAAAAAGKM}{\bkmkend AAAAAAAGKM}
00307 \}\par
{\bkmkstart AAAAAAAGKN}{\bkmkend AAAAAAAGKN}
00308 \par
{\bkmkstart AAAAAAAGKO}{\bkmkend AAAAAAAGKO}
00309 {\cf18 void} ThreadLock ({\cf18 void})\par
{\bkmkstart AAAAAAAGKP}{\bkmkend AAAAAAAGKP}
00310 \{\par
{\bkmkstart AAAAAAAGKQ}{\bkmkend AAAAAAAGKQ}
00311 \}\par
{\bkmkstart AAAAAAAGKR}{\bkmkend AAAAAAAGKR}
00312 \par
{\bkmkstart AAAAAAAGKS}{\bkmkend AAAAAAAGKS}
00313 {\cf18 void} ThreadUnlock ({\cf18 void})\par
{\bkmkstart AAAAAAAGKT}{\bkmkend AAAAAAAGKT}
00314 \{\par
{\bkmkstart AAAAAAAGKU}{\bkmkend AAAAAAAGKU}
00315 \}\par
{\bkmkstart AAAAAAAGKV}{\bkmkend AAAAAAAGKV}
00316 \par
{\bkmkstart AAAAAAAGKW}{\bkmkend AAAAAAAGKW}
00317 {\cf20 /*}\par
{\bkmkstart AAAAAAAGKX}{\bkmkend AAAAAAAGKX}
00318 {\cf20 =============}\par
{\bkmkstart AAAAAAAGKY}{\bkmkend AAAAAAAGKY}
00319 {\cf20 RunThreadsOn}\par
{\bkmkstart AAAAAAAGKZ}{\bkmkend AAAAAAAGKZ}
00320 {\cf20 =============}\par
{\bkmkstart AAAAAAAGLA}{\bkmkend AAAAAAAGLA}
00321 {\cf20 */}\par
{\bkmkstart AAAAAAAGLB}{\bkmkend AAAAAAAGLB}
00322 {\cf18 void} RunThreadsOn ({\cf18 int} workcnt, qboolean showpacifier, {\cf18 void}(*func)({\cf18 int}))\par
{\bkmkstart AAAAAAAGLC}{\bkmkend AAAAAAAGLC}
00323 \{\par
{\bkmkstart AAAAAAAGLD}{\bkmkend AAAAAAAGLD}
00324     {\cf18 int}         i;\par
{\bkmkstart AAAAAAAGLE}{\bkmkend AAAAAAAGLE}
00325     {\cf18 int}         start, end;\par
{\bkmkstart AAAAAAAGLF}{\bkmkend AAAAAAAGLF}
00326 \par
{\bkmkstart AAAAAAAGLG}{\bkmkend AAAAAAAGLG}
00327     dispatch = 0;\par
{\bkmkstart AAAAAAAGLH}{\bkmkend AAAAAAAGLH}
00328     workcount = workcnt;\par
{\bkmkstart AAAAAAAGLI}{\bkmkend AAAAAAAGLI}
00329     oldf = -1;\par
{\bkmkstart AAAAAAAGLJ}{\bkmkend AAAAAAAGLJ}
00330     pacifier = showpacifier;\par
{\bkmkstart AAAAAAAGLK}{\bkmkend AAAAAAAGLK}
00331     start = I_FloatTime ();\par
{\bkmkstart AAAAAAAGLL}{\bkmkend AAAAAAAGLL}
00332 {\cf21 #ifdef NeXT}\par
{\bkmkstart AAAAAAAGLM}{\bkmkend AAAAAAAGLM}
00333     {\cf19 if} (pacifier)\par
{\bkmkstart AAAAAAAGLN}{\bkmkend AAAAAAAGLN}
00334         setbuf (stdout, NULL);\par
{\bkmkstart AAAAAAAGLO}{\bkmkend AAAAAAAGLO}
00335 {\cf21 #endif}\par
{\bkmkstart AAAAAAAGLP}{\bkmkend AAAAAAAGLP}
00336     func(0);\par
{\bkmkstart AAAAAAAGLQ}{\bkmkend AAAAAAAGLQ}
00337 \par
{\bkmkstart AAAAAAAGLR}{\bkmkend AAAAAAAGLR}
00338     end = I_FloatTime ();\par
{\bkmkstart AAAAAAAGLS}{\bkmkend AAAAAAAGLS}
00339     {\cf19 if} (pacifier)\par
{\bkmkstart AAAAAAAGLT}{\bkmkend AAAAAAAGLT}
00340         printf ({\cf22 " (%i)\\n"}, end-start);\par
{\bkmkstart AAAAAAAGLU}{\bkmkend AAAAAAAGLU}
00341 \}\par
{\bkmkstart AAAAAAAGLV}{\bkmkend AAAAAAAGLV}
00342 \par
{\bkmkstart AAAAAAAGLW}{\bkmkend AAAAAAAGLW}
00343 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
threads.h\par \pard\plain 
{\bkmkstart AAAAAAAGLX}
{\bkmkend AAAAAAAGLX}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAGLY}{\bkmkend AAAAAAAGLY}
00001 {\cf20 /***}\par
{\bkmkstart AAAAAAAGLZ}{\bkmkend AAAAAAAGLZ}
00002 {\cf20 *}\par
{\bkmkstart AAAAAAAGMA}{\bkmkend AAAAAAAGMA}
00003 {\cf20 *       Copyright (c) 1996-2002, Valve LLC. All rights reserved.}\par
{\bkmkstart AAAAAAAGMB}{\bkmkend AAAAAAAGMB}
00004 {\cf20 *}\par
{\bkmkstart AAAAAAAGMC}{\bkmkend AAAAAAAGMC}
00005 {\cf20 *       This product contains software technology licensed from Id}\par
{\bkmkstart AAAAAAAGMD}{\bkmkend AAAAAAAGMD}
00006 {\cf20 *       Software, Inc. ("Id Technology").  Id Technology (c) 1996 Id Software, Inc.}\par
{\bkmkstart AAAAAAAGME}{\bkmkend AAAAAAAGME}
00007 {\cf20 *       All Rights Reserved.}\par
{\bkmkstart AAAAAAAGMF}{\bkmkend AAAAAAAGMF}
00008 {\cf20 *}\par
{\bkmkstart AAAAAAAGMG}{\bkmkend AAAAAAAGMG}
00009 {\cf20 ****/}\par
{\bkmkstart AAAAAAAGMH}{\bkmkend AAAAAAAGMH}
00010 \par
{\bkmkstart AAAAAAAGMI}{\bkmkend AAAAAAAGMI}
00011 {\cf20 /* thread.h */}\par
{\bkmkstart AAAAAAAGMJ}{\bkmkend AAAAAAAGMJ}
00012 \par
{\bkmkstart AAAAAAAGMK}{\bkmkend AAAAAAAGMK}
00013 {\cf20 /*}\par
{\bkmkstart AAAAAAAGML}{\bkmkend AAAAAAAGML}
00014 {\cf20 =================}\par
{\bkmkstart AAAAAAAGMM}{\bkmkend AAAAAAAGMM}
00015 {\cf20 last modified: 2023/3/25}\par
{\bkmkstart AAAAAAAGMN}{\bkmkend AAAAAAAGMN}
00016 {\cf20 =================}\par
{\bkmkstart AAAAAAAGMO}{\bkmkend AAAAAAAGMO}
00017 {\cf20 */}\par
{\bkmkstart AAAAAAAGMP}{\bkmkend AAAAAAAGMP}
00018 \par
{\bkmkstart AAAAAAAGMQ}{\bkmkend AAAAAAAGMQ}
00019 {\cf21 #ifndef __THREADS__}\par
{\bkmkstart AAAAAAAGMR}{\bkmkend AAAAAAAGMR}
00020 {\cf21 #define __THREADS__}\par
{\bkmkstart AAAAAAAGMS}{\bkmkend AAAAAAAGMS}
00021 \par
{\bkmkstart AAAAAAAGMT}{\bkmkend AAAAAAAGMT}
00022 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAGMU}{\bkmkend AAAAAAAGMU}
00023 {\cf17 extern} {\cf22 "C"}\par
{\bkmkstart AAAAAAAGMV}{\bkmkend AAAAAAAGMV}
00024 \{\par
{\bkmkstart AAAAAAAGMW}{\bkmkend AAAAAAAGMW}
00025 {\cf21 #endif}\par
{\bkmkstart AAAAAAAGMX}{\bkmkend AAAAAAAGMX}
00026 \par
{\bkmkstart AAAAAAAGMY}{\bkmkend AAAAAAAGMY}
00027 {\cf17 extern}  {\cf18 int}             numthreads;\par
{\bkmkstart AAAAAAAGMZ}{\bkmkend AAAAAAAGMZ}
00028 \par
{\bkmkstart AAAAAAAGNA}{\bkmkend AAAAAAAGNA}
00029 {\cf18 void} ThreadSetDefault ({\cf18 void});\par
{\bkmkstart AAAAAAAGNB}{\bkmkend AAAAAAAGNB}
00030 {\cf18 int}     GetThreadWork ({\cf18 void});\par
{\bkmkstart AAAAAAAGNC}{\bkmkend AAAAAAAGNC}
00031 {\cf18 void} RunThreadsOnIndividual ({\cf18 int} workcnt, qboolean showpacifier, {\cf18 void}(*func)({\cf18 int}));\par
{\bkmkstart AAAAAAAGND}{\bkmkend AAAAAAAGND}
00032 {\cf18 void} RunThreadsOn ({\cf18 int} workcnt, qboolean showpacifier, {\cf18 void}(*func)({\cf18 int}));\par
{\bkmkstart AAAAAAAGNE}{\bkmkend AAAAAAAGNE}
00033 {\cf18 void} ThreadLock ({\cf18 void});\par
{\bkmkstart AAAAAAAGNF}{\bkmkend AAAAAAAGNF}
00034 {\cf18 void} ThreadUnlock ({\cf18 void});\par
{\bkmkstart AAAAAAAGNG}{\bkmkend AAAAAAAGNG}
00035 \par
{\bkmkstart AAAAAAAGNH}{\bkmkend AAAAAAAGNH}
00036 {\cf21 #ifndef NO_THREAD_NAMES}\par
{\bkmkstart AAAAAAAGNI}{\bkmkend AAAAAAAGNI}
00037 {\cf21 #define RunThreadsOn(n,p,f) \{ if (p) printf("%-20s "}, #f ":"); RunThreadsOn(n,p,f); \}\par
{\bkmkstart AAAAAAAGNJ}{\bkmkend AAAAAAAGNJ}
00038 {\cf21 #define RunThreadsOnIndividual(n,p,f) \{ if (p) printf("%-20s "}, #f ":"); RunThreadsOnIndividual(n,p,f); \}\par
{\bkmkstart AAAAAAAGNK}{\bkmkend AAAAAAAGNK}
00039 {\cf21 #endif}\par
{\bkmkstart AAAAAAAGNL}{\bkmkend AAAAAAAGNL}
00040 \par
{\bkmkstart AAAAAAAGNM}{\bkmkend AAAAAAAGNM}
00041 \par
{\bkmkstart AAAAAAAGNN}{\bkmkend AAAAAAAGNN}
00042 \par
{\bkmkstart AAAAAAAGNO}{\bkmkend AAAAAAAGNO}
00043 \par
{\bkmkstart AAAAAAAGNP}{\bkmkend AAAAAAAGNP}
00044 \par
{\bkmkstart AAAAAAAGNQ}{\bkmkend AAAAAAAGNQ}
00045 {\cf21 #ifdef __cplusplus}\par
{\bkmkstart AAAAAAAGNR}{\bkmkend AAAAAAAGNR}
00046 \}\par
{\bkmkstart AAAAAAAGNS}{\bkmkend AAAAAAAGNS}
00047 {\cf21 #endif}\par
{\bkmkstart AAAAAAAGNT}{\bkmkend AAAAAAAGNT}
00048 \par
{\bkmkstart AAAAAAAGNU}{\bkmkend AAAAAAAGNU}
00049 {\cf21 #endif }{\cf20 /*__THREADS__*/}{\cf21 }\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
